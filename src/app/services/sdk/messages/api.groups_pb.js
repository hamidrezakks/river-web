/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.exportSymbol('proto.msg.GroupUploadPhoto', null, global);
goog.exportSymbol('proto.msg.GroupsAddUser', null, global);
goog.exportSymbol('proto.msg.GroupsCreate', null, global);
goog.exportSymbol('proto.msg.GroupsDeleteUser', null, global);
goog.exportSymbol('proto.msg.GroupsEditTitle', null, global);
goog.exportSymbol('proto.msg.GroupsGetFull', null, global);
goog.exportSymbol('proto.msg.GroupsToggleAdmins', null, global);
goog.exportSymbol('proto.msg.GroupsUpdateAdmin', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsCreate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.GroupsCreate.repeatedFields_, null);
};
goog.inherits(proto.msg.GroupsCreate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsCreate.displayName = 'proto.msg.GroupsCreate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.GroupsCreate.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsCreate.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsCreate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsCreate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsCreate.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.InputUser.toObject, includeInstance),
    title: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsCreate}
 */
proto.msg.GroupsCreate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsCreate;
  return proto.msg.GroupsCreate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsCreate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsCreate}
 */
proto.msg.GroupsCreate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsCreate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsCreate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsCreate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsCreate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * repeated InputUser Users = 1;
 * @return {!Array.<!proto.msg.InputUser>}
 */
proto.msg.GroupsCreate.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 1));
};


/** @param {!Array.<!proto.msg.InputUser>} value */
proto.msg.GroupsCreate.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.GroupsCreate.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.InputUser, opt_index);
};


proto.msg.GroupsCreate.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * required string Title = 2;
 * @return {string}
 */
proto.msg.GroupsCreate.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.GroupsCreate.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.GroupsCreate.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsCreate.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsAddUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsAddUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsAddUser.displayName = 'proto.msg.GroupsAddUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsAddUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsAddUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsAddUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsAddUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    user: (f = msg.getUser()) && core_types_pb.InputUser.toObject(includeInstance, f),
    forwardlimit: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsAddUser}
 */
proto.msg.GroupsAddUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsAddUser;
  return proto.msg.GroupsAddUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsAddUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsAddUser}
 */
proto.msg.GroupsAddUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setForwardlimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsAddUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsAddUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsAddUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsAddUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsAddUser.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsAddUser.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsAddUser.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsAddUser.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputUser User = 2;
 * @return {!proto.msg.InputUser}
 */
proto.msg.GroupsAddUser.prototype.getUser = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2, 1));
};


/** @param {!proto.msg.InputUser} value */
proto.msg.GroupsAddUser.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.GroupsAddUser.prototype.clearUser = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsAddUser.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 ForwardLimit = 3;
 * @return {number}
 */
proto.msg.GroupsAddUser.prototype.getForwardlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.GroupsAddUser.prototype.setForwardlimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.GroupsAddUser.prototype.clearForwardlimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsAddUser.prototype.hasForwardlimit = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsEditTitle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsEditTitle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsEditTitle.displayName = 'proto.msg.GroupsEditTitle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsEditTitle.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsEditTitle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsEditTitle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsEditTitle.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsEditTitle}
 */
proto.msg.GroupsEditTitle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsEditTitle;
  return proto.msg.GroupsEditTitle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsEditTitle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsEditTitle}
 */
proto.msg.GroupsEditTitle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsEditTitle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsEditTitle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsEditTitle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsEditTitle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsEditTitle.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsEditTitle.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsEditTitle.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsEditTitle.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Title = 2;
 * @return {string}
 */
proto.msg.GroupsEditTitle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.GroupsEditTitle.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.GroupsEditTitle.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsEditTitle.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsDeleteUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsDeleteUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsDeleteUser.displayName = 'proto.msg.GroupsDeleteUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsDeleteUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsDeleteUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsDeleteUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsDeleteUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    user: (f = msg.getUser()) && core_types_pb.InputUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsDeleteUser}
 */
proto.msg.GroupsDeleteUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsDeleteUser;
  return proto.msg.GroupsDeleteUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsDeleteUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsDeleteUser}
 */
proto.msg.GroupsDeleteUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsDeleteUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsDeleteUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsDeleteUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsDeleteUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsDeleteUser.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsDeleteUser.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsDeleteUser.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsDeleteUser.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputUser User = 2;
 * @return {!proto.msg.InputUser}
 */
proto.msg.GroupsDeleteUser.prototype.getUser = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2, 1));
};


/** @param {!proto.msg.InputUser} value */
proto.msg.GroupsDeleteUser.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.GroupsDeleteUser.prototype.clearUser = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsDeleteUser.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsGetFull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsGetFull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsGetFull.displayName = 'proto.msg.GroupsGetFull';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsGetFull.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsGetFull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsGetFull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsGetFull.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsGetFull}
 */
proto.msg.GroupsGetFull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsGetFull;
  return proto.msg.GroupsGetFull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsGetFull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsGetFull}
 */
proto.msg.GroupsGetFull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsGetFull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsGetFull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsGetFull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsGetFull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsGetFull.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsGetFull.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsGetFull.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsGetFull.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsToggleAdmins = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsToggleAdmins, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsToggleAdmins.displayName = 'proto.msg.GroupsToggleAdmins';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsToggleAdmins.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsToggleAdmins.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsToggleAdmins} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsToggleAdmins.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    adminenabled: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsToggleAdmins}
 */
proto.msg.GroupsToggleAdmins.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsToggleAdmins;
  return proto.msg.GroupsToggleAdmins.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsToggleAdmins} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsToggleAdmins}
 */
proto.msg.GroupsToggleAdmins.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdminenabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsToggleAdmins.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsToggleAdmins.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsToggleAdmins} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsToggleAdmins.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsToggleAdmins.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsToggleAdmins.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsToggleAdmins.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsToggleAdmins.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool AdminEnabled = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.GroupsToggleAdmins.prototype.getAdminenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.msg.GroupsToggleAdmins.prototype.setAdminenabled = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.GroupsToggleAdmins.prototype.clearAdminenabled = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsToggleAdmins.prototype.hasAdminenabled = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupsUpdateAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupsUpdateAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupsUpdateAdmin.displayName = 'proto.msg.GroupsUpdateAdmin';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupsUpdateAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupsUpdateAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupsUpdateAdmin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsUpdateAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    user: (f = msg.getUser()) && core_types_pb.InputUser.toObject(includeInstance, f),
    admin: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupsUpdateAdmin}
 */
proto.msg.GroupsUpdateAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupsUpdateAdmin;
  return proto.msg.GroupsUpdateAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupsUpdateAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupsUpdateAdmin}
 */
proto.msg.GroupsUpdateAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupsUpdateAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupsUpdateAdmin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupsUpdateAdmin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupsUpdateAdmin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupsUpdateAdmin.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupsUpdateAdmin.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupsUpdateAdmin.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsUpdateAdmin.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputUser User = 2;
 * @return {!proto.msg.InputUser}
 */
proto.msg.GroupsUpdateAdmin.prototype.getUser = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2, 1));
};


/** @param {!proto.msg.InputUser} value */
proto.msg.GroupsUpdateAdmin.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.GroupsUpdateAdmin.prototype.clearUser = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsUpdateAdmin.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Admin = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.GroupsUpdateAdmin.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.msg.GroupsUpdateAdmin.prototype.setAdmin = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.GroupsUpdateAdmin.prototype.clearAdmin = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupsUpdateAdmin.prototype.hasAdmin = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupUploadPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupUploadPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupUploadPhoto.displayName = 'proto.msg.GroupUploadPhoto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupUploadPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupUploadPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupUploadPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupUploadPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupid: jspb.Message.getField(msg, 1),
    file: (f = msg.getFile()) && core_types_pb.InputFile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupUploadPhoto}
 */
proto.msg.GroupUploadPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupUploadPhoto;
  return proto.msg.GroupUploadPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupUploadPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupUploadPhoto}
 */
proto.msg.GroupUploadPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupUploadPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupUploadPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupUploadPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupUploadPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.GroupUploadPhoto.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupUploadPhoto.prototype.setGroupid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupUploadPhoto.prototype.clearGroupid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupUploadPhoto.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputFile File = 2;
 * @return {!proto.msg.InputFile}
 */
proto.msg.GroupUploadPhoto.prototype.getFile = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 2, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.GroupUploadPhoto.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.GroupUploadPhoto.prototype.clearFile = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupUploadPhoto.prototype.hasFile = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.msg);

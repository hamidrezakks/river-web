/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.exportSymbol('proto.msg.InputMediaContact', null, global);
goog.exportSymbol('proto.msg.InputMediaDocument', null, global);
goog.exportSymbol('proto.msg.InputMediaPhoto', null, global);
goog.exportSymbol('proto.msg.InputMediaUploadedDocument', null, global);
goog.exportSymbol('proto.msg.InputMediaUploadedPhoto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputMediaUploadedPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.InputMediaUploadedPhoto.repeatedFields_, null);
};
goog.inherits(proto.msg.InputMediaUploadedPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputMediaUploadedPhoto.displayName = 'proto.msg.InputMediaUploadedPhoto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.InputMediaUploadedPhoto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputMediaUploadedPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputMediaUploadedPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputMediaUploadedPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaUploadedPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    caption: jspb.Message.getField(msg, 1),
    stickersList: jspb.Message.toObjectList(msg.getStickersList(),
    core_types_pb.InputDocument.toObject, includeInstance),
    file: (f = msg.getFile()) && core_types_pb.InputFile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputMediaUploadedPhoto}
 */
proto.msg.InputMediaUploadedPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputMediaUploadedPhoto;
  return proto.msg.InputMediaUploadedPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputMediaUploadedPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputMediaUploadedPhoto}
 */
proto.msg.InputMediaUploadedPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 2:
      var value = new core_types_pb.InputDocument;
      reader.readMessage(value,core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.addStickers(value);
      break;
    case 3:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputMediaUploadedPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputMediaUploadedPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputMediaUploadedPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaUploadedPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStickersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
};


/**
 * required string Caption = 1;
 * @return {string}
 */
proto.msg.InputMediaUploadedPhoto.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.InputMediaUploadedPhoto.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputMediaUploadedPhoto.prototype.clearCaption = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedPhoto.prototype.hasCaption = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated InputDocument Stickers = 2;
 * @return {!Array.<!proto.msg.InputDocument>}
 */
proto.msg.InputMediaUploadedPhoto.prototype.getStickersList = function() {
  return /** @type{!Array.<!proto.msg.InputDocument>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputDocument, 2));
};


/** @param {!Array.<!proto.msg.InputDocument>} value */
proto.msg.InputMediaUploadedPhoto.prototype.setStickersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.InputDocument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputMediaUploadedPhoto.prototype.addStickers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.InputDocument, opt_index);
};


proto.msg.InputMediaUploadedPhoto.prototype.clearStickersList = function() {
  this.setStickersList([]);
};


/**
 * required InputFile File = 3;
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputMediaUploadedPhoto.prototype.getFile = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 3, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.InputMediaUploadedPhoto.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.msg.InputMediaUploadedPhoto.prototype.clearFile = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedPhoto.prototype.hasFile = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputMediaPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputMediaPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputMediaPhoto.displayName = 'proto.msg.InputMediaPhoto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputMediaPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputMediaPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputMediaPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    caption: jspb.Message.getField(msg, 1),
    photo: (f = msg.getPhoto()) && core_types_pb.InputDocument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputMediaPhoto}
 */
proto.msg.InputMediaPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputMediaPhoto;
  return proto.msg.InputMediaPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputMediaPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputMediaPhoto}
 */
proto.msg.InputMediaPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 2:
      var value = new core_types_pb.InputDocument;
      reader.readMessage(value,core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputMediaPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputMediaPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputMediaPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
};


/**
 * required string Caption = 1;
 * @return {string}
 */
proto.msg.InputMediaPhoto.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.InputMediaPhoto.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputMediaPhoto.prototype.clearCaption = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaPhoto.prototype.hasCaption = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputDocument Photo = 2;
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputMediaPhoto.prototype.getPhoto = function() {
  return /** @type{!proto.msg.InputDocument} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputDocument, 2, 1));
};


/** @param {!proto.msg.InputDocument} value */
proto.msg.InputMediaPhoto.prototype.setPhoto = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.InputMediaPhoto.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputMediaContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputMediaContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputMediaContact.displayName = 'proto.msg.InputMediaContact';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputMediaContact.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputMediaContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputMediaContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getField(msg, 1),
    firstname: jspb.Message.getField(msg, 2),
    lastname: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputMediaContact}
 */
proto.msg.InputMediaContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputMediaContact;
  return proto.msg.InputMediaContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputMediaContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputMediaContact}
 */
proto.msg.InputMediaContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputMediaContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputMediaContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputMediaContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string Phone = 1;
 * @return {string}
 */
proto.msg.InputMediaContact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.InputMediaContact.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputMediaContact.prototype.clearPhone = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaContact.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.InputMediaContact.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.InputMediaContact.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InputMediaContact.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaContact.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.InputMediaContact.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.InputMediaContact.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InputMediaContact.prototype.clearLastname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaContact.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputMediaUploadedDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.InputMediaUploadedDocument.repeatedFields_, null);
};
goog.inherits(proto.msg.InputMediaUploadedDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputMediaUploadedDocument.displayName = 'proto.msg.InputMediaUploadedDocument';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.InputMediaUploadedDocument.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputMediaUploadedDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputMediaUploadedDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputMediaUploadedDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaUploadedDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && core_types_pb.InputFile.toObject(includeInstance, f),
    thumbnail: (f = msg.getThumbnail()) && core_types_pb.InputFile.toObject(includeInstance, f),
    mimetype: jspb.Message.getField(msg, 3),
    caption: jspb.Message.getField(msg, 4),
    stickersList: jspb.Message.toObjectList(msg.getStickersList(),
    core_types_pb.InputDocument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputMediaUploadedDocument}
 */
proto.msg.InputMediaUploadedDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputMediaUploadedDocument;
  return proto.msg.InputMediaUploadedDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputMediaUploadedDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputMediaUploadedDocument}
 */
proto.msg.InputMediaUploadedDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setThumbnail(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMimetype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 5:
      var value = new core_types_pb.InputDocument;
      reader.readMessage(value,core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.addStickers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputMediaUploadedDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputMediaUploadedDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputMediaUploadedDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaUploadedDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
  f = message.getThumbnail();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getStickersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
};


/**
 * required InputFile File = 1;
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputMediaUploadedDocument.prototype.getFile = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 1, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.InputMediaUploadedDocument.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.InputMediaUploadedDocument.prototype.clearFile = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedDocument.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputFile Thumbnail = 2;
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputMediaUploadedDocument.prototype.getThumbnail = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 2, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.InputMediaUploadedDocument.prototype.setThumbnail = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.InputMediaUploadedDocument.prototype.clearThumbnail = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedDocument.prototype.hasThumbnail = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string MimeType = 3;
 * @return {string}
 */
proto.msg.InputMediaUploadedDocument.prototype.getMimetype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.InputMediaUploadedDocument.prototype.setMimetype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InputMediaUploadedDocument.prototype.clearMimetype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedDocument.prototype.hasMimetype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string Caption = 4;
 * @return {string}
 */
proto.msg.InputMediaUploadedDocument.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.InputMediaUploadedDocument.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.InputMediaUploadedDocument.prototype.clearCaption = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaUploadedDocument.prototype.hasCaption = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated InputDocument Stickers = 5;
 * @return {!Array.<!proto.msg.InputDocument>}
 */
proto.msg.InputMediaUploadedDocument.prototype.getStickersList = function() {
  return /** @type{!Array.<!proto.msg.InputDocument>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputDocument, 5));
};


/** @param {!Array.<!proto.msg.InputDocument>} value */
proto.msg.InputMediaUploadedDocument.prototype.setStickersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.InputDocument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputMediaUploadedDocument.prototype.addStickers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.InputDocument, opt_index);
};


proto.msg.InputMediaUploadedDocument.prototype.clearStickersList = function() {
  this.setStickersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputMediaDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputMediaDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputMediaDocument.displayName = 'proto.msg.InputMediaDocument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputMediaDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputMediaDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputMediaDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    caption: jspb.Message.getField(msg, 1),
    document: (f = msg.getDocument()) && core_types_pb.InputDocument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputMediaDocument}
 */
proto.msg.InputMediaDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputMediaDocument;
  return proto.msg.InputMediaDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputMediaDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputMediaDocument}
 */
proto.msg.InputMediaDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaption(value);
      break;
    case 2:
      var value = new core_types_pb.InputDocument;
      reader.readMessage(value,core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.setDocument(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputMediaDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputMediaDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputMediaDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputMediaDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocument();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
};


/**
 * required string Caption = 1;
 * @return {string}
 */
proto.msg.InputMediaDocument.prototype.getCaption = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.InputMediaDocument.prototype.setCaption = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputMediaDocument.prototype.clearCaption = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaDocument.prototype.hasCaption = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputDocument Document = 2;
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputMediaDocument.prototype.getDocument = function() {
  return /** @type{!proto.msg.InputDocument} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputDocument, 2, 1));
};


/** @param {!proto.msg.InputDocument} value */
proto.msg.InputMediaDocument.prototype.setDocument = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.InputMediaDocument.prototype.clearDocument = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputMediaDocument.prototype.hasDocument = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.msg);

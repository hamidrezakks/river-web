/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_messages_pb = require('./core.messages_pb.js');
var core_types_pb = require('./core.types_pb.js');
goog.exportSymbol('proto.msg.UpdateDifference', null, global);
goog.exportSymbol('proto.msg.UpdateGetDifference', null, global);
goog.exportSymbol('proto.msg.UpdateGetState', null, global);
goog.exportSymbol('proto.msg.UpdateMessageEdited', null, global);
goog.exportSymbol('proto.msg.UpdateMessageID', null, global);
goog.exportSymbol('proto.msg.UpdateMessagesDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateNewMessage', null, global);
goog.exportSymbol('proto.msg.UpdateNotifySettings', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryInbox', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryOutbox', null, global);
goog.exportSymbol('proto.msg.UpdateState', null, global);
goog.exportSymbol('proto.msg.UpdateUserStatus', null, global);
goog.exportSymbol('proto.msg.UpdateUserTyping', null, global);
goog.exportSymbol('proto.msg.UpdateUsername', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateGetState.displayName = 'proto.msg.UpdateGetState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetState;
  return proto.msg.UpdateGetState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateGetDifference.displayName = 'proto.msg.UpdateGetDifference';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getField(msg, 1),
    limit: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetDifference;
  return proto.msg.UpdateGetDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int64 From = 1;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.UpdateGetDifference.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateGetDifference.prototype.clearFrom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateGetDifference.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Limit = 2;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateGetDifference.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateGetDifference.prototype.clearLimit = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateGetDifference.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateDifference.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateDifference.displayName = 'proto.msg.UpdateDifference';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateDifference.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    more: jspb.Message.getField(msg, 1),
    maxupdateid: jspb.Message.getField(msg, 2),
    minupdateid: jspb.Message.getField(msg, 3),
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    core_messages_pb.UpdateEnvelope.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    core_types_pb.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDifference;
  return proto.msg.UpdateDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupdateid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinupdateid(value);
      break;
    case 4:
      var value = new core_messages_pb.UpdateEnvelope;
      reader.readMessage(value,core_messages_pb.UpdateEnvelope.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 5:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 6:
      var value = new core_types_pb.Group;
      reader.readMessage(value,core_types_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      core_messages_pb.UpdateEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      core_types_pb.Group.serializeBinaryToWriter
    );
  }
};


/**
 * required bool More = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.msg.UpdateDifference.prototype.setMore = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateDifference.prototype.clearMore = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateDifference.prototype.hasMore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxUpdateID = 2;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMaxupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateDifference.prototype.setMaxupdateid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateDifference.prototype.clearMaxupdateid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateDifference.prototype.hasMaxupdateid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 MinUpdateID = 3;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMinupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.UpdateDifference.prototype.setMinupdateid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.UpdateDifference.prototype.clearMinupdateid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateDifference.prototype.hasMinupdateid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated UpdateEnvelope Updates = 4;
 * @return {!Array.<!proto.msg.UpdateEnvelope>}
 */
proto.msg.UpdateDifference.prototype.getUpdatesList = function() {
  return /** @type{!Array.<!proto.msg.UpdateEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_messages_pb.UpdateEnvelope, 4));
};


/** @param {!Array.<!proto.msg.UpdateEnvelope>} value */
proto.msg.UpdateDifference.prototype.setUpdatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.UpdateEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateDifference.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.UpdateEnvelope, opt_index);
};


proto.msg.UpdateDifference.prototype.clearUpdatesList = function() {
  this.setUpdatesList([]);
};


/**
 * repeated User Users = 5;
 * @return {!Array.<!proto.msg.User>}
 */
proto.msg.UpdateDifference.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 5));
};


/** @param {!Array.<!proto.msg.User>} value */
proto.msg.UpdateDifference.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.UpdateDifference.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.User, opt_index);
};


proto.msg.UpdateDifference.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated Group Groups = 6;
 * @return {!Array.<!proto.msg.Group>}
 */
proto.msg.UpdateDifference.prototype.getGroupsList = function() {
  return /** @type{!Array.<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Group, 6));
};


/** @param {!Array.<!proto.msg.Group>} value */
proto.msg.UpdateDifference.prototype.setGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.UpdateDifference.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.Group, opt_index);
};


proto.msg.UpdateDifference.prototype.clearGroupsList = function() {
  this.setGroupsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateState.displayName = 'proto.msg.UpdateState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateState;
  return proto.msg.UpdateState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * required int64 UpdateID = 1;
 * @return {number}
 */
proto.msg.UpdateState.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.UpdateState.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateState.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateState.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateMessageID.displayName = 'proto.msg.UpdateMessageID';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageID.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    messageid: jspb.Message.getField(msg, 1),
    randomid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageID;
  return proto.msg.UpdateMessageID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateMessageID.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateMessageID.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageID.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 MessageID = 1;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.UpdateMessageID.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateMessageID.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageID.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 RandomID = 2;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateMessageID.prototype.setRandomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateMessageID.prototype.clearRandomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageID.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNewMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNewMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateNewMessage.displayName = 'proto.msg.UpdateNewMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNewMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNewMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNewMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    message: (f = msg.getMessage()) && core_types_pb.UserMessage.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && core_types_pb.User.toObject(includeInstance, f),
    accesshash: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNewMessage;
  return proto.msg.UpdateNewMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNewMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNewMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNewMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNewMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateNewMessage.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateNewMessage.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateNewMessage.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateNewMessage.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required UserMessage Message = 1;
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UpdateNewMessage.prototype.getMessage = function() {
  return /** @type{!proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, core_types_pb.UserMessage, 1, 1));
};


/** @param {!proto.msg.UserMessage} value */
proto.msg.UpdateNewMessage.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.UpdateNewMessage.prototype.clearMessage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required User Sender = 2;
 * @return {!proto.msg.User}
 */
proto.msg.UpdateNewMessage.prototype.getSender = function() {
  return /** @type{!proto.msg.User} */ (
    jspb.Message.getWrapperField(this, core_types_pb.User, 2, 1));
};


/** @param {!proto.msg.User} value */
proto.msg.UpdateNewMessage.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.UpdateNewMessage.prototype.clearSender = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasSender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.UpdateNewMessage.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.msg.UpdateNewMessage.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.UpdateNewMessage.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageEdited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageEdited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateMessageEdited.displayName = 'proto.msg.UpdateMessageEdited';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageEdited.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageEdited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageEdited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    message: (f = msg.getMessage()) && core_types_pb.UserMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageEdited;
  return proto.msg.UpdateMessageEdited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageEdited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageEdited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageEdited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageEdited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateMessageEdited.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateMessageEdited.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateMessageEdited.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateMessageEdited.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required UserMessage Message = 1;
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UpdateMessageEdited.prototype.getMessage = function() {
  return /** @type{!proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, core_types_pb.UserMessage, 1, 1));
};


/** @param {!proto.msg.UserMessage} value */
proto.msg.UpdateMessageEdited.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.UpdateMessageEdited.prototype.clearMessage = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessagesDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateMessagesDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateMessagesDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateMessagesDeleted.displayName = 'proto.msg.UpdateMessagesDeleted';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateMessagesDeleted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessagesDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessagesDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessagesDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    messageidsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessagesDeleted;
  return proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessagesDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessagesDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessagesDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      1,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateMessagesDeleted.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateMessagesDeleted.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateMessagesDeleted.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateMessagesDeleted.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated int64 MessageIDs = 1;
 * @return {!Array.<number>}
 */
proto.msg.UpdateMessagesDeleted.prototype.getMessageidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.msg.UpdateMessagesDeleted.prototype.setMessageidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.UpdateMessagesDeleted.prototype.addMessageids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.msg.UpdateMessagesDeleted.prototype.clearMessageidsList = function() {
  this.setMessageidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryInbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryInbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateReadHistoryInbox.displayName = 'proto.msg.UpdateReadHistoryInbox';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryInbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryInbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    maxid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryInbox;
  return proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryInbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryInbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryInbox.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateReadHistoryInbox.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryInbox.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateReadHistoryInbox.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1, 1));
};


/** @param {!proto.msg.Peer} value */
proto.msg.UpdateReadHistoryInbox.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.UpdateReadHistoryInbox.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryInbox.prototype.setMaxid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateReadHistoryInbox.prototype.clearMaxid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryOutbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryOutbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateReadHistoryOutbox.displayName = 'proto.msg.UpdateReadHistoryOutbox';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryOutbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    peer: (f = msg.getPeer()) && core_types_pb.Peer.toObject(includeInstance, f),
    maxid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryOutbox;
  return proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new core_types_pb.Peer;
      reader.readMessage(value,core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryOutbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryOutbox.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateReadHistoryOutbox.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryOutbox.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateReadHistoryOutbox.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.Peer, 1, 1));
};


/** @param {!proto.msg.Peer} value */
proto.msg.UpdateReadHistoryOutbox.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.UpdateReadHistoryOutbox.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateReadHistoryOutbox.prototype.setMaxid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateReadHistoryOutbox.prototype.clearMaxid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateUserTyping.displayName = 'proto.msg.UpdateUserTyping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    userid: jspb.Message.getField(msg, 1),
    action: jspb.Message.getField(msg, 2),
    peerid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserTyping;
  return proto.msg.UpdateUserTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {!proto.msg.TypingAction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserTyping.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateUserTyping.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateUserTyping.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.UpdateUserTyping.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateUserTyping.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TypingAction Action = 2;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.UpdateUserTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.msg.TypingAction} value */
proto.msg.UpdateUserTyping.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateUserTyping.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 PeerID = 3;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.msg.UpdateUserTyping.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.UpdateUserTyping.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateUserStatus.displayName = 'proto.msg.UpdateUserStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    userid: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserStatus;
  return proto.msg.UpdateUserStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateUserStatus.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateUserStatus.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserStatus.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.UpdateUserStatus.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateUserStatus.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Status = 2;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.UpdateUserStatus.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateUserStatus.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateUsername.displayName = 'proto.msg.UpdateUsername';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    userid: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    firstname: jspb.Message.getField(msg, 3),
    lastname: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUsername;
  return proto.msg.UpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateUsername.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateUsername.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateUsername.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateUsername.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.UpdateUsername.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateUsername.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Username = 2;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.UpdateUsername.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UpdateUsername.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string FirstName = 3;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.UpdateUsername.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.UpdateUsername.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string LastName = 4;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.UpdateUsername.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.UpdateUsername.prototype.clearLastname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateUsername.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UpdateNotifySettings.displayName = 'proto.msg.UpdateNotifySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: jspb.Message.getField(msg, 100),
    updateid: jspb.Message.getField(msg, 101),
    userid: jspb.Message.getField(msg, 1),
    notifypeer: (f = msg.getNotifypeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNotifySettings;
  return proto.msg.UpdateNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setNotifypeer(value);
      break;
    case 3:
      var value = new core_types_pb.PeerNotifySettings;
      reader.readMessage(value,core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNotifypeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/** @param {number} value */
proto.msg.UpdateNotifySettings.prototype.setUcount = function(value) {
  jspb.Message.setField(this, 100, value);
};


proto.msg.UpdateNotifySettings.prototype.clearUcount = function() {
  jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/** @param {number} value */
proto.msg.UpdateNotifySettings.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 101, value);
};


proto.msg.UpdateNotifySettings.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateNotifySettings.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.UpdateNotifySettings.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UpdateNotifySettings.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputPeer NotifyPeer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.UpdateNotifySettings.prototype.getNotifypeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.UpdateNotifySettings.prototype.setNotifypeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.UpdateNotifySettings.prototype.clearNotifypeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasNotifypeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required PeerNotifySettings Settings = 3;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.UpdateNotifySettings.prototype.getSettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, core_types_pb.PeerNotifySettings, 3, 1));
};


/** @param {!proto.msg.PeerNotifySettings} value */
proto.msg.UpdateNotifySettings.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.msg.UpdateNotifySettings.prototype.clearSettings = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.msg);

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.exportSymbol('proto.msg.MessagesDialogs', null, global);
goog.exportSymbol('proto.msg.MessagesEdit', null, global);
goog.exportSymbol('proto.msg.MessagesGet', null, global);
goog.exportSymbol('proto.msg.MessagesGetDialog', null, global);
goog.exportSymbol('proto.msg.MessagesGetDialogs', null, global);
goog.exportSymbol('proto.msg.MessagesGetHistory', null, global);
goog.exportSymbol('proto.msg.MessagesMany', null, global);
goog.exportSymbol('proto.msg.MessagesReadHistory', null, global);
goog.exportSymbol('proto.msg.MessagesSend', null, global);
goog.exportSymbol('proto.msg.MessagesSendMedia', null, global);
goog.exportSymbol('proto.msg.MessagesSent', null, global);
goog.exportSymbol('proto.msg.MessagesSetTyping', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesSend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesSend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesSend.displayName = 'proto.msg.MessagesSend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesSend.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesSend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesSend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSend.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getField(msg, 1),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    body: jspb.Message.getField(msg, 5),
    replyto: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesSend}
 */
proto.msg.MessagesSend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesSend;
  return proto.msg.MessagesSend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesSend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesSend}
 */
proto.msg.MessagesSend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setReplyto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesSend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesSend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesSend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64String(
      6,
      f
    );
  }
};


/**
 * required int64 RandomID = 1;
 * @return {number}
 */
proto.msg.MessagesSend.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.MessagesSend.prototype.setRandomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.MessagesSend.prototype.clearRandomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSend.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesSend.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesSend.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.MessagesSend.prototype.clearPeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSend.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string Body = 5;
 * @return {string}
 */
proto.msg.MessagesSend.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.msg.MessagesSend.prototype.setBody = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.MessagesSend.prototype.clearBody = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSend.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 ReplyTo = 6;
 * @return {string}
 */
proto.msg.MessagesSend.prototype.getReplyto = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.msg.MessagesSend.prototype.setReplyto = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.MessagesSend.prototype.clearReplyto = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSend.prototype.hasReplyto = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesEdit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesEdit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesEdit.displayName = 'proto.msg.MessagesEdit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesEdit.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesEdit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesEdit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesEdit.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getField(msg, 1),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    body: jspb.Message.getField(msg, 3),
    messageid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesEdit}
 */
proto.msg.MessagesEdit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesEdit;
  return proto.msg.MessagesEdit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesEdit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesEdit}
 */
proto.msg.MessagesEdit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesEdit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesEdit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesEdit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesEdit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int64 RandomID = 1;
 * @return {number}
 */
proto.msg.MessagesEdit.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.MessagesEdit.prototype.setRandomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.MessagesEdit.prototype.clearRandomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesEdit.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesEdit.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesEdit.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.MessagesEdit.prototype.clearPeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesEdit.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string Body = 3;
 * @return {string}
 */
proto.msg.MessagesEdit.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.MessagesEdit.prototype.setBody = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessagesEdit.prototype.clearBody = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesEdit.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 MessageID = 4;
 * @return {number}
 */
proto.msg.MessagesEdit.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.MessagesEdit.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.MessagesEdit.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesEdit.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesSendMedia = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesSendMedia, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesSendMedia.displayName = 'proto.msg.MessagesSendMedia';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesSendMedia.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesSendMedia.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesSendMedia} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSendMedia.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: jspb.Message.getField(msg, 1),
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    file: (f = msg.getFile()) && core_types_pb.InputFile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesSendMedia}
 */
proto.msg.MessagesSendMedia.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesSendMedia;
  return proto.msg.MessagesSendMedia.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesSendMedia} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesSendMedia}
 */
proto.msg.MessagesSendMedia.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = new core_types_pb.InputFile;
      reader.readMessage(value,core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesSendMedia.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesSendMedia.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesSendMedia} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSendMedia.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 RandomID = 1;
 * @return {number}
 */
proto.msg.MessagesSendMedia.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.MessagesSendMedia.prototype.setRandomid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.MessagesSendMedia.prototype.clearRandomid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSendMedia.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesSendMedia.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesSendMedia.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.MessagesSendMedia.prototype.clearPeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSendMedia.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required InputFile File = 3;
 * @return {!proto.msg.InputFile}
 */
proto.msg.MessagesSendMedia.prototype.getFile = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputFile, 3, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.MessagesSendMedia.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.msg.MessagesSendMedia.prototype.clearFile = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSendMedia.prototype.hasFile = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesReadHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesReadHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesReadHistory.displayName = 'proto.msg.MessagesReadHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesReadHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesReadHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesReadHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesReadHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    maxid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesReadHistory}
 */
proto.msg.MessagesReadHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesReadHistory;
  return proto.msg.MessagesReadHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesReadHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesReadHistory}
 */
proto.msg.MessagesReadHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesReadHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesReadHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesReadHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesReadHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesReadHistory.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesReadHistory.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.MessagesReadHistory.prototype.clearPeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesReadHistory.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 MaxID = 3;
 * @return {number}
 */
proto.msg.MessagesReadHistory.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.MessagesReadHistory.prototype.setMaxid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessagesReadHistory.prototype.clearMaxid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesReadHistory.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.MessagesGet.repeatedFields_, null);
};
goog.inherits(proto.msg.MessagesGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesGet.displayName = 'proto.msg.MessagesGet';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.MessagesGet.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesGet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGet.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    messagesidsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesGet}
 */
proto.msg.MessagesGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesGet;
  return proto.msg.MessagesGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesGet}
 */
proto.msg.MessagesGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessagesids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getMessagesidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      2,
      f
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesGet.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesGet.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.MessagesGet.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGet.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 MessagesIDs = 2;
 * @return {!Array.<number>}
 */
proto.msg.MessagesGet.prototype.getMessagesidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.msg.MessagesGet.prototype.setMessagesidsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.MessagesGet.prototype.addMessagesids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.msg.MessagesGet.prototype.clearMessagesidsList = function() {
  this.setMessagesidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesGetHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesGetHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesGetHistory.displayName = 'proto.msg.MessagesGetHistory';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesGetHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesGetHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesGetHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    limit: jspb.Message.getField(msg, 3),
    maxid: jspb.Message.getField(msg, 4),
    minid: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesGetHistory}
 */
proto.msg.MessagesGetHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesGetHistory;
  return proto.msg.MessagesGetHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesGetHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesGetHistory}
 */
proto.msg.MessagesGetHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesGetHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesGetHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesGetHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesGetHistory.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesGetHistory.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.MessagesGetHistory.prototype.clearPeer = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetHistory.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Limit = 3;
 * @return {number}
 */
proto.msg.MessagesGetHistory.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.MessagesGetHistory.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessagesGetHistory.prototype.clearLimit = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetHistory.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 MaxID = 4;
 * @return {number}
 */
proto.msg.MessagesGetHistory.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.MessagesGetHistory.prototype.setMaxid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.MessagesGetHistory.prototype.clearMaxid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetHistory.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 MinID = 5;
 * @return {number}
 */
proto.msg.MessagesGetHistory.prototype.getMinid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.MessagesGetHistory.prototype.setMinid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.MessagesGetHistory.prototype.clearMinid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetHistory.prototype.hasMinid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesGetDialogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesGetDialogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesGetDialogs.displayName = 'proto.msg.MessagesGetDialogs';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesGetDialogs.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesGetDialogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesGetDialogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetDialogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getField(msg, 2),
    offset: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesGetDialogs}
 */
proto.msg.MessagesGetDialogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesGetDialogs;
  return proto.msg.MessagesGetDialogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesGetDialogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesGetDialogs}
 */
proto.msg.MessagesGetDialogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesGetDialogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesGetDialogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesGetDialogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetDialogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 Limit = 2;
 * @return {number}
 */
proto.msg.MessagesGetDialogs.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.MessagesGetDialogs.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.MessagesGetDialogs.prototype.clearLimit = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetDialogs.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Offset = 3;
 * @return {number}
 */
proto.msg.MessagesGetDialogs.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.MessagesGetDialogs.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessagesGetDialogs.prototype.clearOffset = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetDialogs.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesGetDialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesGetDialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesGetDialog.displayName = 'proto.msg.MessagesGetDialog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesGetDialog.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesGetDialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesGetDialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetDialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesGetDialog}
 */
proto.msg.MessagesGetDialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesGetDialog;
  return proto.msg.MessagesGetDialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesGetDialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesGetDialog}
 */
proto.msg.MessagesGetDialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesGetDialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesGetDialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesGetDialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesGetDialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesGetDialog.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesGetDialog.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.MessagesGetDialog.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesGetDialog.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesDialogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.MessagesDialogs.repeatedFields_, null);
};
goog.inherits(proto.msg.MessagesDialogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesDialogs.displayName = 'proto.msg.MessagesDialogs';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.MessagesDialogs.repeatedFields_ = [1,2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesDialogs.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesDialogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesDialogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesDialogs.toObject = function(includeInstance, msg) {
  var f, obj = {
    dialogsList: jspb.Message.toObjectList(msg.getDialogsList(),
    core_types_pb.Dialog.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    core_types_pb.UserMessage.toObject, includeInstance),
    count: jspb.Message.getField(msg, 4),
    updateid: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesDialogs}
 */
proto.msg.MessagesDialogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesDialogs;
  return proto.msg.MessagesDialogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesDialogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesDialogs}
 */
proto.msg.MessagesDialogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.Dialog;
      reader.readMessage(value,core_types_pb.Dialog.deserializeBinaryFromReader);
      msg.addDialogs(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 3:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesDialogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesDialogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesDialogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesDialogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDialogsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.Dialog.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * repeated Dialog Dialogs = 1;
 * @return {!Array.<!proto.msg.Dialog>}
 */
proto.msg.MessagesDialogs.prototype.getDialogsList = function() {
  return /** @type{!Array.<!proto.msg.Dialog>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.Dialog, 1));
};


/** @param {!Array.<!proto.msg.Dialog>} value */
proto.msg.MessagesDialogs.prototype.setDialogsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Dialog=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Dialog}
 */
proto.msg.MessagesDialogs.prototype.addDialogs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Dialog, opt_index);
};


proto.msg.MessagesDialogs.prototype.clearDialogsList = function() {
  this.setDialogsList([]);
};


/**
 * repeated User Users = 2;
 * @return {!Array.<!proto.msg.User>}
 */
proto.msg.MessagesDialogs.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 2));
};


/** @param {!Array.<!proto.msg.User>} value */
proto.msg.MessagesDialogs.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.MessagesDialogs.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.User, opt_index);
};


proto.msg.MessagesDialogs.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated UserMessage Messages = 3;
 * @return {!Array.<!proto.msg.UserMessage>}
 */
proto.msg.MessagesDialogs.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.msg.UserMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.UserMessage, 3));
};


/** @param {!Array.<!proto.msg.UserMessage>} value */
proto.msg.MessagesDialogs.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.UserMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UserMessage}
 */
proto.msg.MessagesDialogs.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.UserMessage, opt_index);
};


proto.msg.MessagesDialogs.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * required int32 Count = 4;
 * @return {number}
 */
proto.msg.MessagesDialogs.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.MessagesDialogs.prototype.setCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.MessagesDialogs.prototype.clearCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesDialogs.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 UpdateID = 5;
 * @return {number}
 */
proto.msg.MessagesDialogs.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.MessagesDialogs.prototype.setUpdateid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.MessagesDialogs.prototype.clearUpdateid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesDialogs.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesSetTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesSetTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesSetTyping.displayName = 'proto.msg.MessagesSetTyping';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesSetTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesSetTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesSetTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSetTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    action: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesSetTyping}
 */
proto.msg.MessagesSetTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesSetTyping;
  return proto.msg.MessagesSetTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesSetTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesSetTyping}
 */
proto.msg.MessagesSetTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesSetTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesSetTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesSetTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSetTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.msg.TypingAction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.MessagesSetTyping.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.MessagesSetTyping.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.MessagesSetTyping.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSetTyping.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TypingAction Action = 2;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.MessagesSetTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.msg.TypingAction} value */
proto.msg.MessagesSetTyping.prototype.setAction = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.MessagesSetTyping.prototype.clearAction = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSetTyping.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesSent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessagesSent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesSent.displayName = 'proto.msg.MessagesSent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesSent.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesSent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesSent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSent.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: jspb.Message.getField(msg, 1),
    randomid: jspb.Message.getField(msg, 2),
    createdon: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesSent}
 */
proto.msg.MessagesSent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesSent;
  return proto.msg.MessagesSent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesSent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesSent}
 */
proto.msg.MessagesSent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesSent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesSent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesSent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesSent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * required int64 MessageID = 1;
 * @return {number}
 */
proto.msg.MessagesSent.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.MessagesSent.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.MessagesSent.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSent.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 RandomID = 2;
 * @return {number}
 */
proto.msg.MessagesSent.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.MessagesSent.prototype.setRandomid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.MessagesSent.prototype.clearRandomid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSent.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 CreatedOn = 3;
 * @return {number}
 */
proto.msg.MessagesSent.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.MessagesSent.prototype.setCreatedon = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessagesSent.prototype.clearCreatedon = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessagesSent.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessagesMany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.MessagesMany.repeatedFields_, null);
};
goog.inherits(proto.msg.MessagesMany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessagesMany.displayName = 'proto.msg.MessagesMany';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.MessagesMany.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessagesMany.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessagesMany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessagesMany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesMany.toObject = function(includeInstance, msg) {
  var f, obj = {
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    core_types_pb.UserMessage.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    core_types_pb.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessagesMany}
 */
proto.msg.MessagesMany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessagesMany;
  return proto.msg.MessagesMany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessagesMany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessagesMany}
 */
proto.msg.MessagesMany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.UserMessage;
      reader.readMessage(value,core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 2:
      var value = new core_types_pb.User;
      reader.readMessage(value,core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessagesMany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessagesMany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessagesMany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessagesMany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      core_types_pb.User.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UserMessage Messages = 1;
 * @return {!Array.<!proto.msg.UserMessage>}
 */
proto.msg.MessagesMany.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.msg.UserMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.UserMessage, 1));
};


/** @param {!Array.<!proto.msg.UserMessage>} value */
proto.msg.MessagesMany.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.UserMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UserMessage}
 */
proto.msg.MessagesMany.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.UserMessage, opt_index);
};


proto.msg.MessagesMany.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * repeated User Users = 2;
 * @return {!Array.<!proto.msg.User>}
 */
proto.msg.MessagesMany.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.User, 2));
};


/** @param {!Array.<!proto.msg.User>} value */
proto.msg.MessagesMany.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.MessagesMany.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.User, opt_index);
};


proto.msg.MessagesMany.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


goog.object.extend(exports, proto.msg);

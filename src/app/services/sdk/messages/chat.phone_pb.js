/* eslint-disable */
// source: chat.phone.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.object.extend(proto, core_types_pb);
goog.exportSymbol('proto.msg.DiscardReason', null, global);
goog.exportSymbol('proto.msg.IceServer', null, global);
goog.exportSymbol('proto.msg.PhoneAcceptCall', null, global);
goog.exportSymbol('proto.msg.PhoneActionAccepted', null, global);
goog.exportSymbol('proto.msg.PhoneActionCallEmpty', null, global);
goog.exportSymbol('proto.msg.PhoneActionCallWaiting', null, global);
goog.exportSymbol('proto.msg.PhoneActionDiscarded', null, global);
goog.exportSymbol('proto.msg.PhoneActionIceExchange', null, global);
goog.exportSymbol('proto.msg.PhoneActionRequested', null, global);
goog.exportSymbol('proto.msg.PhoneCall', null, global);
goog.exportSymbol('proto.msg.PhoneCallAction', null, global);
goog.exportSymbol('proto.msg.PhoneDiscardCall', null, global);
goog.exportSymbol('proto.msg.PhoneInit', null, global);
goog.exportSymbol('proto.msg.PhoneInitCall', null, global);
goog.exportSymbol('proto.msg.PhoneParticipant', null, global);
goog.exportSymbol('proto.msg.PhoneParticipantSDP', null, global);
goog.exportSymbol('proto.msg.PhoneRateCall', null, global);
goog.exportSymbol('proto.msg.PhoneRequestCall', null, global);
goog.exportSymbol('proto.msg.PhoneUpdateCall', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneInitCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneInitCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneInitCall.displayName = 'proto.msg.PhoneInitCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRequestCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneRequestCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneRequestCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRequestCall.displayName = 'proto.msg.PhoneRequestCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneAcceptCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneAcceptCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneAcceptCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneAcceptCall.displayName = 'proto.msg.PhoneAcceptCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneDiscardCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneDiscardCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneDiscardCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneDiscardCall.displayName = 'proto.msg.PhoneDiscardCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneUpdateCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneUpdateCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneUpdateCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneUpdateCall.displayName = 'proto.msg.PhoneUpdateCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRateCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneRateCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRateCall.displayName = 'proto.msg.PhoneRateCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneCall.displayName = 'proto.msg.PhoneCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneInit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneInit.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneInit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneInit.displayName = 'proto.msg.PhoneInit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.IceServer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.IceServer.repeatedFields_, null);
};
goog.inherits(proto.msg.IceServer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.IceServer.displayName = 'proto.msg.IceServer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneParticipant.displayName = 'proto.msg.PhoneParticipant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneParticipantSDP = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneParticipantSDP, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneParticipantSDP.displayName = 'proto.msg.PhoneParticipantSDP';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionCallEmpty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionCallEmpty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionCallEmpty.displayName = 'proto.msg.PhoneActionCallEmpty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionAccepted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionAccepted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionAccepted.displayName = 'proto.msg.PhoneActionAccepted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionRequested = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneActionRequested.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneActionRequested, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionRequested.displayName = 'proto.msg.PhoneActionRequested';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionCallWaiting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionCallWaiting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionCallWaiting.displayName = 'proto.msg.PhoneActionCallWaiting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionDiscarded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionDiscarded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionDiscarded.displayName = 'proto.msg.PhoneActionDiscarded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneActionIceExchange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneActionIceExchange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneActionIceExchange.displayName = 'proto.msg.PhoneActionIceExchange';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneInitCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneInitCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneInitCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInitCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneInitCall}
 */
proto.msg.PhoneInitCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneInitCall;
  return proto.msg.PhoneInitCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneInitCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneInitCall}
 */
proto.msg.PhoneInitCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneInitCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneInitCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneInitCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInitCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneInitCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneInitCall} returns this
*/
proto.msg.PhoneInitCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneInitCall} returns this
 */
proto.msg.PhoneInitCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneInitCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneRequestCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRequestCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRequestCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRequestCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    randomid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipantSDP.toObject, includeInstance),
    callid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRequestCall;
  return proto.msg.PhoneRequestCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRequestCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    case 2:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = new proto.msg.PhoneParticipantSDP;
      reader.readMessage(value,proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRequestCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRequestCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRequestCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.PhoneParticipantSDP.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64String(
      4,
      f
    );
  }
};


/**
 * required int64 RandomID = 1;
 * @return {number}
 */
proto.msg.PhoneRequestCall.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setRandomid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearRandomid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputPeer Peer = 2;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneRequestCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 2, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneRequestCall} returns this
*/
proto.msg.PhoneRequestCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PhoneParticipantSDP Participants = 3;
 * @return {!Array<!proto.msg.PhoneParticipantSDP>}
 */
proto.msg.PhoneRequestCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipantSDP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipantSDP, 3));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipantSDP>} value
 * @return {!proto.msg.PhoneRequestCall} returns this
*/
proto.msg.PhoneRequestCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PhoneParticipantSDP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneRequestCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PhoneParticipantSDP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional int64 CallID = 4;
 * @return {string}
 */
proto.msg.PhoneRequestCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setCallid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearCallid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasCallid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneAcceptCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneAcceptCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneAcceptCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneAcceptCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipantSDP.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneAcceptCall;
  return proto.msg.PhoneAcceptCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneAcceptCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new proto.msg.PhoneParticipantSDP;
      reader.readMessage(value,proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneAcceptCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneAcceptCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneAcceptCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.PhoneParticipantSDP.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneAcceptCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
*/
proto.msg.PhoneAcceptCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAcceptCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneAcceptCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.setCallid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearCallid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAcceptCall.prototype.hasCallid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PhoneParticipantSDP Participants = 3;
 * @return {!Array<!proto.msg.PhoneParticipantSDP>}
 */
proto.msg.PhoneAcceptCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipantSDP>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipantSDP, 3));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipantSDP>} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
*/
proto.msg.PhoneAcceptCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PhoneParticipantSDP=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneAcceptCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PhoneParticipantSDP, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneDiscardCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneDiscardCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneDiscardCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneDiscardCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    core_types_pb.InputUser.toObject, includeInstance),
    duration: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneDiscardCall;
  return proto.msg.PhoneDiscardCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneDiscardCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 5:
      var value = /** @type {!proto.msg.DiscardReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneDiscardCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneDiscardCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneDiscardCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneDiscardCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
*/
proto.msg.PhoneDiscardCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneDiscardCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setCallid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearCallid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasCallid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated InputUser Participants = 3;
 * @return {!Array<!proto.msg.InputUser>}
 */
proto.msg.PhoneDiscardCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {!Array<!proto.msg.InputUser>} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
*/
proto.msg.PhoneDiscardCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneDiscardCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.InputUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * required int32 Duration = 4;
 * @return {number}
 */
proto.msg.PhoneDiscardCall.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required DiscardReason Reason = 5;
 * @return {!proto.msg.DiscardReason}
 */
proto.msg.PhoneDiscardCall.prototype.getReason = function() {
  return /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.msg.DiscardReason} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearReason = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasReason = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneUpdateCall.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneUpdateCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneUpdateCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneUpdateCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    core_types_pb.InputUser.toObject, includeInstance),
    action: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    actiondata: msg.getActiondata_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneUpdateCall}
 */
proto.msg.PhoneUpdateCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneUpdateCall;
  return proto.msg.PhoneUpdateCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneUpdateCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneUpdateCall}
 */
proto.msg.PhoneUpdateCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 7:
      var value = /** @type {!proto.msg.PhoneCallAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setActiondata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneUpdateCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneUpdateCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneUpdateCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneUpdateCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.msg.PhoneCallAction} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneUpdateCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
*/
proto.msg.PhoneUpdateCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneUpdateCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setCallid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearCallid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateCall.prototype.hasCallid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated InputUser Participants = 3;
 * @return {!Array<!proto.msg.InputUser>}
 */
proto.msg.PhoneUpdateCall.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.InputUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputUser, 3));
};


/**
 * @param {!Array<!proto.msg.InputUser>} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
*/
proto.msg.PhoneUpdateCall.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.InputUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneUpdateCall.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.InputUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * required PhoneCallAction Action = 7;
 * @return {!proto.msg.PhoneCallAction}
 */
proto.msg.PhoneUpdateCall.prototype.getAction = function() {
  return /** @type {!proto.msg.PhoneCallAction} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.msg.PhoneCallAction} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearAction = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateCall.prototype.hasAction = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required bytes ActionData = 8;
 * @return {!(string|Uint8Array)}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * required bytes ActionData = 8;
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {string}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getActiondata()));
};


/**
 * required bytes ActionData = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getActiondata()`
 * @return {!Uint8Array}
 */
proto.msg.PhoneUpdateCall.prototype.getActiondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getActiondata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.setActiondata = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneUpdateCall} returns this
 */
proto.msg.PhoneUpdateCall.prototype.clearActiondata = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneUpdateCall.prototype.hasActiondata = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRateCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRateCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRateCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRateCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    callid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    rate: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    comment: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRateCall}
 */
proto.msg.PhoneRateCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRateCall;
  return proto.msg.PhoneRateCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRateCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRateCall}
 */
proto.msg.PhoneRateCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCallid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRateCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRateCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRateCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRateCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.PhoneRateCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/**
 * @param {!proto.msg.InputPeer} value
 * @return {!proto.msg.PhoneRateCall} returns this
*/
proto.msg.PhoneRateCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRateCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 CallID = 2;
 * @return {string}
 */
proto.msg.PhoneRateCall.prototype.getCallid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setCallid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.clearCallid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRateCall.prototype.hasCallid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Rate = 3;
 * @return {number}
 */
proto.msg.PhoneRateCall.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.clearRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRateCall.prototype.hasRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Comment = 4;
 * @return {string}
 */
proto.msg.PhoneRateCall.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRateCall} returns this
 */
proto.msg.PhoneRateCall.prototype.clearComment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRateCall.prototype.hasComment = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    date: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneCall;
  return proto.msg.PhoneCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.PhoneCall.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 Date = 2;
 * @return {number}
 */
proto.msg.PhoneCall.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setDate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearDate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasDate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneInit.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneInit.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneInit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneInit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInit.toObject = function(includeInstance, msg) {
  var f, obj = {
    iceserversList: jspb.Message.toObjectList(msg.getIceserversList(),
    proto.msg.IceServer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneInit}
 */
proto.msg.PhoneInit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneInit;
  return proto.msg.PhoneInit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneInit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneInit}
 */
proto.msg.PhoneInit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.IceServer;
      reader.readMessage(value,proto.msg.IceServer.deserializeBinaryFromReader);
      msg.addIceservers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneInit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneInit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneInit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneInit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIceserversList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.IceServer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IceServer IceServers = 1;
 * @return {!Array<!proto.msg.IceServer>}
 */
proto.msg.PhoneInit.prototype.getIceserversList = function() {
  return /** @type{!Array<!proto.msg.IceServer>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.IceServer, 1));
};


/**
 * @param {!Array<!proto.msg.IceServer>} value
 * @return {!proto.msg.PhoneInit} returns this
*/
proto.msg.PhoneInit.prototype.setIceserversList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.IceServer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.IceServer}
 */
proto.msg.PhoneInit.prototype.addIceservers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.IceServer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneInit} returns this
 */
proto.msg.PhoneInit.prototype.clearIceserversList = function() {
  return this.setIceserversList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.IceServer.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.IceServer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.IceServer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.IceServer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.IceServer.toObject = function(includeInstance, msg) {
  var f, obj = {
    urlsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    credential: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.IceServer}
 */
proto.msg.IceServer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.IceServer;
  return proto.msg.IceServer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.IceServer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.IceServer}
 */
proto.msg.IceServer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addUrls(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCredential(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.IceServer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.IceServer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.IceServer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.IceServer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * repeated string Urls = 1;
 * @return {!Array<string>}
 */
proto.msg.IceServer.prototype.getUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setUrlsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.addUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.clearUrlsList = function() {
  return this.setUrlsList([]);
};


/**
 * optional string Username = 2;
 * @return {string}
 */
proto.msg.IceServer.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.IceServer.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Credential = 3;
 * @return {string}
 */
proto.msg.IceServer.prototype.getCredential = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.setCredential = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.IceServer} returns this
 */
proto.msg.IceServer.prototype.clearCredential = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.IceServer.prototype.hasCredential = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && core_types_pb.InputUser.toObject(includeInstance, f),
    initiator: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    admin: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneParticipant;
  return proto.msg.PhoneParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitiator(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required int32 ConnectionId = 1;
 * @return {number}
 */
proto.msg.PhoneParticipant.prototype.getConnectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setConnectionid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.clearConnectionid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.hasConnectionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputUser Peer = 2;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneParticipant.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneParticipant} returns this
*/
proto.msg.PhoneParticipant.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Initiator = 3;
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.getInitiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setInitiator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.clearInitiator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.hasInitiator = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool Admin = 4;
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.getAdmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.setAdmin = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipant} returns this
 */
proto.msg.PhoneParticipant.prototype.clearAdmin = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipant.prototype.hasAdmin = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneParticipantSDP.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneParticipantSDP.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneParticipantSDP} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipantSDP.toObject = function(includeInstance, msg) {
  var f, obj = {
    connectionid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && core_types_pb.InputUser.toObject(includeInstance, f),
    sdp: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneParticipantSDP.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneParticipantSDP;
  return proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneParticipantSDP} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneParticipantSDP}
 */
proto.msg.PhoneParticipantSDP.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setConnectionid(value);
      break;
    case 2:
      var value = new core_types_pb.InputUser;
      reader.readMessage(value,core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneParticipantSDP.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneParticipantSDP.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneParticipantSDP} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneParticipantSDP.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 ConnectionId = 1;
 * @return {number}
 */
proto.msg.PhoneParticipantSDP.prototype.getConnectionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setConnectionid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.clearConnectionid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipantSDP.prototype.hasConnectionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required InputUser Peer = 2;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneParticipantSDP.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputUser, 2, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
*/
proto.msg.PhoneParticipantSDP.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipantSDP.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string SDP = 3;
 * @return {string}
 */
proto.msg.PhoneParticipantSDP.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setSdp = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.clearSdp = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipantSDP.prototype.hasSdp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string Type = 4;
 * @return {string}
 */
proto.msg.PhoneParticipantSDP.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.setType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneParticipantSDP} returns this
 */
proto.msg.PhoneParticipantSDP.prototype.clearType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneParticipantSDP.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionCallEmpty.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionCallEmpty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionCallEmpty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallEmpty.toObject = function(includeInstance, msg) {
  var f, obj = {
    empty: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionCallEmpty}
 */
proto.msg.PhoneActionCallEmpty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionCallEmpty;
  return proto.msg.PhoneActionCallEmpty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionCallEmpty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionCallEmpty}
 */
proto.msg.PhoneActionCallEmpty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionCallEmpty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionCallEmpty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionCallEmpty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallEmpty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Empty = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionCallEmpty.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionCallEmpty} returns this
 */
proto.msg.PhoneActionCallEmpty.prototype.setEmpty = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionCallEmpty} returns this
 */
proto.msg.PhoneActionCallEmpty.prototype.clearEmpty = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionCallEmpty.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionAccepted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionAccepted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionAccepted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAccepted.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionAccepted}
 */
proto.msg.PhoneActionAccepted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionAccepted;
  return proto.msg.PhoneActionAccepted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionAccepted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionAccepted}
 */
proto.msg.PhoneActionAccepted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionAccepted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionAccepted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionAccepted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionAccepted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionAccepted.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.setSdp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.clearSdp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionAccepted.prototype.hasSdp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionAccepted.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionAccepted} returns this
 */
proto.msg.PhoneActionAccepted.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionAccepted.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneActionRequested.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionRequested.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionRequested.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionRequested} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRequested.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.PhoneParticipant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionRequested}
 */
proto.msg.PhoneActionRequested.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionRequested;
  return proto.msg.PhoneActionRequested.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionRequested} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionRequested}
 */
proto.msg.PhoneActionRequested.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.msg.PhoneParticipant;
      reader.readMessage(value,proto.msg.PhoneParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionRequested.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionRequested.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionRequested} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionRequested.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.PhoneParticipant.serializeBinaryToWriter
    );
  }
};


/**
 * required string SDP = 1;
 * @return {string}
 */
proto.msg.PhoneActionRequested.prototype.getSdp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setSdp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.clearSdp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionRequested.prototype.hasSdp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Type = 2;
 * @return {string}
 */
proto.msg.PhoneActionRequested.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionRequested.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PhoneParticipant Participants = 3;
 * @return {!Array<!proto.msg.PhoneParticipant>}
 */
proto.msg.PhoneActionRequested.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.PhoneParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.PhoneParticipant, 3));
};


/**
 * @param {!Array<!proto.msg.PhoneParticipant>} value
 * @return {!proto.msg.PhoneActionRequested} returns this
*/
proto.msg.PhoneActionRequested.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PhoneParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneParticipant}
 */
proto.msg.PhoneActionRequested.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PhoneParticipant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneActionRequested} returns this
 */
proto.msg.PhoneActionRequested.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionCallWaiting.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionCallWaiting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionCallWaiting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallWaiting.toObject = function(includeInstance, msg) {
  var f, obj = {
    empty: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionCallWaiting}
 */
proto.msg.PhoneActionCallWaiting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionCallWaiting;
  return proto.msg.PhoneActionCallWaiting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionCallWaiting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionCallWaiting}
 */
proto.msg.PhoneActionCallWaiting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionCallWaiting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionCallWaiting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionCallWaiting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionCallWaiting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool Empty = 1;
 * @return {boolean}
 */
proto.msg.PhoneActionCallWaiting.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionCallWaiting} returns this
 */
proto.msg.PhoneActionCallWaiting.prototype.setEmpty = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionCallWaiting} returns this
 */
proto.msg.PhoneActionCallWaiting.prototype.clearEmpty = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionCallWaiting.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionDiscarded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionDiscarded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionDiscarded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionDiscarded.toObject = function(includeInstance, msg) {
  var f, obj = {
    duration: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    video: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionDiscarded}
 */
proto.msg.PhoneActionDiscarded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionDiscarded;
  return proto.msg.PhoneActionDiscarded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionDiscarded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionDiscarded}
 */
proto.msg.PhoneActionDiscarded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.DiscardReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionDiscarded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionDiscarded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionDiscarded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionDiscarded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * required int32 Duration = 1;
 * @return {number}
 */
proto.msg.PhoneActionDiscarded.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool Video = 2;
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setVideo = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.clearVideo = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required DiscardReason Reason = 3;
 * @return {!proto.msg.DiscardReason}
 */
proto.msg.PhoneActionDiscarded.prototype.getReason = function() {
  return /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.msg.DiscardReason} value
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionDiscarded} returns this
 */
proto.msg.PhoneActionDiscarded.prototype.clearReason = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionDiscarded.prototype.hasReason = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneActionIceExchange.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneActionIceExchange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneActionIceExchange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionIceExchange.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sdpmlineindex: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    sdpmid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    usernamefragment: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneActionIceExchange}
 */
proto.msg.PhoneActionIceExchange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneActionIceExchange;
  return proto.msg.PhoneActionIceExchange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneActionIceExchange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneActionIceExchange}
 */
proto.msg.PhoneActionIceExchange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSdpmlineindex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSdpmid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsernamefragment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneActionIceExchange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneActionIceExchange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneActionIceExchange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneActionIceExchange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string Candidate = 1;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getCandidate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setCandidate = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.clearCandidate = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionIceExchange.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 SdpMLineIndex = 2;
 * @return {number}
 */
proto.msg.PhoneActionIceExchange.prototype.getSdpmlineindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setSdpmlineindex = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.clearSdpmlineindex = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionIceExchange.prototype.hasSdpmlineindex = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string SdpMid = 3;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getSdpmid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setSdpmid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.clearSdpmid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionIceExchange.prototype.hasSdpmid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string UsernameFragment = 4;
 * @return {string}
 */
proto.msg.PhoneActionIceExchange.prototype.getUsernamefragment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.setUsernamefragment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneActionIceExchange} returns this
 */
proto.msg.PhoneActionIceExchange.prototype.clearUsernamefragment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneActionIceExchange.prototype.hasUsernamefragment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.msg.DiscardReason = {
  DISCARDREASONUNKNOWN: 0,
  DISCARDREASONMISSED: 1,
  DISCARDREASONBUSY: 2,
  DISCARDREASONHANGUP: 3,
  DISCARDREASONDISCONNECT: 4,
  DISCARDREASONRESERVED1: 5,
  DISCARDREASONRESERVED2: 6,
  DISCARDREASONRESERVED3: 7,
  DISCARDREASONRESERVED4: 8,
  DISCARDREASONRESERVED5: 9,
  DISCARDREASONRESERVED6: 10,
  DISCARDREASONRESERVED7: 11,
  DISCARDREASONRESERVED8: 12,
  DISCARDREASONRESERVED9: 13
};

/**
 * @enum {number}
 */
proto.msg.PhoneCallAction = {
  PHONECALLEMPTY: 0,
  PHONECALLACCEPTED: 1,
  PHONECALLREQUESTED: 2,
  PHONECALLCALLWAITING: 3,
  PHONECALLDISCARDED: 4,
  PHONECALLICEEXCHANGE: 5,
  PHONECALLRESERVED2: 6,
  PHONECALLRESERVED3: 7,
  PHONECALLRESERVED4: 8,
  PHONECALLRESERVED5: 9,
  PHONECALLRESERVED6: 10,
  PHONECALLRESERVED7: 11,
  PHONECALLRESERVED8: 12,
  PHONECALLRESERVED9: 13
};

goog.object.extend(exports, proto.msg);

/* eslint-disable */
// source: chat.api.phone.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chat_core_types_pb = require('./chat.core.types_pb.js');
goog.object.extend(proto, chat_core_types_pb);
goog.exportSymbol('proto.msg.DiscardReason', null, global);
goog.exportSymbol('proto.msg.PhoneAcceptCall', null, global);
goog.exportSymbol('proto.msg.PhoneCall', null, global);
goog.exportSymbol('proto.msg.PhoneCallAction', null, global);
goog.exportSymbol('proto.msg.PhoneDiscardCall', null, global);
goog.exportSymbol('proto.msg.PhoneReceivedCall', null, global);
goog.exportSymbol('proto.msg.PhoneRequestCall', null, global);
goog.exportSymbol('proto.msg.PhoneSetCallRating', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneAcceptCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneAcceptCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneAcceptCall.displayName = 'proto.msg.PhoneAcceptCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneRequestCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneRequestCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneRequestCall.displayName = 'proto.msg.PhoneRequestCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneDiscardCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneDiscardCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneDiscardCall.displayName = 'proto.msg.PhoneDiscardCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneReceivedCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneReceivedCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneReceivedCall.displayName = 'proto.msg.PhoneReceivedCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneSetCallRating = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneSetCallRating, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneSetCallRating.displayName = 'proto.msg.PhoneSetCallRating';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PhoneCall.repeatedFields_, null);
};
goog.inherits(proto.msg.PhoneCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneCall.displayName = 'proto.msg.PhoneCall';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneAcceptCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneAcceptCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneAcceptCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputUser.toObject(includeInstance, f),
    answersdp: msg.getAnswersdp_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneAcceptCall;
  return proto.msg.PhoneAcceptCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneAcceptCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneAcceptCall}
 */
proto.msg.PhoneAcceptCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputUser;
      reader.readMessage(value,chat_core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnswersdp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneAcceptCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneAcceptCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneAcceptCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneAcceptCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required InputUser Peer = 1;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneAcceptCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputUser, 1, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
*/
proto.msg.PhoneAcceptCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAcceptCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes AnswerSDP = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.PhoneAcceptCall.prototype.getAnswersdp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes AnswerSDP = 2;
 * This is a type-conversion wrapper around `getAnswersdp()`
 * @return {string}
 */
proto.msg.PhoneAcceptCall.prototype.getAnswersdp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnswersdp()));
};


/**
 * required bytes AnswerSDP = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnswersdp()`
 * @return {!Uint8Array}
 */
proto.msg.PhoneAcceptCall.prototype.getAnswersdp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnswersdp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.setAnswersdp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneAcceptCall} returns this
 */
proto.msg.PhoneAcceptCall.prototype.clearAnswersdp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneAcceptCall.prototype.hasAnswersdp = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneRequestCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneRequestCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneRequestCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputUser.toObject(includeInstance, f),
    offersdp: msg.getOffersdp_asB64(),
    video: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    randomid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneRequestCall;
  return proto.msg.PhoneRequestCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneRequestCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneRequestCall}
 */
proto.msg.PhoneRequestCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputUser;
      reader.readMessage(value,chat_core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setOffersdp(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneRequestCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneRequestCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneRequestCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneRequestCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required InputUser Peer = 1;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneRequestCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputUser, 1, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneRequestCall} returns this
*/
proto.msg.PhoneRequestCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes OfferSDP = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.PhoneRequestCall.prototype.getOffersdp = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes OfferSDP = 2;
 * This is a type-conversion wrapper around `getOffersdp()`
 * @return {string}
 */
proto.msg.PhoneRequestCall.prototype.getOffersdp_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getOffersdp()));
};


/**
 * required bytes OfferSDP = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getOffersdp()`
 * @return {!Uint8Array}
 */
proto.msg.PhoneRequestCall.prototype.getOffersdp_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getOffersdp()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setOffersdp = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearOffersdp = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasOffersdp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Video = 3;
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setVideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearVideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 RandomID = 4;
 * @return {number}
 */
proto.msg.PhoneRequestCall.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.setRandomid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneRequestCall} returns this
 */
proto.msg.PhoneRequestCall.prototype.clearRandomid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneRequestCall.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneDiscardCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneDiscardCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneDiscardCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputUser.toObject(includeInstance, f),
    duration: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    video: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneDiscardCall;
  return proto.msg.PhoneDiscardCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneDiscardCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneDiscardCall}
 */
proto.msg.PhoneDiscardCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputUser;
      reader.readMessage(value,chat_core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.DiscardReason} */ (reader.readEnum());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneDiscardCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneDiscardCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneDiscardCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneDiscardCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required InputUser Peer = 1;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneDiscardCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputUser, 1, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
*/
proto.msg.PhoneDiscardCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Duration = 2;
 * @return {number}
 */
proto.msg.PhoneDiscardCall.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setDuration = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearDuration = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Video = 3;
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setVideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearVideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required DiscardReason Reason = 4;
 * @return {!proto.msg.DiscardReason}
 */
proto.msg.PhoneDiscardCall.prototype.getReason = function() {
  return /** @type {!proto.msg.DiscardReason} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.msg.DiscardReason} value
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneDiscardCall} returns this
 */
proto.msg.PhoneDiscardCall.prototype.clearReason = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneDiscardCall.prototype.hasReason = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneReceivedCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneReceivedCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneReceivedCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneReceivedCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneReceivedCall}
 */
proto.msg.PhoneReceivedCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneReceivedCall;
  return proto.msg.PhoneReceivedCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneReceivedCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneReceivedCall}
 */
proto.msg.PhoneReceivedCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputUser;
      reader.readMessage(value,chat_core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneReceivedCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneReceivedCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneReceivedCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneReceivedCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
};


/**
 * required InputUser Peer = 1;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneReceivedCall.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputUser, 1, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneReceivedCall} returns this
*/
proto.msg.PhoneReceivedCall.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneReceivedCall} returns this
 */
proto.msg.PhoneReceivedCall.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneReceivedCall.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneSetCallRating.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneSetCallRating.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneSetCallRating} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneSetCallRating.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputUser.toObject(includeInstance, f),
    initiator: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    rate: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    comment: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneSetCallRating}
 */
proto.msg.PhoneSetCallRating.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneSetCallRating;
  return proto.msg.PhoneSetCallRating.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneSetCallRating} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneSetCallRating}
 */
proto.msg.PhoneSetCallRating.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputUser;
      reader.readMessage(value,chat_core_types_pb.InputUser.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitiator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRate(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setComment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneSetCallRating.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneSetCallRating.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneSetCallRating} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneSetCallRating.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputUser.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required InputUser Peer = 1;
 * @return {!proto.msg.InputUser}
 */
proto.msg.PhoneSetCallRating.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputUser} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputUser, 1, 1));
};


/**
 * @param {!proto.msg.InputUser} value
 * @return {!proto.msg.PhoneSetCallRating} returns this
*/
proto.msg.PhoneSetCallRating.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneSetCallRating.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool Initiator = 2;
 * @return {boolean}
 */
proto.msg.PhoneSetCallRating.prototype.getInitiator = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.setInitiator = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.clearInitiator = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneSetCallRating.prototype.hasInitiator = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Rate = 3;
 * @return {number}
 */
proto.msg.PhoneSetCallRating.prototype.getRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.setRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.clearRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneSetCallRating.prototype.hasRate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Comment = 4;
 * @return {string}
 */
proto.msg.PhoneSetCallRating.prototype.getComment = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.setComment = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneSetCallRating} returns this
 */
proto.msg.PhoneSetCallRating.prototype.clearComment = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneSetCallRating.prototype.hasComment = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PhoneCall.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneCall.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    video: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    date: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    stunserversList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneCall;
  return proto.msg.PhoneCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneCall}
 */
proto.msg.PhoneCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccesshash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVideo(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addStunservers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStunserversList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
};


/**
 * required int64 UserID = 1;
 * @return {number}
 */
proto.msg.PhoneCall.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 AccessHash = 2;
 * @return {number}
 */
proto.msg.PhoneCall.prototype.getAccesshash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Video = 3;
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.getVideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setVideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearVideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 Date = 4;
 * @return {number}
 */
proto.msg.PhoneCall.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setDate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearDate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneCall.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string StunServers = 5;
 * @return {!Array<string>}
 */
proto.msg.PhoneCall.prototype.getStunserversList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.setStunserversList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.addStunservers = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PhoneCall} returns this
 */
proto.msg.PhoneCall.prototype.clearStunserversList = function() {
  return this.setStunserversList([]);
};


/**
 * @enum {number}
 */
proto.msg.DiscardReason = {
  DISCARDREASONUNKNOWN: 0,
  DISCARDREASONMISSED: 1,
  DISCARDREASONBUSY: 2,
  DISCARDREASONHANGUP: 3,
  DISCARDREASONDISCONNECT: 4
};

/**
 * @enum {number}
 */
proto.msg.PhoneCallAction = {
  PHONECALLEMPTY: 0,
  PHONECALLACCEPTED: 1,
  PHONECALLREQUESTED: 2,
  PHONECALLCALLWAITING: 3,
  PHONECALLDISCARDED: 4
};

goog.object.extend(exports, proto.msg);

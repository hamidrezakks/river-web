/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msg.Label', null, global);
goog.exportSymbol('proto.msg.LabelsAddToDialog', null, global);
goog.exportSymbol('proto.msg.LabelsAddToMessage', null, global);
goog.exportSymbol('proto.msg.LabelsDelete', null, global);
goog.exportSymbol('proto.msg.LabelsGet', null, global);
goog.exportSymbol('proto.msg.LabelsMany', null, global);
goog.exportSymbol('proto.msg.LabelsRemoveFromDialog', null, global);
goog.exportSymbol('proto.msg.LabelsRemoveFromMessage', null, global);
goog.exportSymbol('proto.msg.LabelsSet', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsSet.displayName = 'proto.msg.LabelsSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsSet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelid: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsSet}
 */
proto.msg.LabelsSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsSet;
  return proto.msg.LabelsSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsSet}
 */
proto.msg.LabelsSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLabelid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 LabelID = 1;
 * @return {number}
 */
proto.msg.LabelsSet.prototype.getLabelid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.LabelsSet.prototype.setLabelid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.LabelsSet.prototype.clearLabelid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsSet.prototype.hasLabelid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Name = 2;
 * @return {string}
 */
proto.msg.LabelsSet.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.LabelsSet.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.LabelsSet.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsSet.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsDelete = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsDelete.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsDelete, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsDelete.displayName = 'proto.msg.LabelsDelete';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsDelete.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsDelete.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsDelete.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsDelete} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsDelete.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelidsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsDelete}
 */
proto.msg.LabelsDelete.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsDelete;
  return proto.msg.LabelsDelete.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsDelete} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsDelete}
 */
proto.msg.LabelsDelete.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsDelete.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsDelete.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsDelete} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsDelete.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 LabelIDs = 1;
 * @return {!Array.<number>}
 */
proto.msg.LabelsDelete.prototype.getLabelidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsDelete.prototype.setLabelidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsDelete.prototype.addLabelids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.msg.LabelsDelete.prototype.clearLabelidsList = function() {
  this.setLabelidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsGet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.LabelsGet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsGet.displayName = 'proto.msg.LabelsGet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsGet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsGet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsGet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsGet.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsGet}
 */
proto.msg.LabelsGet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsGet;
  return proto.msg.LabelsGet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsGet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsGet}
 */
proto.msg.LabelsGet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsGet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsGet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsGet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsGet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsAddToDialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsAddToDialog.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsAddToDialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsAddToDialog.displayName = 'proto.msg.LabelsAddToDialog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsAddToDialog.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsAddToDialog.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsAddToDialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsAddToDialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToDialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    peertype: jspb.Message.getField(msg, 1),
    peerid: jspb.Message.getField(msg, 2),
    labelidsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsAddToDialog}
 */
proto.msg.LabelsAddToDialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsAddToDialog;
  return proto.msg.LabelsAddToDialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsAddToDialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsAddToDialog}
 */
proto.msg.LabelsAddToDialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsAddToDialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsAddToDialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsAddToDialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToDialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
};


/**
 * required int32 PeerType = 1;
 * @return {number}
 */
proto.msg.LabelsAddToDialog.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.LabelsAddToDialog.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.LabelsAddToDialog.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsAddToDialog.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {number}
 */
proto.msg.LabelsAddToDialog.prototype.getPeerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.LabelsAddToDialog.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.LabelsAddToDialog.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsAddToDialog.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array.<number>}
 */
proto.msg.LabelsAddToDialog.prototype.getLabelidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsAddToDialog.prototype.setLabelidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsAddToDialog.prototype.addLabelids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.msg.LabelsAddToDialog.prototype.clearLabelidsList = function() {
  this.setLabelidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsRemoveFromDialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsRemoveFromDialog.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsRemoveFromDialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsRemoveFromDialog.displayName = 'proto.msg.LabelsRemoveFromDialog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsRemoveFromDialog.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsRemoveFromDialog.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsRemoveFromDialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsRemoveFromDialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromDialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    peertype: jspb.Message.getField(msg, 1),
    peerid: jspb.Message.getField(msg, 2),
    labelidsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsRemoveFromDialog}
 */
proto.msg.LabelsRemoveFromDialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsRemoveFromDialog;
  return proto.msg.LabelsRemoveFromDialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsRemoveFromDialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsRemoveFromDialog}
 */
proto.msg.LabelsRemoveFromDialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsRemoveFromDialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsRemoveFromDialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsRemoveFromDialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromDialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
};


/**
 * required int32 PeerType = 1;
 * @return {number}
 */
proto.msg.LabelsRemoveFromDialog.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.LabelsRemoveFromDialog.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.LabelsRemoveFromDialog.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsRemoveFromDialog.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {number}
 */
proto.msg.LabelsRemoveFromDialog.prototype.getPeerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.LabelsRemoveFromDialog.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.LabelsRemoveFromDialog.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsRemoveFromDialog.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array.<number>}
 */
proto.msg.LabelsRemoveFromDialog.prototype.getLabelidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsRemoveFromDialog.prototype.setLabelidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsRemoveFromDialog.prototype.addLabelids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.msg.LabelsRemoveFromDialog.prototype.clearLabelidsList = function() {
  this.setLabelidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsAddToMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsAddToMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsAddToMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsAddToMessage.displayName = 'proto.msg.LabelsAddToMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsAddToMessage.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsAddToMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsAddToMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsAddToMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peertype: jspb.Message.getField(msg, 1),
    peerid: jspb.Message.getField(msg, 2),
    labelidsList: jspb.Message.getRepeatedField(msg, 3),
    messageidsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsAddToMessage}
 */
proto.msg.LabelsAddToMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsAddToMessage;
  return proto.msg.LabelsAddToMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsAddToMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsAddToMessage}
 */
proto.msg.LabelsAddToMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsAddToMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsAddToMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsAddToMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsAddToMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      4,
      f
    );
  }
};


/**
 * required int32 PeerType = 1;
 * @return {number}
 */
proto.msg.LabelsAddToMessage.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.LabelsAddToMessage.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.LabelsAddToMessage.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsAddToMessage.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {number}
 */
proto.msg.LabelsAddToMessage.prototype.getPeerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.LabelsAddToMessage.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.LabelsAddToMessage.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsAddToMessage.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array.<number>}
 */
proto.msg.LabelsAddToMessage.prototype.getLabelidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsAddToMessage.prototype.setLabelidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsAddToMessage.prototype.addLabelids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.msg.LabelsAddToMessage.prototype.clearLabelidsList = function() {
  this.setLabelidsList([]);
};


/**
 * repeated int64 MessageIDs = 4;
 * @return {!Array.<number>}
 */
proto.msg.LabelsAddToMessage.prototype.getMessageidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsAddToMessage.prototype.setMessageidsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsAddToMessage.prototype.addMessageids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.msg.LabelsAddToMessage.prototype.clearMessageidsList = function() {
  this.setMessageidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsRemoveFromMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsRemoveFromMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsRemoveFromMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsRemoveFromMessage.displayName = 'proto.msg.LabelsRemoveFromMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsRemoveFromMessage.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsRemoveFromMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsRemoveFromMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsRemoveFromMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    peertype: jspb.Message.getField(msg, 1),
    peerid: jspb.Message.getField(msg, 2),
    labelidsList: jspb.Message.getRepeatedField(msg, 3),
    messageidsList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsRemoveFromMessage}
 */
proto.msg.LabelsRemoveFromMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsRemoveFromMessage;
  return proto.msg.LabelsRemoveFromMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsRemoveFromMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsRemoveFromMessage}
 */
proto.msg.LabelsRemoveFromMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsRemoveFromMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsRemoveFromMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsRemoveFromMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsRemoveFromMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      3,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      4,
      f
    );
  }
};


/**
 * required int32 PeerType = 1;
 * @return {number}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.LabelsRemoveFromMessage.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.LabelsRemoveFromMessage.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsRemoveFromMessage.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {number}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getPeerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.LabelsRemoveFromMessage.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.LabelsRemoveFromMessage.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.LabelsRemoveFromMessage.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int32 LabelIDs = 3;
 * @return {!Array.<number>}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getLabelidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsRemoveFromMessage.prototype.setLabelidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsRemoveFromMessage.prototype.addLabelids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.msg.LabelsRemoveFromMessage.prototype.clearLabelidsList = function() {
  this.setLabelidsList([]);
};


/**
 * repeated int64 MessageIDs = 4;
 * @return {!Array.<number>}
 */
proto.msg.LabelsRemoveFromMessage.prototype.getMessageidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.msg.LabelsRemoveFromMessage.prototype.setMessageidsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.LabelsRemoveFromMessage.prototype.addMessageids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.msg.LabelsRemoveFromMessage.prototype.clearMessageidsList = function() {
  this.setMessageidsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.Label.displayName = 'proto.msg.Label';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Label}
 */
proto.msg.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Label;
  return proto.msg.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Label}
 */
proto.msg.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 ID = 1;
 * @return {number}
 */
proto.msg.Label.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.Label.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.Label.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Label.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Name = 2;
 * @return {string}
 */
proto.msg.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.Label.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.Label.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Label.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsMany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsMany.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsMany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.LabelsMany.displayName = 'proto.msg.LabelsMany';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsMany.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsMany.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsMany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsMany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsMany.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.msg.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsMany}
 */
proto.msg.LabelsMany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsMany;
  return proto.msg.LabelsMany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsMany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsMany}
 */
proto.msg.LabelsMany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.Label;
      reader.readMessage(value,proto.msg.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsMany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsMany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsMany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsMany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.Label.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Label Labels = 1;
 * @return {!Array.<!proto.msg.Label>}
 */
proto.msg.LabelsMany.prototype.getLabelsList = function() {
  return /** @type{!Array.<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.Label, 1));
};


/** @param {!Array.<!proto.msg.Label>} value */
proto.msg.LabelsMany.prototype.setLabelsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.LabelsMany.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Label, opt_index);
};


proto.msg.LabelsMany.prototype.clearLabelsList = function() {
  this.setLabelsList([]);
};


goog.object.extend(exports, proto.msg);

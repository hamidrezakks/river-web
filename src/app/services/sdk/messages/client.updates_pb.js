/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chat_core_types_pb = require('./chat.core.types_pb.js');
var client_core_messages_pb = require('./client.core.messages_pb.js');
goog.exportSymbol('proto.msg.ClientUpdateMessagesDeleted', null, global);
goog.exportSymbol('proto.msg.ClientUpdatePendingMessageDelivery', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ClientUpdatePendingMessageDelivery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.ClientUpdatePendingMessageDelivery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.ClientUpdatePendingMessageDelivery.displayName = 'proto.msg.ClientUpdatePendingMessageDelivery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ClientUpdatePendingMessageDelivery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ClientUpdatePendingMessageDelivery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientUpdatePendingMessageDelivery.toObject = function(includeInstance, msg) {
  var f, obj = {
    messages: (f = msg.getMessages()) && chat_core_types_pb.UserMessage.toObject(includeInstance, f),
    pendingmessage: (f = msg.getPendingmessage()) && client_core_messages_pb.ClientPendingMessage.toObject(includeInstance, f),
    success: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ClientUpdatePendingMessageDelivery}
 */
proto.msg.ClientUpdatePendingMessageDelivery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ClientUpdatePendingMessageDelivery;
  return proto.msg.ClientUpdatePendingMessageDelivery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ClientUpdatePendingMessageDelivery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ClientUpdatePendingMessageDelivery}
 */
proto.msg.ClientUpdatePendingMessageDelivery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.UserMessage;
      reader.readMessage(value,chat_core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessages(value);
      break;
    case 2:
      var value = new client_core_messages_pb.ClientPendingMessage;
      reader.readMessage(value,client_core_messages_pb.ClientPendingMessage.deserializeBinaryFromReader);
      msg.setPendingmessage(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ClientUpdatePendingMessageDelivery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ClientUpdatePendingMessageDelivery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientUpdatePendingMessageDelivery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessages();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getPendingmessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      client_core_messages_pb.ClientPendingMessage.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required UserMessage Messages = 1;
 * @return {!proto.msg.UserMessage}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.getMessages = function() {
  return /** @type{!proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.UserMessage, 1, 1));
};


/** @param {!proto.msg.UserMessage} value */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.setMessages = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.ClientUpdatePendingMessageDelivery.prototype.clearMessages = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.hasMessages = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ClientPendingMessage PendingMessage = 2;
 * @return {!proto.msg.ClientPendingMessage}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.getPendingmessage = function() {
  return /** @type{!proto.msg.ClientPendingMessage} */ (
    jspb.Message.getWrapperField(this, client_core_messages_pb.ClientPendingMessage, 2, 1));
};


/** @param {!proto.msg.ClientPendingMessage} value */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.setPendingmessage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.ClientUpdatePendingMessageDelivery.prototype.clearPendingmessage = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.hasPendingmessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool Success = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.setSuccess = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.ClientUpdatePendingMessageDelivery.prototype.clearSuccess = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ClientUpdatePendingMessageDelivery.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ClientUpdateMessagesDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.ClientUpdateMessagesDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.ClientUpdateMessagesDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.ClientUpdateMessagesDeleted.displayName = 'proto.msg.ClientUpdateMessagesDeleted';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.ClientUpdateMessagesDeleted.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ClientUpdateMessagesDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ClientUpdateMessagesDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientUpdateMessagesDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerid: jspb.Message.getField(msg, 1),
    peertype: jspb.Message.getField(msg, 2),
    messageidsList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ClientUpdateMessagesDeleted}
 */
proto.msg.ClientUpdateMessagesDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ClientUpdateMessagesDeleted;
  return proto.msg.ClientUpdateMessagesDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ClientUpdateMessagesDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ClientUpdateMessagesDeleted}
 */
proto.msg.ClientUpdateMessagesDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPeerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ClientUpdateMessagesDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ClientUpdateMessagesDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ClientUpdateMessagesDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      3,
      f
    );
  }
};


/**
 * required int64 PeerID = 1;
 * @return {number}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.getPeerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.ClientUpdateMessagesDeleted.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.ClientUpdateMessagesDeleted.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 PeerType = 2;
 * @return {number}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.ClientUpdateMessagesDeleted.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.ClientUpdateMessagesDeleted.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated int64 MessageIDs = 3;
 * @return {!Array.<number>}
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.getMessageidsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<number>} value */
proto.msg.ClientUpdateMessagesDeleted.prototype.setMessageidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.msg.ClientUpdateMessagesDeleted.prototype.addMessageids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.msg.ClientUpdateMessagesDeleted.prototype.clearMessageidsList = function() {
  this.setMessageidsList([]);
};


goog.object.extend(exports, proto.msg);

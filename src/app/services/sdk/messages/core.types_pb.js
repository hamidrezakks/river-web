/* eslint-disable */
// source: core.types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msg.Ack', null, global);
goog.exportSymbol('proto.msg.Bool', null, global);
goog.exportSymbol('proto.msg.Bot', null, global);
goog.exportSymbol('proto.msg.BotCommands', null, global);
goog.exportSymbol('proto.msg.BotInfo', null, global);
goog.exportSymbol('proto.msg.ContactUser', null, global);
goog.exportSymbol('proto.msg.DHGroup', null, global);
goog.exportSymbol('proto.msg.Dialog', null, global);
goog.exportSymbol('proto.msg.DraftMessage', null, global);
goog.exportSymbol('proto.msg.Error', null, global);
goog.exportSymbol('proto.msg.FileLocation', null, global);
goog.exportSymbol('proto.msg.GeoLocation', null, global);
goog.exportSymbol('proto.msg.Group', null, global);
goog.exportSymbol('proto.msg.GroupFlags', null, global);
goog.exportSymbol('proto.msg.GroupFull', null, global);
goog.exportSymbol('proto.msg.GroupParticipant', null, global);
goog.exportSymbol('proto.msg.GroupPhoto', null, global);
goog.exportSymbol('proto.msg.InputDocument', null, global);
goog.exportSymbol('proto.msg.InputFile', null, global);
goog.exportSymbol('proto.msg.InputFileLocation', null, global);
goog.exportSymbol('proto.msg.InputGeoLocation', null, global);
goog.exportSymbol('proto.msg.InputMediaType', null, global);
goog.exportSymbol('proto.msg.InputPassword', null, global);
goog.exportSymbol('proto.msg.InputPeer', null, global);
goog.exportSymbol('proto.msg.InputTeam', null, global);
goog.exportSymbol('proto.msg.InputUser', null, global);
goog.exportSymbol('proto.msg.Label', null, global);
goog.exportSymbol('proto.msg.LabelsMany', null, global);
goog.exportSymbol('proto.msg.MediaType', null, global);
goog.exportSymbol('proto.msg.MessageContainer', null, global);
goog.exportSymbol('proto.msg.MessageEntity', null, global);
goog.exportSymbol('proto.msg.MessageEntityType', null, global);
goog.exportSymbol('proto.msg.MessageEnvelope', null, global);
goog.exportSymbol('proto.msg.ParticipantType', null, global);
goog.exportSymbol('proto.msg.Peer', null, global);
goog.exportSymbol('proto.msg.PeerNotifySettings', null, global);
goog.exportSymbol('proto.msg.PeerType', null, global);
goog.exportSymbol('proto.msg.PhoneContact', null, global);
goog.exportSymbol('proto.msg.Ping', null, global);
goog.exportSymbol('proto.msg.Pong', null, global);
goog.exportSymbol('proto.msg.PrivacyKey', null, global);
goog.exportSymbol('proto.msg.PrivacyRule', null, global);
goog.exportSymbol('proto.msg.PrivacyType', null, global);
goog.exportSymbol('proto.msg.ProtoEncryptedPayload', null, global);
goog.exportSymbol('proto.msg.ProtoMessage', null, global);
goog.exportSymbol('proto.msg.PushTokenProvider', null, global);
goog.exportSymbol('proto.msg.RSAPublicKey', null, global);
goog.exportSymbol('proto.msg.Team', null, global);
goog.exportSymbol('proto.msg.TypingAction', null, global);
goog.exportSymbol('proto.msg.UpdateContainer', null, global);
goog.exportSymbol('proto.msg.UpdateEnvelope', null, global);
goog.exportSymbol('proto.msg.User', null, global);
goog.exportSymbol('proto.msg.UserMessage', null, global);
goog.exportSymbol('proto.msg.UserPhoto', null, global);
goog.exportSymbol('proto.msg.UserStatus', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Ping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Ping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Ping.displayName = 'proto.msg.Ping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Pong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Pong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Pong.displayName = 'proto.msg.Pong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessageEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessageEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.MessageEnvelope.displayName = 'proto.msg.MessageEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessageContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.MessageContainer.repeatedFields_, null);
};
goog.inherits(proto.msg.MessageContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.MessageContainer.displayName = 'proto.msg.MessageContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateEnvelope.displayName = 'proto.msg.UpdateEnvelope';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateContainer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateContainer.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateContainer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateContainer.displayName = 'proto.msg.UpdateContainer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ProtoMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.ProtoMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.ProtoMessage.displayName = 'proto.msg.ProtoMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ProtoEncryptedPayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.ProtoEncryptedPayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.ProtoEncryptedPayload.displayName = 'proto.msg.ProtoEncryptedPayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Error = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Error, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Error.displayName = 'proto.msg.Error';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Ack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.Ack.repeatedFields_, null);
};
goog.inherits(proto.msg.Ack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Ack.displayName = 'proto.msg.Ack';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Bool = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Bool, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Bool.displayName = 'proto.msg.Bool';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Dialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Dialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Dialog.displayName = 'proto.msg.Dialog';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputPeer.displayName = 'proto.msg.InputPeer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Peer.displayName = 'proto.msg.Peer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputPassword = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputPassword, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputPassword.displayName = 'proto.msg.InputPassword';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputFileLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputFileLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputFileLocation.displayName = 'proto.msg.InputFileLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.FileLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.FileLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.FileLocation.displayName = 'proto.msg.FileLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UserPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UserPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UserPhoto.displayName = 'proto.msg.UserPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputUser.displayName = 'proto.msg.InputUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.User.repeatedFields_, null);
};
goog.inherits(proto.msg.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.User.displayName = 'proto.msg.User';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ContactUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.ContactUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.ContactUser.displayName = 'proto.msg.ContactUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Bot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Bot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Bot.displayName = 'proto.msg.Bot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.BotCommands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.BotCommands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.BotCommands.displayName = 'proto.msg.BotCommands';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.BotInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.BotInfo.repeatedFields_, null);
};
goog.inherits(proto.msg.BotInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.BotInfo.displayName = 'proto.msg.BotInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.GroupPhoto.displayName = 'proto.msg.GroupPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.Group.repeatedFields_, null);
};
goog.inherits(proto.msg.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Group.displayName = 'proto.msg.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupFull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.GroupFull.repeatedFields_, null);
};
goog.inherits(proto.msg.GroupFull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.GroupFull.displayName = 'proto.msg.GroupFull';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.GroupParticipant.displayName = 'proto.msg.GroupParticipant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UserMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UserMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.UserMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UserMessage.displayName = 'proto.msg.UserMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.DraftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.DraftMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.DraftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.DraftMessage.displayName = 'proto.msg.DraftMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessageEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessageEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.MessageEntity.displayName = 'proto.msg.MessageEntity';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.RSAPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.RSAPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.RSAPublicKey.displayName = 'proto.msg.RSAPublicKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.DHGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.DHGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.DHGroup.displayName = 'proto.msg.DHGroup';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PhoneContact.displayName = 'proto.msg.PhoneContact';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PeerNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PeerNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PeerNotifySettings.displayName = 'proto.msg.PeerNotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputFile.displayName = 'proto.msg.InputFile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputDocument.displayName = 'proto.msg.InputDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PrivacyRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.PrivacyRule.repeatedFields_, null);
};
goog.inherits(proto.msg.PrivacyRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.PrivacyRule.displayName = 'proto.msg.PrivacyRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Label = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Label, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Label.displayName = 'proto.msg.Label';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.LabelsMany = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.LabelsMany.repeatedFields_, null);
};
goog.inherits(proto.msg.LabelsMany, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.LabelsMany.displayName = 'proto.msg.LabelsMany';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputGeoLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputGeoLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputGeoLocation.displayName = 'proto.msg.InputGeoLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GeoLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GeoLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.GeoLocation.displayName = 'proto.msg.GeoLocation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputTeam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputTeam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.InputTeam.displayName = 'proto.msg.InputTeam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Team = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Team, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.Team.displayName = 'proto.msg.Team';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Ping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Ping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Ping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Ping.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Ping}
 */
proto.msg.Ping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Ping;
  return proto.msg.Ping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Ping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Ping}
 */
proto.msg.Ping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Ping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Ping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Ping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Ping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {number}
 */
proto.msg.Ping.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Ping} returns this
 */
proto.msg.Ping.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Ping} returns this
 */
proto.msg.Ping.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Ping.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Pong.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Pong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Pong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Pong.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Pong}
 */
proto.msg.Pong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Pong;
  return proto.msg.Pong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Pong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Pong}
 */
proto.msg.Pong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Pong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Pong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Pong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Pong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 ID = 2;
 * @return {number}
 */
proto.msg.Pong.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Pong} returns this
 */
proto.msg.Pong.prototype.setId = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Pong} returns this
 */
proto.msg.Pong.prototype.clearId = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Pong.prototype.hasId = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessageEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessageEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessageEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    constructor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    requestid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    message: msg.getMessage_asB64(),
    team: (f = msg.getTeam()) && proto.msg.InputTeam.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessageEnvelope}
 */
proto.msg.MessageEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessageEnvelope;
  return proto.msg.MessageEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessageEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessageEnvelope}
 */
proto.msg.MessageEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstructor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setRequestid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessage(value);
      break;
    case 5:
      var value = new proto.msg.InputTeam;
      reader.readMessage(value,proto.msg.InputTeam.deserializeBinaryFromReader);
      msg.setTeam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessageEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessageEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessageEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getTeam();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.msg.InputTeam.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 Constructor = 1;
 * @return {number}
 */
proto.msg.MessageEnvelope.prototype.getConstructor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.setConstructor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.clearConstructor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEnvelope.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 RequestID = 2;
 * @return {number}
 */
proto.msg.MessageEnvelope.prototype.getRequestid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.setRequestid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.clearRequestid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEnvelope.prototype.hasRequestid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes Message = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.MessageEnvelope.prototype.getMessage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * required bytes Message = 4;
 * This is a type-conversion wrapper around `getMessage()`
 * @return {string}
 */
proto.msg.MessageEnvelope.prototype.getMessage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessage()));
};


/**
 * required bytes Message = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessage()`
 * @return {!Uint8Array}
 */
proto.msg.MessageEnvelope.prototype.getMessage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.setMessage = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEnvelope.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional InputTeam Team = 5;
 * @return {?proto.msg.InputTeam}
 */
proto.msg.MessageEnvelope.prototype.getTeam = function() {
  return /** @type{?proto.msg.InputTeam} */ (
    jspb.Message.getWrapperField(this, proto.msg.InputTeam, 5));
};


/**
 * @param {?proto.msg.InputTeam|undefined} value
 * @return {!proto.msg.MessageEnvelope} returns this
*/
proto.msg.MessageEnvelope.prototype.setTeam = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.MessageEnvelope} returns this
 */
proto.msg.MessageEnvelope.prototype.clearTeam = function() {
  return this.setTeam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEnvelope.prototype.hasTeam = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.MessageContainer.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessageContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessageContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessageContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    envelopesList: jspb.Message.toObjectList(msg.getEnvelopesList(),
    proto.msg.MessageEnvelope.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessageContainer}
 */
proto.msg.MessageContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessageContainer;
  return proto.msg.MessageContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessageContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessageContainer}
 */
proto.msg.MessageContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = new proto.msg.MessageEnvelope;
      reader.readMessage(value,proto.msg.MessageEnvelope.deserializeBinaryFromReader);
      msg.addEnvelopes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessageContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessageContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessageContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnvelopesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msg.MessageEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 Length = 1;
 * @return {number}
 */
proto.msg.MessageContainer.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.MessageContainer} returns this
 */
proto.msg.MessageContainer.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageContainer} returns this
 */
proto.msg.MessageContainer.prototype.clearLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageContainer.prototype.hasLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated MessageEnvelope Envelopes = 2;
 * @return {!Array<!proto.msg.MessageEnvelope>}
 */
proto.msg.MessageContainer.prototype.getEnvelopesList = function() {
  return /** @type{!Array<!proto.msg.MessageEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.MessageEnvelope, 2));
};


/**
 * @param {!Array<!proto.msg.MessageEnvelope>} value
 * @return {!proto.msg.MessageContainer} returns this
*/
proto.msg.MessageContainer.prototype.setEnvelopesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.MessageEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEnvelope}
 */
proto.msg.MessageContainer.prototype.addEnvelopes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.MessageEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.MessageContainer} returns this
 */
proto.msg.MessageContainer.prototype.clearEnvelopesList = function() {
  return this.setEnvelopesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    constructor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    update: msg.getUpdate_asB64(),
    ucount: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateEnvelope;
  return proto.msg.UpdateEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setConstructor(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setUpdate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required int64 Constructor = 1;
 * @return {number}
 */
proto.msg.UpdateEnvelope.prototype.getConstructor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.setConstructor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.clearConstructor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateEnvelope.prototype.hasConstructor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes Update = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UpdateEnvelope.prototype.getUpdate = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes Update = 2;
 * This is a type-conversion wrapper around `getUpdate()`
 * @return {string}
 */
proto.msg.UpdateEnvelope.prototype.getUpdate_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getUpdate()));
};


/**
 * required bytes Update = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUpdate()`
 * @return {!Uint8Array}
 */
proto.msg.UpdateEnvelope.prototype.getUpdate_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getUpdate()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.setUpdate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.clearUpdate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateEnvelope.prototype.hasUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 UCount = 3;
 * @return {number}
 */
proto.msg.UpdateEnvelope.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateEnvelope.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 UpdateID = 4;
 * @return {number}
 */
proto.msg.UpdateEnvelope.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateEnvelope.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 Timestamp = 5;
 * @return {number}
 */
proto.msg.UpdateEnvelope.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateEnvelope} returns this
 */
proto.msg.UpdateEnvelope.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateEnvelope.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateContainer.repeatedFields_ = [2,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateContainer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateContainer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateContainer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateContainer.toObject = function(includeInstance, msg) {
  var f, obj = {
    length: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    proto.msg.UpdateEnvelope.toObject, includeInstance),
    minupdateid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    maxupdateid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.msg.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    proto.msg.Group.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateContainer}
 */
proto.msg.UpdateContainer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateContainer;
  return proto.msg.UpdateContainer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateContainer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateContainer}
 */
proto.msg.UpdateContainer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 2:
      var value = new proto.msg.UpdateEnvelope;
      reader.readMessage(value,proto.msg.UpdateEnvelope.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinupdateid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupdateid(value);
      break;
    case 5:
      var value = new proto.msg.User;
      reader.readMessage(value,proto.msg.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 6:
      var value = new proto.msg.Group;
      reader.readMessage(value,proto.msg.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateContainer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateContainer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateContainer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateContainer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msg.UpdateEnvelope.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.msg.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.msg.Group.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 Length = 1;
 * @return {number}
 */
proto.msg.UpdateContainer.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearLength = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateContainer.prototype.hasLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated UpdateEnvelope Updates = 2;
 * @return {!Array<!proto.msg.UpdateEnvelope>}
 */
proto.msg.UpdateContainer.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.msg.UpdateEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.UpdateEnvelope, 2));
};


/**
 * @param {!Array<!proto.msg.UpdateEnvelope>} value
 * @return {!proto.msg.UpdateContainer} returns this
*/
proto.msg.UpdateContainer.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.UpdateEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateContainer.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.UpdateEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};


/**
 * required int64 MinUpdateID = 3;
 * @return {number}
 */
proto.msg.UpdateContainer.prototype.getMinupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.setMinupdateid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearMinupdateid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateContainer.prototype.hasMinupdateid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 MaxUpdateID = 4;
 * @return {number}
 */
proto.msg.UpdateContainer.prototype.getMaxupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.setMaxupdateid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearMaxupdateid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateContainer.prototype.hasMaxupdateid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated User Users = 5;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.UpdateContainer.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.User, 5));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.UpdateContainer} returns this
*/
proto.msg.UpdateContainer.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.UpdateContainer.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Group Groups = 6;
 * @return {!Array<!proto.msg.Group>}
 */
proto.msg.UpdateContainer.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.Group, 6));
};


/**
 * @param {!Array<!proto.msg.Group>} value
 * @return {!proto.msg.UpdateContainer} returns this
*/
proto.msg.UpdateContainer.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.UpdateContainer.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateContainer} returns this
 */
proto.msg.UpdateContainer.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ProtoMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ProtoMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ProtoMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ProtoMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    messagekey: msg.getMessagekey_asB64(),
    payload: msg.getPayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ProtoMessage}
 */
proto.msg.ProtoMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ProtoMessage;
  return proto.msg.ProtoMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ProtoMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ProtoMessage}
 */
proto.msg.ProtoMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuthid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessagekey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ProtoMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ProtoMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ProtoMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ProtoMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional int64 AuthID = 1;
 * @return {number}
 */
proto.msg.ProtoMessage.prototype.getAuthid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.setAuthid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.clearAuthid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoMessage.prototype.hasAuthid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes MessageKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.ProtoMessage.prototype.getMessagekey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes MessageKey = 2;
 * This is a type-conversion wrapper around `getMessagekey()`
 * @return {string}
 */
proto.msg.ProtoMessage.prototype.getMessagekey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessagekey()));
};


/**
 * optional bytes MessageKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessagekey()`
 * @return {!Uint8Array}
 */
proto.msg.ProtoMessage.prototype.getMessagekey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessagekey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.setMessagekey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.clearMessagekey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoMessage.prototype.hasMessagekey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes Payload = 3;
 * @return {!(string|Uint8Array)}
 */
proto.msg.ProtoMessage.prototype.getPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes Payload = 3;
 * This is a type-conversion wrapper around `getPayload()`
 * @return {string}
 */
proto.msg.ProtoMessage.prototype.getPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayload()));
};


/**
 * required bytes Payload = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayload()`
 * @return {!Uint8Array}
 */
proto.msg.ProtoMessage.prototype.getPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayload()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.setPayload = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoMessage} returns this
 */
proto.msg.ProtoMessage.prototype.clearPayload = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoMessage.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ProtoEncryptedPayload.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ProtoEncryptedPayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ProtoEncryptedPayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ProtoEncryptedPayload.toObject = function(includeInstance, msg) {
  var f, obj = {
    serversalt: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    messageid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    sessionid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    envelope: (f = msg.getEnvelope()) && proto.msg.MessageEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ProtoEncryptedPayload}
 */
proto.msg.ProtoEncryptedPayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ProtoEncryptedPayload;
  return proto.msg.ProtoEncryptedPayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ProtoEncryptedPayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ProtoEncryptedPayload}
 */
proto.msg.ProtoEncryptedPayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServersalt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMessageid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSessionid(value);
      break;
    case 4:
      var value = new proto.msg.MessageEnvelope;
      reader.readMessage(value,proto.msg.MessageEnvelope.deserializeBinaryFromReader);
      msg.setEnvelope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ProtoEncryptedPayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ProtoEncryptedPayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ProtoEncryptedPayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ProtoEncryptedPayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEnvelope();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msg.MessageEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 ServerSalt = 1;
 * @return {number}
 */
proto.msg.ProtoEncryptedPayload.prototype.getServersalt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.setServersalt = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.clearServersalt = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoEncryptedPayload.prototype.hasServersalt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 MessageID = 2;
 * @return {number}
 */
proto.msg.ProtoEncryptedPayload.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoEncryptedPayload.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 SessionID = 3;
 * @return {number}
 */
proto.msg.ProtoEncryptedPayload.prototype.getSessionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.setSessionid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.clearSessionid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoEncryptedPayload.prototype.hasSessionid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required MessageEnvelope Envelope = 4;
 * @return {!proto.msg.MessageEnvelope}
 */
proto.msg.ProtoEncryptedPayload.prototype.getEnvelope = function() {
  return /** @type{!proto.msg.MessageEnvelope} */ (
    jspb.Message.getWrapperField(this, proto.msg.MessageEnvelope, 4, 1));
};


/**
 * @param {!proto.msg.MessageEnvelope} value
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
*/
proto.msg.ProtoEncryptedPayload.prototype.setEnvelope = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ProtoEncryptedPayload} returns this
 */
proto.msg.ProtoEncryptedPayload.prototype.clearEnvelope = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ProtoEncryptedPayload.prototype.hasEnvelope = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Error.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Error.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Error} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Error.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    items: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Error}
 */
proto.msg.Error.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Error;
  return proto.msg.Error.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Error} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Error}
 */
proto.msg.Error.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setItems(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Error.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Error.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Error} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Error.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string Code = 1;
 * @return {string}
 */
proto.msg.Error.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Error} returns this
 */
proto.msg.Error.prototype.setCode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Error} returns this
 */
proto.msg.Error.prototype.clearCode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Error.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Items = 2;
 * @return {string}
 */
proto.msg.Error.prototype.getItems = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Error} returns this
 */
proto.msg.Error.prototype.setItems = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Error} returns this
 */
proto.msg.Error.prototype.clearItems = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Error.prototype.hasItems = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.Ack.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Ack.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Ack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Ack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Ack.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Ack}
 */
proto.msg.Ack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Ack;
  return proto.msg.Ack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Ack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Ack}
 */
proto.msg.Ack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addMessageids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Ack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Ack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Ack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Ack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      1,
      f
    );
  }
};


/**
 * repeated uint64 MessageIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.Ack.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.Ack} returns this
 */
proto.msg.Ack.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.Ack} returns this
 */
proto.msg.Ack.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.Ack} returns this
 */
proto.msg.Ack.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Bool.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Bool.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Bool} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Bool.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Bool}
 */
proto.msg.Bool.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Bool;
  return proto.msg.Bool.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Bool} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Bool}
 */
proto.msg.Bool.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Bool.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Bool.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Bool} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Bool.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * required bool Result = 1;
 * @return {boolean}
 */
proto.msg.Bool.prototype.getResult = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.Bool} returns this
 */
proto.msg.Bool.prototype.setResult = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Bool} returns this
 */
proto.msg.Bool.prototype.clearResult = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Bool.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Dialog.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Dialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Dialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Dialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    peerid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    peertype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    topmessageid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    readinboxmaxid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    readoutboxmaxid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    unreadcount: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    notifysettings: (f = msg.getNotifysettings()) && proto.msg.PeerNotifySettings.toObject(includeInstance, f),
    mentionedcount: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    pinned: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    draft: (f = msg.getDraft()) && proto.msg.DraftMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Dialog}
 */
proto.msg.Dialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Dialog;
  return proto.msg.Dialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Dialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Dialog}
 */
proto.msg.Dialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTopmessageid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadinboxmaxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadoutboxmaxid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadcount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 8:
      var value = new proto.msg.PeerNotifySettings;
      reader.readMessage(value,proto.msg.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setNotifysettings(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMentionedcount(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 11:
      var value = new proto.msg.DraftMessage;
      reader.readMessage(value,proto.msg.DraftMessage.deserializeBinaryFromReader);
      msg.setDraft(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Dialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Dialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Dialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Dialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed64String(
      7,
      f
    );
  }
  f = message.getNotifysettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.PeerNotifySettings.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getDraft();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.msg.DraftMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.Dialog.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setTeamid = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearTeamid = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 PeerID = 1;
 * @return {string}
 */
proto.msg.Dialog.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setPeerid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearPeerid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 PeerType = 2;
 * @return {number}
 */
proto.msg.Dialog.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setPeertype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearPeertype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 TopMessageID = 3;
 * @return {number}
 */
proto.msg.Dialog.prototype.getTopmessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setTopmessageid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearTopmessageid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasTopmessageid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 ReadInboxMaxID = 4;
 * @return {number}
 */
proto.msg.Dialog.prototype.getReadinboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setReadinboxmaxid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearReadinboxmaxid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasReadinboxmaxid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 ReadOutboxMaxID = 5;
 * @return {number}
 */
proto.msg.Dialog.prototype.getReadoutboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setReadoutboxmaxid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearReadoutboxmaxid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasReadoutboxmaxid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 UnreadCount = 6;
 * @return {number}
 */
proto.msg.Dialog.prototype.getUnreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setUnreadcount = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearUnreadcount = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasUnreadcount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required fixed64 AccessHash = 7;
 * @return {string}
 */
proto.msg.Dialog.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PeerNotifySettings NotifySettings = 8;
 * @return {?proto.msg.PeerNotifySettings}
 */
proto.msg.Dialog.prototype.getNotifysettings = function() {
  return /** @type{?proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.PeerNotifySettings, 8));
};


/**
 * @param {?proto.msg.PeerNotifySettings|undefined} value
 * @return {!proto.msg.Dialog} returns this
*/
proto.msg.Dialog.prototype.setNotifysettings = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearNotifysettings = function() {
  return this.setNotifysettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasNotifysettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 MentionedCount = 9;
 * @return {number}
 */
proto.msg.Dialog.prototype.getMentionedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setMentionedcount = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearMentionedcount = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasMentionedcount = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required bool Pinned = 10;
 * @return {boolean}
 */
proto.msg.Dialog.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.setPinned = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearPinned = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasPinned = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional DraftMessage Draft = 11;
 * @return {?proto.msg.DraftMessage}
 */
proto.msg.Dialog.prototype.getDraft = function() {
  return /** @type{?proto.msg.DraftMessage} */ (
    jspb.Message.getWrapperField(this, proto.msg.DraftMessage, 11));
};


/**
 * @param {?proto.msg.DraftMessage|undefined} value
 * @return {!proto.msg.Dialog} returns this
*/
proto.msg.Dialog.prototype.setDraft = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.Dialog} returns this
 */
proto.msg.Dialog.prototype.clearDraft = function() {
  return this.setDraft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Dialog.prototype.hasDraft = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputPeer}
 */
proto.msg.InputPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputPeer;
  return proto.msg.InputPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputPeer}
 */
proto.msg.InputPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.PeerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {!proto.msg.PeerType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.InputPeer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPeer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PeerType Type = 2;
 * @return {!proto.msg.PeerType}
 */
proto.msg.InputPeer.prototype.getType = function() {
  return /** @type {!proto.msg.PeerType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.msg.PeerType} value
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPeer.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.InputPeer.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPeer} returns this
 */
proto.msg.InputPeer.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPeer.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Peer}
 */
proto.msg.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Peer;
  return proto.msg.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Peer}
 */
proto.msg.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Peer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Peer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Type = 2;
 * @return {number}
 */
proto.msg.Peer.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Peer.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.Peer.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Peer} returns this
 */
proto.msg.Peer.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Peer.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputPassword.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputPassword.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputPassword} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPassword.toObject = function(includeInstance, msg) {
  var f, obj = {
    srpid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    a: msg.getA_asB64(),
    m1: msg.getM1_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputPassword}
 */
proto.msg.InputPassword.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputPassword;
  return proto.msg.InputPassword.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputPassword} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputPassword}
 */
proto.msg.InputPassword.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSrpid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setA(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setM1(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputPassword.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputPassword.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputPassword} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPassword.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required int64 SrpID = 1;
 * @return {string}
 */
proto.msg.InputPassword.prototype.getSrpid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.setSrpid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.clearSrpid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPassword.prototype.hasSrpid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes A = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InputPassword.prototype.getA = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes A = 2;
 * This is a type-conversion wrapper around `getA()`
 * @return {string}
 */
proto.msg.InputPassword.prototype.getA_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getA()));
};


/**
 * required bytes A = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getA()`
 * @return {!Uint8Array}
 */
proto.msg.InputPassword.prototype.getA_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getA()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.setA = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.clearA = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPassword.prototype.hasA = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes M1 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InputPassword.prototype.getM1 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes M1 = 3;
 * This is a type-conversion wrapper around `getM1()`
 * @return {string}
 */
proto.msg.InputPassword.prototype.getM1_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getM1()));
};


/**
 * required bytes M1 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getM1()`
 * @return {!Uint8Array}
 */
proto.msg.InputPassword.prototype.getM1_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getM1()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.setM1 = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputPassword} returns this
 */
proto.msg.InputPassword.prototype.clearM1 = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputPassword.prototype.hasM1 = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputFileLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputFileLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputFileLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFileLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    fileid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    version: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputFileLocation}
 */
proto.msg.InputFileLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputFileLocation;
  return proto.msg.InputFileLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputFileLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputFileLocation}
 */
proto.msg.InputFileLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFileid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputFileLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputFileLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputFileLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFileLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 ClusterID = 1;
 * @return {number}
 */
proto.msg.InputFileLocation.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.setClusterid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.clearClusterid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFileLocation.prototype.hasClusterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 FileID = 2;
 * @return {string}
 */
proto.msg.InputFileLocation.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.setFileid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.clearFileid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFileLocation.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.InputFileLocation.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFileLocation.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 Version = 4;
 * @return {number}
 */
proto.msg.InputFileLocation.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.setVersion = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFileLocation} returns this
 */
proto.msg.InputFileLocation.prototype.clearVersion = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFileLocation.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.FileLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.FileLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.FileLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    clusterid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    fileid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.FileLocation}
 */
proto.msg.FileLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.FileLocation;
  return proto.msg.FileLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.FileLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.FileLocation}
 */
proto.msg.FileLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClusterid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFileid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.FileLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.FileLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.FileLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int32 ClusterID = 1;
 * @return {number}
 */
proto.msg.FileLocation.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.setClusterid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.clearClusterid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.FileLocation.prototype.hasClusterid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 FileID = 2;
 * @return {string}
 */
proto.msg.FileLocation.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.setFileid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.clearFileid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.FileLocation.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.FileLocation.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.FileLocation} returns this
 */
proto.msg.FileLocation.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.FileLocation.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UserPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UserPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UserPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    photobig: (f = msg.getPhotobig()) && proto.msg.FileLocation.toObject(includeInstance, f),
    photosmall: (f = msg.getPhotosmall()) && proto.msg.FileLocation.toObject(includeInstance, f),
    photoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UserPhoto}
 */
proto.msg.UserPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UserPhoto;
  return proto.msg.UserPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UserPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UserPhoto}
 */
proto.msg.UserPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.FileLocation;
      reader.readMessage(value,proto.msg.FileLocation.deserializeBinaryFromReader);
      msg.setPhotobig(value);
      break;
    case 2:
      var value = new proto.msg.FileLocation;
      reader.readMessage(value,proto.msg.FileLocation.deserializeBinaryFromReader);
      msg.setPhotosmall(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UserPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UserPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UserPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhotobig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.FileLocation.serializeBinaryToWriter
    );
  }
  f = message.getPhotosmall();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msg.FileLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required FileLocation PhotoBig = 1;
 * @return {!proto.msg.FileLocation}
 */
proto.msg.UserPhoto.prototype.getPhotobig = function() {
  return /** @type{!proto.msg.FileLocation} */ (
    jspb.Message.getWrapperField(this, proto.msg.FileLocation, 1, 1));
};


/**
 * @param {!proto.msg.FileLocation} value
 * @return {!proto.msg.UserPhoto} returns this
*/
proto.msg.UserPhoto.prototype.setPhotobig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserPhoto} returns this
 */
proto.msg.UserPhoto.prototype.clearPhotobig = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserPhoto.prototype.hasPhotobig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required FileLocation PhotoSmall = 2;
 * @return {!proto.msg.FileLocation}
 */
proto.msg.UserPhoto.prototype.getPhotosmall = function() {
  return /** @type{!proto.msg.FileLocation} */ (
    jspb.Message.getWrapperField(this, proto.msg.FileLocation, 2, 1));
};


/**
 * @param {!proto.msg.FileLocation} value
 * @return {!proto.msg.UserPhoto} returns this
*/
proto.msg.UserPhoto.prototype.setPhotosmall = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserPhoto} returns this
 */
proto.msg.UserPhoto.prototype.clearPhotosmall = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserPhoto.prototype.hasPhotosmall = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.UserPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserPhoto} returns this
 */
proto.msg.UserPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserPhoto} returns this
 */
proto.msg.UserPhoto.prototype.clearPhotoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserPhoto.prototype.hasPhotoid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputUser}
 */
proto.msg.InputUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputUser;
  return proto.msg.InputUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputUser}
 */
proto.msg.InputUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64String(
      2,
      f
    );
  }
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.InputUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputUser} returns this
 */
proto.msg.InputUser.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputUser} returns this
 */
proto.msg.InputUser.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputUser.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 AccessHash = 2;
 * @return {string}
 */
proto.msg.InputUser.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputUser} returns this
 */
proto.msg.InputUser.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputUser} returns this
 */
proto.msg.InputUser.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputUser.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.User.repeatedFields_ = [12];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.User.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    firstname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lastname: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    restricted: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && proto.msg.UserPhoto.toObject(includeInstance, f),
    bio: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    phone: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    lastseen: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    photogalleryList: jspb.Message.toObjectList(msg.getPhotogalleryList(),
    proto.msg.UserPhoto.toObject, includeInstance),
    isbot: (f = jspb.Message.getBooleanField(msg, 13)) == null ? undefined : f,
    deleted: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    blocked: (f = jspb.Message.getBooleanField(msg, 15)) == null ? undefined : f,
    botinfo: (f = msg.getBotinfo()) && proto.msg.BotInfo.toObject(includeInstance, f),
    official: (f = jspb.Message.getBooleanField(msg, 17)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.User}
 */
proto.msg.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.User;
  return proto.msg.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.User}
 */
proto.msg.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {!proto.msg.UserStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestricted(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 8:
      var value = new proto.msg.UserPhoto;
      reader.readMessage(value,proto.msg.UserPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastseen(value);
      break;
    case 12:
      var value = new proto.msg.UserPhoto;
      reader.readMessage(value,proto.msg.UserPhoto.deserializeBinaryFromReader);
      msg.addPhotogallery(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbot(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlocked(value);
      break;
    case 16:
      var value = new proto.msg.BotInfo;
      reader.readMessage(value,proto.msg.BotInfo.deserializeBinaryFromReader);
      msg.setBotinfo(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOfficial(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.msg.UserStatus} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed64String(
      7,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.UserPhoto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getPhotogalleryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.msg.UserPhoto.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getBotinfo();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.msg.BotInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBool(
      17,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.User.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setFirstname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearFirstname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.User.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setLastname = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearLastname = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Username = 4;
 * @return {string}
 */
proto.msg.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required UserStatus Status = 5;
 * @return {!proto.msg.UserStatus}
 */
proto.msg.User.prototype.getStatus = function() {
  return /** @type {!proto.msg.UserStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.msg.UserStatus} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool Restricted = 6;
 * @return {boolean}
 */
proto.msg.User.prototype.getRestricted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setRestricted = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearRestricted = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasRestricted = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required fixed64 AccessHash = 7;
 * @return {string}
 */
proto.msg.User.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UserPhoto Photo = 8;
 * @return {?proto.msg.UserPhoto}
 */
proto.msg.User.prototype.getPhoto = function() {
  return /** @type{?proto.msg.UserPhoto} */ (
    jspb.Message.getWrapperField(this, proto.msg.UserPhoto, 8));
};


/**
 * @param {?proto.msg.UserPhoto|undefined} value
 * @return {!proto.msg.User} returns this
*/
proto.msg.User.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string Bio = 9;
 * @return {string}
 */
proto.msg.User.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setBio = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearBio = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasBio = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string Phone = 10;
 * @return {string}
 */
proto.msg.User.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setPhone = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearPhone = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 LastSeen = 11;
 * @return {number}
 */
proto.msg.User.prototype.getLastseen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setLastseen = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearLastseen = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasLastseen = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * repeated UserPhoto PhotoGallery = 12;
 * @return {!Array<!proto.msg.UserPhoto>}
 */
proto.msg.User.prototype.getPhotogalleryList = function() {
  return /** @type{!Array<!proto.msg.UserPhoto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.UserPhoto, 12));
};


/**
 * @param {!Array<!proto.msg.UserPhoto>} value
 * @return {!proto.msg.User} returns this
*/
proto.msg.User.prototype.setPhotogalleryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.msg.UserPhoto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UserPhoto}
 */
proto.msg.User.prototype.addPhotogallery = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.msg.UserPhoto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearPhotogalleryList = function() {
  return this.setPhotogalleryList([]);
};


/**
 * optional bool IsBot = 13;
 * @return {boolean}
 */
proto.msg.User.prototype.getIsbot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setIsbot = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearIsbot = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasIsbot = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool Deleted = 14;
 * @return {boolean}
 */
proto.msg.User.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setDeleted = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearDeleted = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional bool Blocked = 15;
 * @return {boolean}
 */
proto.msg.User.prototype.getBlocked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setBlocked = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearBlocked = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasBlocked = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional BotInfo BotInfo = 16;
 * @return {?proto.msg.BotInfo}
 */
proto.msg.User.prototype.getBotinfo = function() {
  return /** @type{?proto.msg.BotInfo} */ (
    jspb.Message.getWrapperField(this, proto.msg.BotInfo, 16));
};


/**
 * @param {?proto.msg.BotInfo|undefined} value
 * @return {!proto.msg.User} returns this
*/
proto.msg.User.prototype.setBotinfo = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearBotinfo = function() {
  return this.setBotinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasBotinfo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bool Official = 17;
 * @return {boolean}
 */
proto.msg.User.prototype.getOfficial = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 17, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.setOfficial = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.User} returns this
 */
proto.msg.User.prototype.clearOfficial = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.User.prototype.hasOfficial = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ContactUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ContactUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ContactUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ContactUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    firstname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lastname: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    phone: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    clientid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && proto.msg.UserPhoto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ContactUser}
 */
proto.msg.ContactUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ContactUser;
  return proto.msg.ContactUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ContactUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ContactUser}
 */
proto.msg.ContactUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setClientid(value);
      break;
    case 8:
      var value = new proto.msg.UserPhoto;
      reader.readMessage(value,proto.msg.UserPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ContactUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ContactUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ContactUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ContactUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFixed64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.UserPhoto.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setFirstname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearFirstname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setLastname = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearLastname = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required fixed64 AccessHash = 4;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string Phone = 5;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setPhone = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearPhone = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string Username = 6;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 ClientID = 7;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.setClientid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearClientid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasClientid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional UserPhoto Photo = 8;
 * @return {?proto.msg.UserPhoto}
 */
proto.msg.ContactUser.prototype.getPhoto = function() {
  return /** @type{?proto.msg.UserPhoto} */ (
    jspb.Message.getWrapperField(this, proto.msg.UserPhoto, 8));
};


/**
 * @param {?proto.msg.UserPhoto|undefined} value
 * @return {!proto.msg.ContactUser} returns this
*/
proto.msg.ContactUser.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.ContactUser} returns this
 */
proto.msg.ContactUser.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.ContactUser.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Bot.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Bot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Bot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Bot.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    bio: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Bot}
 */
proto.msg.Bot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Bot;
  return proto.msg.Bot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Bot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Bot}
 */
proto.msg.Bot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Bot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Bot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Bot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Bot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Bot.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Bot.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Name = 2;
 * @return {string}
 */
proto.msg.Bot.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Bot.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string Username = 3;
 * @return {string}
 */
proto.msg.Bot.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Bot.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string Bio = 4;
 * @return {string}
 */
proto.msg.Bot.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.setBio = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Bot} returns this
 */
proto.msg.Bot.prototype.clearBio = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Bot.prototype.hasBio = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.BotCommands.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.BotCommands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.BotCommands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.BotCommands.toObject = function(includeInstance, msg) {
  var f, obj = {
    command: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.BotCommands}
 */
proto.msg.BotCommands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.BotCommands;
  return proto.msg.BotCommands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.BotCommands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.BotCommands}
 */
proto.msg.BotCommands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.BotCommands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.BotCommands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.BotCommands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.BotCommands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string Command = 1;
 * @return {string}
 */
proto.msg.BotCommands.prototype.getCommand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.BotCommands} returns this
 */
proto.msg.BotCommands.prototype.setCommand = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotCommands} returns this
 */
proto.msg.BotCommands.prototype.clearCommand = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotCommands.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string Description = 2;
 * @return {string}
 */
proto.msg.BotCommands.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.BotCommands} returns this
 */
proto.msg.BotCommands.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotCommands} returns this
 */
proto.msg.BotCommands.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotCommands.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.BotInfo.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.BotInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.BotInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.BotInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.BotInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    bot: (f = msg.getBot()) && proto.msg.Bot.toObject(includeInstance, f),
    userid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    description: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    botcommandsList: jspb.Message.toObjectList(msg.getBotcommandsList(),
    proto.msg.BotCommands.toObject, includeInstance),
    inlinegeo: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    inlineplaceholder: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    inlinequery: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.BotInfo}
 */
proto.msg.BotInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.BotInfo;
  return proto.msg.BotInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.BotInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.BotInfo}
 */
proto.msg.BotInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.Bot;
      reader.readMessage(value,proto.msg.Bot.deserializeBinaryFromReader);
      msg.setBot(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new proto.msg.BotCommands;
      reader.readMessage(value,proto.msg.BotCommands.deserializeBinaryFromReader);
      msg.addBotcommands(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInlinegeo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setInlineplaceholder(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInlinequery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.BotInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.BotInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.BotInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.BotInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBot();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.Bot.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBotcommandsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.msg.BotCommands.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * required Bot Bot = 1;
 * @return {!proto.msg.Bot}
 */
proto.msg.BotInfo.prototype.getBot = function() {
  return /** @type{!proto.msg.Bot} */ (
    jspb.Message.getWrapperField(this, proto.msg.Bot, 1, 1));
};


/**
 * @param {!proto.msg.Bot} value
 * @return {!proto.msg.BotInfo} returns this
*/
proto.msg.BotInfo.prototype.setBot = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearBot = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasBot = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 UserID = 2;
 * @return {number}
 */
proto.msg.BotInfo.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Description = 3;
 * @return {string}
 */
proto.msg.BotInfo.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.setDescription = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearDescription = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated BotCommands BotCommands = 4;
 * @return {!Array<!proto.msg.BotCommands>}
 */
proto.msg.BotInfo.prototype.getBotcommandsList = function() {
  return /** @type{!Array<!proto.msg.BotCommands>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.BotCommands, 4));
};


/**
 * @param {!Array<!proto.msg.BotCommands>} value
 * @return {!proto.msg.BotInfo} returns this
*/
proto.msg.BotInfo.prototype.setBotcommandsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.BotCommands=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.BotCommands}
 */
proto.msg.BotInfo.prototype.addBotcommands = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.BotCommands, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearBotcommandsList = function() {
  return this.setBotcommandsList([]);
};


/**
 * optional bool InlineGeo = 5;
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.getInlinegeo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.setInlinegeo = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearInlinegeo = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasInlinegeo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string InlinePlaceHolder = 6;
 * @return {string}
 */
proto.msg.BotInfo.prototype.getInlineplaceholder = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.setInlineplaceholder = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearInlineplaceholder = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasInlineplaceholder = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool InlineQuery = 7;
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.getInlinequery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.setInlinequery = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.BotInfo} returns this
 */
proto.msg.BotInfo.prototype.clearInlinequery = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.BotInfo.prototype.hasInlinequery = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    photobig: (f = msg.getPhotobig()) && proto.msg.FileLocation.toObject(includeInstance, f),
    photosmall: (f = msg.getPhotosmall()) && proto.msg.FileLocation.toObject(includeInstance, f),
    photoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupPhoto}
 */
proto.msg.GroupPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupPhoto;
  return proto.msg.GroupPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupPhoto}
 */
proto.msg.GroupPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.FileLocation;
      reader.readMessage(value,proto.msg.FileLocation.deserializeBinaryFromReader);
      msg.setPhotobig(value);
      break;
    case 2:
      var value = new proto.msg.FileLocation;
      reader.readMessage(value,proto.msg.FileLocation.deserializeBinaryFromReader);
      msg.setPhotosmall(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhotobig();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.FileLocation.serializeBinaryToWriter
    );
  }
  f = message.getPhotosmall();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.msg.FileLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required FileLocation PhotoBig = 1;
 * @return {!proto.msg.FileLocation}
 */
proto.msg.GroupPhoto.prototype.getPhotobig = function() {
  return /** @type{!proto.msg.FileLocation} */ (
    jspb.Message.getWrapperField(this, proto.msg.FileLocation, 1, 1));
};


/**
 * @param {!proto.msg.FileLocation} value
 * @return {!proto.msg.GroupPhoto} returns this
*/
proto.msg.GroupPhoto.prototype.setPhotobig = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupPhoto} returns this
 */
proto.msg.GroupPhoto.prototype.clearPhotobig = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupPhoto.prototype.hasPhotobig = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required FileLocation PhotoSmall = 2;
 * @return {!proto.msg.FileLocation}
 */
proto.msg.GroupPhoto.prototype.getPhotosmall = function() {
  return /** @type{!proto.msg.FileLocation} */ (
    jspb.Message.getWrapperField(this, proto.msg.FileLocation, 2, 1));
};


/**
 * @param {!proto.msg.FileLocation} value
 * @return {!proto.msg.GroupPhoto} returns this
*/
proto.msg.GroupPhoto.prototype.setPhotosmall = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupPhoto} returns this
 */
proto.msg.GroupPhoto.prototype.clearPhotosmall = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupPhoto.prototype.hasPhotosmall = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.GroupPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupPhoto} returns this
 */
proto.msg.GroupPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupPhoto} returns this
 */
proto.msg.GroupPhoto.prototype.clearPhotoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupPhoto.prototype.hasPhotoid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.Group.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    title: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    createdon: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    participants: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    editedon: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    flagsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && proto.msg.GroupPhoto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Group}
 */
proto.msg.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Group;
  return proto.msg.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Group}
 */
proto.msg.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipants(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditedon(value);
      break;
    case 6:
      var value = /** @type {!proto.msg.GroupFlags} */ (reader.readEnum());
      msg.addFlags(value);
      break;
    case 7:
      var value = new proto.msg.GroupPhoto;
      reader.readMessage(value,proto.msg.GroupPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      6,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.msg.GroupPhoto.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Group.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Title = 2;
 * @return {string}
 */
proto.msg.Group.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setTitle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearTitle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 CreatedOn = 3;
 * @return {number}
 */
proto.msg.Group.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setCreatedon = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearCreatedon = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 Participants = 4;
 * @return {number}
 */
proto.msg.Group.prototype.getParticipants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setParticipants = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearParticipants = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasParticipants = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 EditedOn = 5;
 * @return {number}
 */
proto.msg.Group.prototype.getEditedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setEditedon = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearEditedon = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasEditedon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated GroupFlags Flags = 6;
 * @return {!Array<!proto.msg.GroupFlags>}
 */
proto.msg.Group.prototype.getFlagsList = function() {
  return /** @type {!Array<!proto.msg.GroupFlags>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<!proto.msg.GroupFlags>} value
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.setFlagsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.msg.GroupFlags} value
 * @param {number=} opt_index
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.addFlags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearFlagsList = function() {
  return this.setFlagsList([]);
};


/**
 * optional GroupPhoto Photo = 7;
 * @return {?proto.msg.GroupPhoto}
 */
proto.msg.Group.prototype.getPhoto = function() {
  return /** @type{?proto.msg.GroupPhoto} */ (
    jspb.Message.getWrapperField(this, proto.msg.GroupPhoto, 7));
};


/**
 * @param {?proto.msg.GroupPhoto|undefined} value
 * @return {!proto.msg.Group} returns this
*/
proto.msg.Group.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.Group} returns this
 */
proto.msg.Group.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Group.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.GroupFull.repeatedFields_ = [2,3,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupFull.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupFull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupFull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupFull.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.msg.Group.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.msg.User.toObject, includeInstance),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.GroupParticipant.toObject, includeInstance),
    notifysettings: (f = msg.getNotifysettings()) && proto.msg.PeerNotifySettings.toObject(includeInstance, f),
    photogalleryList: jspb.Message.toObjectList(msg.getPhotogalleryList(),
    proto.msg.GroupPhoto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupFull}
 */
proto.msg.GroupFull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupFull;
  return proto.msg.GroupFull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupFull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupFull}
 */
proto.msg.GroupFull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.Group;
      reader.readMessage(value,proto.msg.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.msg.User;
      reader.readMessage(value,proto.msg.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 3:
      var value = new proto.msg.GroupParticipant;
      reader.readMessage(value,proto.msg.GroupParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = new proto.msg.PeerNotifySettings;
      reader.readMessage(value,proto.msg.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setNotifysettings(value);
      break;
    case 5:
      var value = new proto.msg.GroupPhoto;
      reader.readMessage(value,proto.msg.GroupPhoto.deserializeBinaryFromReader);
      msg.addPhotogallery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupFull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupFull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupFull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupFull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.Group.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msg.User.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.GroupParticipant.serializeBinaryToWriter
    );
  }
  f = message.getNotifysettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msg.PeerNotifySettings.serializeBinaryToWriter
    );
  }
  f = message.getPhotogalleryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.msg.GroupPhoto.serializeBinaryToWriter
    );
  }
};


/**
 * required Group Group = 1;
 * @return {!proto.msg.Group}
 */
proto.msg.GroupFull.prototype.getGroup = function() {
  return /** @type{!proto.msg.Group} */ (
    jspb.Message.getWrapperField(this, proto.msg.Group, 1, 1));
};


/**
 * @param {!proto.msg.Group} value
 * @return {!proto.msg.GroupFull} returns this
*/
proto.msg.GroupFull.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupFull} returns this
 */
proto.msg.GroupFull.prototype.clearGroup = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupFull.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated User Users = 2;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.GroupFull.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.User, 2));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.GroupFull} returns this
*/
proto.msg.GroupFull.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.GroupFull.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.GroupFull} returns this
 */
proto.msg.GroupFull.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated GroupParticipant Participants = 3;
 * @return {!Array<!proto.msg.GroupParticipant>}
 */
proto.msg.GroupFull.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.msg.GroupParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.GroupParticipant, 3));
};


/**
 * @param {!Array<!proto.msg.GroupParticipant>} value
 * @return {!proto.msg.GroupFull} returns this
*/
proto.msg.GroupFull.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.GroupParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupFull.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.GroupParticipant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.GroupFull} returns this
 */
proto.msg.GroupFull.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * required PeerNotifySettings NotifySettings = 4;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.GroupFull.prototype.getNotifysettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.PeerNotifySettings, 4, 1));
};


/**
 * @param {!proto.msg.PeerNotifySettings} value
 * @return {!proto.msg.GroupFull} returns this
*/
proto.msg.GroupFull.prototype.setNotifysettings = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupFull} returns this
 */
proto.msg.GroupFull.prototype.clearNotifysettings = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupFull.prototype.hasNotifysettings = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated GroupPhoto PhotoGallery = 5;
 * @return {!Array<!proto.msg.GroupPhoto>}
 */
proto.msg.GroupFull.prototype.getPhotogalleryList = function() {
  return /** @type{!Array<!proto.msg.GroupPhoto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.GroupPhoto, 5));
};


/**
 * @param {!Array<!proto.msg.GroupPhoto>} value
 * @return {!proto.msg.GroupFull} returns this
*/
proto.msg.GroupFull.prototype.setPhotogalleryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.GroupPhoto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.GroupPhoto}
 */
proto.msg.GroupFull.prototype.addPhotogallery = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.GroupPhoto, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.GroupFull} returns this
 */
proto.msg.GroupFull.prototype.clearPhotogalleryList = function() {
  return this.setPhotogalleryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    firstname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lastname: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && proto.msg.UserPhoto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupParticipant;
  return proto.msg.GroupParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.ParticipantType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccesshash(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 8:
      var value = new proto.msg.UserPhoto;
      reader.readMessage(value,proto.msg.UserPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.msg.ParticipantType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64String(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.UserPhoto.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setFirstname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearFirstname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setLastname = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearLastname = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required ParticipantType Type = 4;
 * @return {!proto.msg.ParticipantType}
 */
proto.msg.GroupParticipant.prototype.getType = function() {
  return /** @type {!proto.msg.ParticipantType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.msg.ParticipantType} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setType = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearType = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 AccessHash = 5;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string Username = 6;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional UserPhoto Photo = 8;
 * @return {?proto.msg.UserPhoto}
 */
proto.msg.GroupParticipant.prototype.getPhoto = function() {
  return /** @type{?proto.msg.UserPhoto} */ (
    jspb.Message.getWrapperField(this, proto.msg.UserPhoto, 8));
};


/**
 * @param {?proto.msg.UserPhoto|undefined} value
 * @return {!proto.msg.GroupParticipant} returns this
*/
proto.msg.GroupParticipant.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.GroupParticipant} returns this
 */
proto.msg.GroupParticipant.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GroupParticipant.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UserMessage.repeatedFields_ = [18,23];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UserMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UserMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UserMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    peerid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    peertype: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    createdon: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    editedon: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    fwdsenderid: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    fwdchannelid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    fwdchannelmessageid: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    flags: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    messagetype: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f,
    body: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    senderid: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    contentread: (f = jspb.Message.getBooleanField(msg, 13)) == null ? undefined : f,
    inbox: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f,
    replyto: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    messageaction: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    messageactiondata: msg.getMessageactiondata_asB64(),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.msg.MessageEntity.toObject, includeInstance),
    mediatype: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    media: msg.getMedia_asB64(),
    replymarkup: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    replymarkupdata: msg.getReplymarkupdata_asB64(),
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 23)) == null ? undefined : f,
    viabotid: (f = jspb.Message.getField(msg, 24)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UserMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UserMessage;
  return proto.msg.UserMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UserMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UserMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditedon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdsenderid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdchannelid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdchannelmessageid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagetype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSenderid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContentread(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInbox(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyto(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageaction(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageactiondata(value);
      break;
    case 18:
      var value = new proto.msg.MessageEntity;
      reader.readMessage(value,proto.msg.MessageEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 19:
      var value = /** @type {!proto.msg.MediaType} */ (reader.readEnum());
      msg.setMediatype(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMedia(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplymarkup(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setReplymarkupdata(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setViabotid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UserMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UserMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt64String(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.msg.MessageEntity.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.msg.MediaType} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeEnum(
      19,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBytes(
      22,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      23,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 24));
  if (f != null) {
    writer.writeInt64(
      24,
      f
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setTeamid = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearTeamid = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 ID = 1;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setPeerid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearPeerid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 PeerType = 3;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setPeertype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearPeertype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 CreatedOn = 4;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setCreatedon = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearCreatedon = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 EditedOn = 5;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getEditedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setEditedon = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearEditedon = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasEditedon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 FwdSenderID = 6;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdsenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setFwdsenderid = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearFwdsenderid = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasFwdsenderid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 FwdChannelID = 7;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdchannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setFwdchannelid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearFwdchannelid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasFwdchannelid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 FwdChannelMessageID = 8;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdchannelmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setFwdchannelmessageid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearFwdchannelmessageid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasFwdchannelmessageid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 Flags = 9;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setFlags = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearFlags = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int64 MessageType = 10;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setMessagetype = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearMessagetype = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasMessagetype = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string Body = 11;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setBody = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearBody = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasBody = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int64 SenderID = 12;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setSenderid = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearSenderid = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasSenderid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bool ContentRead = 13;
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.getContentread = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setContentread = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearContentread = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasContentread = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool Inbox = 14;
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.getInbox = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setInbox = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearInbox = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasInbox = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required int64 ReplyTo = 15;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getReplyto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setReplyto = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearReplyto = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasReplyto = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 MessageAction = 16;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getMessageaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setMessageaction = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearMessageaction = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasMessageaction = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional bytes MessageActionData = 17;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UserMessage.prototype.getMessageactiondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes MessageActionData = 17;
 * This is a type-conversion wrapper around `getMessageactiondata()`
 * @return {string}
 */
proto.msg.UserMessage.prototype.getMessageactiondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageactiondata()));
};


/**
 * optional bytes MessageActionData = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageactiondata()`
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.getMessageactiondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageactiondata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setMessageactiondata = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearMessageactiondata = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasMessageactiondata = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated MessageEntity Entities = 18;
 * @return {!Array<!proto.msg.MessageEntity>}
 */
proto.msg.UserMessage.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.msg.MessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.MessageEntity, 18));
};


/**
 * @param {!Array<!proto.msg.MessageEntity>} value
 * @return {!proto.msg.UserMessage} returns this
*/
proto.msg.UserMessage.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.msg.MessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.UserMessage.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.msg.MessageEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * optional MediaType MediaType = 19;
 * @return {!proto.msg.MediaType}
 */
proto.msg.UserMessage.prototype.getMediatype = function() {
  return /** @type {!proto.msg.MediaType} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {!proto.msg.MediaType} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setMediatype = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearMediatype = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasMediatype = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional bytes Media = 20;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UserMessage.prototype.getMedia = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes Media = 20;
 * This is a type-conversion wrapper around `getMedia()`
 * @return {string}
 */
proto.msg.UserMessage.prototype.getMedia_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMedia()));
};


/**
 * optional bytes Media = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMedia()`
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.getMedia_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMedia()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setMedia = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearMedia = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasMedia = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional int64 ReplyMarkup = 21;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getReplymarkup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setReplymarkup = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearReplymarkup = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasReplymarkup = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bytes ReplyMarkupData = 22;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UserMessage.prototype.getReplymarkupdata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 22, ""));
};


/**
 * optional bytes ReplyMarkupData = 22;
 * This is a type-conversion wrapper around `getReplymarkupdata()`
 * @return {string}
 */
proto.msg.UserMessage.prototype.getReplymarkupdata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getReplymarkupdata()));
};


/**
 * optional bytes ReplyMarkupData = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getReplymarkupdata()`
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.getReplymarkupdata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getReplymarkupdata()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setReplymarkupdata = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearReplymarkupdata = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasReplymarkupdata = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * repeated int32 LabelIDs = 23;
 * @return {!Array<number>}
 */
proto.msg.UserMessage.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 23));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 23, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 23, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * optional int64 ViaBotID = 24;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getViabotid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.setViabotid = function(value) {
  return jspb.Message.setField(this, 24, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UserMessage} returns this
 */
proto.msg.UserMessage.prototype.clearViabotid = function() {
  return jspb.Message.setField(this, 24, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.hasViabotid = function() {
  return jspb.Message.getField(this, 24) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.DraftMessage.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.DraftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.DraftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.DraftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DraftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    teamid: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    peerid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    peertype: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    date: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    body: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.msg.MessageEntity.toObject, includeInstance),
    replyto: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    editedid: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.DraftMessage}
 */
proto.msg.DraftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.DraftMessage;
  return proto.msg.DraftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.DraftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.DraftMessage}
 */
proto.msg.DraftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTeamid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 6:
      var value = new proto.msg.MessageEntity;
      reader.readMessage(value,proto.msg.MessageEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyto(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditedid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.DraftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.DraftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.DraftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DraftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt64String(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.msg.MessageEntity.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
};


/**
 * optional int64 TeamID = 100;
 * @return {string}
 */
proto.msg.DraftMessage.prototype.getTeamid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 100, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setTeamid = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearTeamid = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasTeamid = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {string}
 */
proto.msg.DraftMessage.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setPeerid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearPeerid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 PeerType = 3;
 * @return {number}
 */
proto.msg.DraftMessage.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setPeertype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearPeertype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 Date = 4;
 * @return {number}
 */
proto.msg.DraftMessage.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setDate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearDate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string Body = 5;
 * @return {string}
 */
proto.msg.DraftMessage.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setBody = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearBody = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated MessageEntity Entities = 6;
 * @return {!Array<!proto.msg.MessageEntity>}
 */
proto.msg.DraftMessage.prototype.getEntitiesList = function() {
  return /** @type{!Array<!proto.msg.MessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.MessageEntity, 6));
};


/**
 * @param {!Array<!proto.msg.MessageEntity>} value
 * @return {!proto.msg.DraftMessage} returns this
*/
proto.msg.DraftMessage.prototype.setEntitiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.MessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.DraftMessage.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.MessageEntity, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearEntitiesList = function() {
  return this.setEntitiesList([]);
};


/**
 * required int64 ReplyTo = 7;
 * @return {number}
 */
proto.msg.DraftMessage.prototype.getReplyto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setReplyto = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearReplyto = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasReplyto = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int64 EditedID = 8;
 * @return {number}
 */
proto.msg.DraftMessage.prototype.getEditedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.setEditedid = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DraftMessage} returns this
 */
proto.msg.DraftMessage.prototype.clearEditedid = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DraftMessage.prototype.hasEditedid = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessageEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessageEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessageEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    offset: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    length: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.MessageEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessageEntity;
  return proto.msg.MessageEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessageEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.MessageEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.MessageEntityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessageEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessageEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessageEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.MessageEntityType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64String(
      4,
      f
    );
  }
};


/**
 * required MessageEntityType Type = 1;
 * @return {!proto.msg.MessageEntityType}
 */
proto.msg.MessageEntity.prototype.getType = function() {
  return /** @type {!proto.msg.MessageEntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.msg.MessageEntityType} value
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEntity.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Offset = 2;
 * @return {number}
 */
proto.msg.MessageEntity.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.setOffset = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.clearOffset = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEntity.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Length = 3;
 * @return {number}
 */
proto.msg.MessageEntity.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.setLength = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.clearLength = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEntity.prototype.hasLength = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 UserID = 4;
 * @return {string}
 */
proto.msg.MessageEntity.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.MessageEntity} returns this
 */
proto.msg.MessageEntity.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.MessageEntity.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.RSAPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.RSAPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.RSAPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RSAPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    n: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    e: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.RSAPublicKey}
 */
proto.msg.RSAPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.RSAPublicKey;
  return proto.msg.RSAPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.RSAPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.RSAPublicKey}
 */
proto.msg.RSAPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setN(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setE(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.RSAPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.RSAPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.RSAPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RSAPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required int64 FingerPrint = 1;
 * @return {number}
 */
proto.msg.RSAPublicKey.prototype.getFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.setFingerprint = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.clearFingerprint = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.RSAPublicKey.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string N = 2;
 * @return {string}
 */
proto.msg.RSAPublicKey.prototype.getN = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.setN = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.clearN = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.RSAPublicKey.prototype.hasN = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 E = 3;
 * @return {number}
 */
proto.msg.RSAPublicKey.prototype.getE = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.setE = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.RSAPublicKey} returns this
 */
proto.msg.RSAPublicKey.prototype.clearE = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.RSAPublicKey.prototype.hasE = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.DHGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.DHGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.DHGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DHGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    prime: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    gen: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.DHGroup}
 */
proto.msg.DHGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.DHGroup;
  return proto.msg.DHGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.DHGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.DHGroup}
 */
proto.msg.DHGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.DHGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.DHGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.DHGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DHGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 FingerPrint = 1;
 * @return {number}
 */
proto.msg.DHGroup.prototype.getFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.setFingerprint = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.clearFingerprint = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DHGroup.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Prime = 2;
 * @return {string}
 */
proto.msg.DHGroup.prototype.getPrime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.setPrime = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.clearPrime = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DHGroup.prototype.hasPrime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Gen = 3;
 * @return {number}
 */
proto.msg.DHGroup.prototype.getGen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.setGen = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.DHGroup} returns this
 */
proto.msg.DHGroup.prototype.clearGen = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.DHGroup.prototype.hasGen = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneContact.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    firstname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    lastname: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    phone: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneContact}
 */
proto.msg.PhoneContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneContact;
  return proto.msg.PhoneContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneContact}
 */
proto.msg.PhoneContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 ClientID = 1;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.setClientid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.clearClientid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneContact.prototype.hasClientid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.setFirstname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.clearFirstname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneContact.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.setLastname = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.clearLastname = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneContact.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string Phone = 4;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.setPhone = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PhoneContact} returns this
 */
proto.msg.PhoneContact.prototype.clearPhone = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PhoneContact.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PeerNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PeerNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PeerNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PeerNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    muteuntil: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    sound: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.PeerNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PeerNotifySettings;
  return proto.msg.PeerNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PeerNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.PeerNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMuteuntil(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PeerNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PeerNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PeerNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PeerNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 Flags = 1;
 * @return {number}
 */
proto.msg.PeerNotifySettings.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.setFlags = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.clearFlags = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 MuteUntil = 2;
 * @return {number}
 */
proto.msg.PeerNotifySettings.prototype.getMuteuntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.setMuteuntil = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.clearMuteuntil = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasMuteuntil = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Sound = 3;
 * @return {string}
 */
proto.msg.PeerNotifySettings.prototype.getSound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.setSound = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PeerNotifySettings} returns this
 */
proto.msg.PeerNotifySettings.prototype.clearSound = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasSound = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputFile.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    totalparts: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    filename: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    md5checksum: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputFile;
  return proto.msg.InputFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalparts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMd5checksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 FileID = 1;
 * @return {string}
 */
proto.msg.InputFile.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.setFileid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.clearFileid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFile.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 TotalParts = 2;
 * @return {number}
 */
proto.msg.InputFile.prototype.getTotalparts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.setTotalparts = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.clearTotalparts = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFile.prototype.hasTotalparts = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string FileName = 3;
 * @return {string}
 */
proto.msg.InputFile.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.setFilename = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.clearFilename = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFile.prototype.hasFilename = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string MD5Checksum = 4;
 * @return {string}
 */
proto.msg.InputFile.prototype.getMd5checksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.setMd5checksum = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputFile} returns this
 */
proto.msg.InputFile.prototype.clearMd5checksum = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputFile.prototype.hasMd5checksum = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    clusterid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputDocument;
  return proto.msg.InputDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setClusterid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.InputDocument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputDocument.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 AccessHash = 2;
 * @return {string}
 */
proto.msg.InputDocument.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputDocument.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 ClusterID = 3;
 * @return {number}
 */
proto.msg.InputDocument.prototype.getClusterid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.setClusterid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputDocument} returns this
 */
proto.msg.InputDocument.prototype.clearClusterid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputDocument.prototype.hasClusterid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.PrivacyRule.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PrivacyRule.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PrivacyRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PrivacyRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PrivacyRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    privacytype: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    useridsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.PrivacyRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PrivacyRule;
  return proto.msg.PrivacyRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PrivacyRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.PrivacyRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.PrivacyType} */ (reader.readEnum());
      msg.setPrivacytype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.addUserids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PrivacyRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PrivacyRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PrivacyRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PrivacyRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.PrivacyType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getUseridsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64String(
      2,
      f
    );
  }
};


/**
 * required PrivacyType PrivacyType = 1;
 * @return {!proto.msg.PrivacyType}
 */
proto.msg.PrivacyRule.prototype.getPrivacytype = function() {
  return /** @type {!proto.msg.PrivacyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.msg.PrivacyType} value
 * @return {!proto.msg.PrivacyRule} returns this
 */
proto.msg.PrivacyRule.prototype.setPrivacytype = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.PrivacyRule} returns this
 */
proto.msg.PrivacyRule.prototype.clearPrivacytype = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.PrivacyRule.prototype.hasPrivacytype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 UserIDs = 2;
 * @return {!Array<string>}
 */
proto.msg.PrivacyRule.prototype.getUseridsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.msg.PrivacyRule} returns this
 */
proto.msg.PrivacyRule.prototype.setUseridsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule} returns this
 */
proto.msg.PrivacyRule.prototype.addUserids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.PrivacyRule} returns this
 */
proto.msg.PrivacyRule.prototype.clearUseridsList = function() {
  return this.setUseridsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Label.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Label.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Label} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Label.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    colour: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    count: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Label}
 */
proto.msg.Label.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Label;
  return proto.msg.Label.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Label} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Label}
 */
proto.msg.Label.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setColour(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Label.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Label.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Label} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Label.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int32 ID = 1;
 * @return {number}
 */
proto.msg.Label.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Label.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Name = 2;
 * @return {string}
 */
proto.msg.Label.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Label.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string Colour = 3;
 * @return {string}
 */
proto.msg.Label.prototype.getColour = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.setColour = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.clearColour = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Label.prototype.hasColour = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 Count = 4;
 * @return {number}
 */
proto.msg.Label.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.setCount = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Label} returns this
 */
proto.msg.Label.prototype.clearCount = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Label.prototype.hasCount = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.LabelsMany.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.LabelsMany.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.LabelsMany.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.LabelsMany} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsMany.toObject = function(includeInstance, msg) {
  var f, obj = {
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    proto.msg.Label.toObject, includeInstance),
    empty: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.LabelsMany}
 */
proto.msg.LabelsMany.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.LabelsMany;
  return proto.msg.LabelsMany.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.LabelsMany} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.LabelsMany}
 */
proto.msg.LabelsMany.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.Label;
      reader.readMessage(value,proto.msg.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmpty(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.LabelsMany.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.LabelsMany.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.LabelsMany} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.LabelsMany.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.Label.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * repeated Label Labels = 1;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.LabelsMany.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.Label, 1));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.LabelsMany} returns this
*/
proto.msg.LabelsMany.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.LabelsMany.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.LabelsMany} returns this
 */
proto.msg.LabelsMany.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * optional bool Empty = 5;
 * @return {boolean}
 */
proto.msg.LabelsMany.prototype.getEmpty = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.LabelsMany} returns this
 */
proto.msg.LabelsMany.prototype.setEmpty = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.LabelsMany} returns this
 */
proto.msg.LabelsMany.prototype.clearEmpty = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.LabelsMany.prototype.hasEmpty = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputGeoLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputGeoLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputGeoLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputGeoLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    pb_long: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputGeoLocation}
 */
proto.msg.InputGeoLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputGeoLocation;
  return proto.msg.InputGeoLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputGeoLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputGeoLocation}
 */
proto.msg.InputGeoLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputGeoLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputGeoLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputGeoLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputGeoLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required float Lat = 1;
 * @return {number}
 */
proto.msg.InputGeoLocation.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputGeoLocation} returns this
 */
proto.msg.InputGeoLocation.prototype.setLat = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputGeoLocation} returns this
 */
proto.msg.InputGeoLocation.prototype.clearLat = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputGeoLocation.prototype.hasLat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Long = 2;
 * @return {number}
 */
proto.msg.InputGeoLocation.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.msg.InputGeoLocation} returns this
 */
proto.msg.InputGeoLocation.prototype.setLong = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputGeoLocation} returns this
 */
proto.msg.InputGeoLocation.prototype.clearLong = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputGeoLocation.prototype.hasLong = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GeoLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GeoLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GeoLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GeoLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    lat: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f,
    pb_long: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GeoLocation}
 */
proto.msg.GeoLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GeoLocation;
  return proto.msg.GeoLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GeoLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GeoLocation}
 */
proto.msg.GeoLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GeoLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GeoLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GeoLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GeoLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * required float Lat = 1;
 * @return {number}
 */
proto.msg.GeoLocation.prototype.getLat = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.msg.GeoLocation} returns this
 */
proto.msg.GeoLocation.prototype.setLat = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GeoLocation} returns this
 */
proto.msg.GeoLocation.prototype.clearLat = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GeoLocation.prototype.hasLat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float Long = 2;
 * @return {number}
 */
proto.msg.GeoLocation.prototype.getLong = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.msg.GeoLocation} returns this
 */
proto.msg.GeoLocation.prototype.setLong = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.GeoLocation} returns this
 */
proto.msg.GeoLocation.prototype.clearLong = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.GeoLocation.prototype.hasLong = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputTeam.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputTeam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputTeam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputTeam.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputTeam}
 */
proto.msg.InputTeam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputTeam;
  return proto.msg.InputTeam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputTeam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputTeam}
 */
proto.msg.InputTeam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputTeam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputTeam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputTeam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputTeam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64String(
      2,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.InputTeam.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputTeam} returns this
 */
proto.msg.InputTeam.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputTeam} returns this
 */
proto.msg.InputTeam.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputTeam.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 AccessHash = 2;
 * @return {string}
 */
proto.msg.InputTeam.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.InputTeam} returns this
 */
proto.msg.InputTeam.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.InputTeam} returns this
 */
proto.msg.InputTeam.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.InputTeam.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Team.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Team.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Team} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Team.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    creatorid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    accesshash: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Team}
 */
proto.msg.Team.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Team;
  return proto.msg.Team.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Team} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Team}
 */
proto.msg.Team.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setCreatorid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Team.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Team.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Team} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Team.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFixed64String(
      6,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Team.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Team.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Name = 2;
 * @return {string}
 */
proto.msg.Team.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.setName = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.clearName = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Team.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 CreatorID = 3;
 * @return {string}
 */
proto.msg.Team.prototype.getCreatorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.setCreatorid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.clearCreatorid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Team.prototype.hasCreatorid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required fixed64 AccessHash = 6;
 * @return {string}
 */
proto.msg.Team.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.Team} returns this
 */
proto.msg.Team.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.Team.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * @enum {number}
 */
proto.msg.TypingAction = {
  TYPINGACTIONTYPING: 0,
  TYPINGACTIONRECORDINGVOICE: 1,
  TYPINGACTIONRECORDINGVIDEO: 2,
  TYPINGACTIONUPLOADING: 3,
  TYPINGACTIONCANCEL: 4
};

/**
 * @enum {number}
 */
proto.msg.PeerType = {
  PEERSELF: 0,
  PEERUSER: 1,
  PEERGROUP: 2,
  PEERSUPERGROUP: 3,
  PEERCHANNEL: 4
};

/**
 * @enum {number}
 */
proto.msg.UserStatus = {
  USERSTATUSOFFLINE: 0,
  USERSTATUSONLINE: 1,
  USERSTATUSRECENTLY: 2,
  USERSTATUSLASTWEEK: 3,
  USERSTATUSLASTMONTH: 4
};

/**
 * @enum {number}
 */
proto.msg.GroupFlags = {
  GROUPFLAGSEMPTY: 0,
  GROUPFLAGSCREATOR: 1,
  GROUPFLAGSNONPARTICIPANT: 2,
  GROUPFLAGSADMIN: 3,
  GROUPFLAGSADMINSENABLED: 4,
  GROUPFLAGSDEACTIVATED: 5
};

/**
 * @enum {number}
 */
proto.msg.ParticipantType = {
  PARTICIPANTTYPEMEMBER: 0,
  PARTICIPANTTYPEADMIN: 1,
  PARTICIPANTTYPECREATOR: 2
};

/**
 * @enum {number}
 */
proto.msg.InputMediaType = {
  INPUTMEDIATYPEEMPTY: 0,
  INPUTMEDIATYPEINVOICE: 1,
  INPUTMEDIATYPEPOLL: 2,
  INPUTMEDIATYPECONTACT: 3,
  INPUTMEDIATYPEUPLOADEDDOCUMENT: 4,
  INPUTMEDIATYPEDOCUMENT: 5,
  INPUTMEDIATYPEGEOLOCATION: 6,
  INPUTMEDIATYPEWEBDOCUMENT: 7,
  INPUTMEDIATYPESEALED: 8,
  INPUTMEDIATYPEMESSAGEDOCUMENT: 9,
  INPUTMEDIATYPERESERVED4: 10,
  INPUTMEDIATYPERESERVED5: 11,
  INPUTMEDIATYPERESERVED6: 12,
  INPUTMEDIATYPERESERVED7: 13,
  INPUTMEDIATYPERESERVED8: 14
};

/**
 * @enum {number}
 */
proto.msg.MediaType = {
  MEDIATYPEEMPTY: 0,
  MEDIATYPEPOLL: 1,
  MEDIATYPEDOCUMENT: 2,
  MEDIATYPECONTACT: 3,
  MEDIATYPEGEOLOCATION: 4,
  MEDIATYPEINVOICE: 5,
  MEDIATYPEWEBDOCUMENT: 6,
  MEDIATYPESEALED: 7,
  MEDIATYPERESERVED1: 8,
  MEDIATYPERESERVED2: 9,
  MEDIATYPERESERVED3: 10,
  MEDIATYPERESERVED4: 11,
  MEDIATYPERESERVED5: 12,
  MEDIATYPERESERVED6: 13
};

/**
 * @enum {number}
 */
proto.msg.MessageEntityType = {
  MESSAGEENTITYTYPEBOLD: 0,
  MESSAGEENTITYTYPEITALIC: 1,
  MESSAGEENTITYTYPEMENTION: 2,
  MESSAGEENTITYTYPEURL: 3,
  MESSAGEENTITYTYPEEMAIL: 4,
  MESSAGEENTITYTYPEHASHTAG: 5,
  MESSAGEENTITYTYPECODE: 6,
  MESSAGEENTITYTYPEBOTCOMMAND: 7,
  MESSAGEENTITYTYPERESERVED3: 8,
  MESSAGEENTITYTYPERESERVED4: 9,
  MESSAGEENTITYTYPERESERVED5: 10,
  MESSAGEENTITYTYPERESERVED6: 11,
  MESSAGEENTITYTYPERESERVED7: 12,
  MESSAGEENTITYTYPERESERVED8: 13
};

/**
 * @enum {number}
 */
proto.msg.PushTokenProvider = {
  PUSHTOKENFIREBASE: 0,
  PUSHTOKENAPN: 1,
  PUSHTOKENPUSHKIT: 2
};

/**
 * @enum {number}
 */
proto.msg.PrivacyKey = {
  PRIVACYKEYNONE: 0,
  PRIVACYKEYCHATINVITE: 1,
  PRIVACYKEYLASTSEEN: 2,
  PRIVACYKEYPHONENUMBER: 3,
  PRIVACYKEYPROFILEPHOTO: 4,
  PRIVACYKEYFORWARDEDMESSAGE: 5,
  PRIVACYKEYCALL: 6,
  PRIVACYKEYRESERVED1: 7,
  PRIVACYKEYRESERVED2: 8,
  PRIVACYKEYRESERVED3: 9,
  PRIVACYKEYRESERVED4: 10,
  PRIVACYKEYRESERVED5: 11,
  PRIVACYKEYRESERVED6: 12
};

/**
 * @enum {number}
 */
proto.msg.PrivacyType = {
  PRIVACYTYPEALLOWALL: 0,
  PRIVACYTYPEALLOWCONTACTS: 1,
  PRIVACYTYPEDISALLOWALL: 2,
  PRIVACYTYPEALLOWUSERS: 101,
  PRIVACYTYPEDISALLOWUSERS: 102
};

goog.object.extend(exports, proto.msg);

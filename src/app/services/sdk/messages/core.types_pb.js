/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msg.ContactUser', null, global);
goog.exportSymbol('proto.msg.DHGroup', null, global);
goog.exportSymbol('proto.msg.Dialog', null, global);
goog.exportSymbol('proto.msg.DocumentType', null, global);
goog.exportSymbol('proto.msg.Group', null, global);
goog.exportSymbol('proto.msg.GroupFlags', null, global);
goog.exportSymbol('proto.msg.GroupFull', null, global);
goog.exportSymbol('proto.msg.GroupParticipant', null, global);
goog.exportSymbol('proto.msg.InputDocument', null, global);
goog.exportSymbol('proto.msg.InputFile', null, global);
goog.exportSymbol('proto.msg.InputPeer', null, global);
goog.exportSymbol('proto.msg.InputUser', null, global);
goog.exportSymbol('proto.msg.MessageEntity', null, global);
goog.exportSymbol('proto.msg.MessageEntityType', null, global);
goog.exportSymbol('proto.msg.ParticipantType', null, global);
goog.exportSymbol('proto.msg.Peer', null, global);
goog.exportSymbol('proto.msg.PeerNotifySettings', null, global);
goog.exportSymbol('proto.msg.PeerType', null, global);
goog.exportSymbol('proto.msg.PhoneContact', null, global);
goog.exportSymbol('proto.msg.RSAPublicKey', null, global);
goog.exportSymbol('proto.msg.TypingAction', null, global);
goog.exportSymbol('proto.msg.User', null, global);
goog.exportSymbol('proto.msg.UserMessage', null, global);
goog.exportSymbol('proto.msg.UserStatus', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Dialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Dialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.Dialog.displayName = 'proto.msg.Dialog';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Dialog.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Dialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Dialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Dialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerid: jspb.Message.getField(msg, 1),
    peertype: jspb.Message.getField(msg, 2),
    topmessageid: jspb.Message.getField(msg, 3),
    readinboxmaxid: jspb.Message.getField(msg, 4),
    readoutboxmaxid: jspb.Message.getField(msg, 5),
    unreadcount: jspb.Message.getField(msg, 6),
    accesshash: jspb.Message.getField(msg, 7),
    notifysettings: (f = msg.getNotifysettings()) && proto.msg.PeerNotifySettings.toObject(includeInstance, f),
    mentionedcount: jspb.Message.getField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Dialog}
 */
proto.msg.Dialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Dialog;
  return proto.msg.Dialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Dialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Dialog}
 */
proto.msg.Dialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTopmessageid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadinboxmaxid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadoutboxmaxid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnreadcount(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 8:
      var value = new proto.msg.PeerNotifySettings;
      reader.readMessage(value,proto.msg.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setNotifysettings(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMentionedcount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Dialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Dialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Dialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Dialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed64String(
      7,
      f
    );
  }
  f = message.getNotifysettings();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.msg.PeerNotifySettings.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * required int64 PeerID = 1;
 * @return {string}
 */
proto.msg.Dialog.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.Dialog.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.Dialog.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 PeerType = 2;
 * @return {number}
 */
proto.msg.Dialog.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.Dialog.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 TopMessageID = 3;
 * @return {number}
 */
proto.msg.Dialog.prototype.getTopmessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setTopmessageid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.Dialog.prototype.clearTopmessageid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasTopmessageid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 ReadInboxMaxID = 4;
 * @return {number}
 */
proto.msg.Dialog.prototype.getReadinboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setReadinboxmaxid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.Dialog.prototype.clearReadinboxmaxid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasReadinboxmaxid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 ReadOutboxMaxID = 5;
 * @return {number}
 */
proto.msg.Dialog.prototype.getReadoutboxmaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setReadoutboxmaxid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.Dialog.prototype.clearReadoutboxmaxid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasReadoutboxmaxid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 UnreadCount = 6;
 * @return {number}
 */
proto.msg.Dialog.prototype.getUnreadcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setUnreadcount = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.Dialog.prototype.clearUnreadcount = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasUnreadcount = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required fixed64 AccessHash = 7;
 * @return {string}
 */
proto.msg.Dialog.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/** @param {string} value */
proto.msg.Dialog.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.msg.Dialog.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional PeerNotifySettings NotifySettings = 8;
 * @return {?proto.msg.PeerNotifySettings}
 */
proto.msg.Dialog.prototype.getNotifysettings = function() {
  return /** @type{?proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.PeerNotifySettings, 8));
};


/** @param {?proto.msg.PeerNotifySettings|undefined} value */
proto.msg.Dialog.prototype.setNotifysettings = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.msg.Dialog.prototype.clearNotifysettings = function() {
  this.setNotifysettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasNotifysettings = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional int32 MentionedCount = 9;
 * @return {number}
 */
proto.msg.Dialog.prototype.getMentionedcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.msg.Dialog.prototype.setMentionedcount = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.msg.Dialog.prototype.clearMentionedcount = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Dialog.prototype.hasMentionedcount = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Peer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.Peer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.Peer.displayName = 'proto.msg.Peer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Peer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Peer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Peer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Peer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    accesshash: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Peer}
 */
proto.msg.Peer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Peer;
  return proto.msg.Peer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Peer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Peer}
 */
proto.msg.Peer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Peer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Peer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Peer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Peer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Peer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.Peer.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.Peer.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Peer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Type = 2;
 * @return {number}
 */
proto.msg.Peer.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.Peer.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.Peer.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Peer.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.Peer.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.msg.Peer.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.Peer.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Peer.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputPeer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputPeer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputPeer.displayName = 'proto.msg.InputPeer';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputPeer.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputPeer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputPeer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPeer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    type: jspb.Message.getField(msg, 2),
    accesshash: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputPeer}
 */
proto.msg.InputPeer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputPeer;
  return proto.msg.InputPeer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputPeer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputPeer}
 */
proto.msg.InputPeer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.PeerType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputPeer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputPeer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputPeer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputPeer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {!proto.msg.PeerType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.InputPeer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.InputPeer.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputPeer.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputPeer.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PeerType Type = 2;
 * @return {!proto.msg.PeerType}
 */
proto.msg.InputPeer.prototype.getType = function() {
  return /** @type {!proto.msg.PeerType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.msg.PeerType} value */
proto.msg.InputPeer.prototype.setType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InputPeer.prototype.clearType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputPeer.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.InputPeer.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.msg.InputPeer.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InputPeer.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputPeer.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputUser.displayName = 'proto.msg.InputUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    accesshash: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputUser}
 */
proto.msg.InputUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputUser;
  return proto.msg.InputUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputUser}
 */
proto.msg.InputUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64String(
      2,
      f
    );
  }
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.InputUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.InputUser.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputUser.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputUser.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 AccessHash = 2;
 * @return {string}
 */
proto.msg.InputUser.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.msg.InputUser.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InputUser.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputUser.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.User.displayName = 'proto.msg.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.User.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.User} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    firstname: jspb.Message.getField(msg, 2),
    lastname: jspb.Message.getField(msg, 3),
    username: jspb.Message.getField(msg, 4),
    status: jspb.Message.getField(msg, 5),
    restricted: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.User}
 */
proto.msg.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.User;
  return proto.msg.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.User}
 */
proto.msg.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {!proto.msg.UserStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRestricted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.User.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.User} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.User.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {!proto.msg.UserStatus} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.User.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.User.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.User.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.User.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.User.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.User.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.User.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.User.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.User.prototype.clearLastname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string Username = 4;
 * @return {string}
 */
proto.msg.User.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.User.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.User.prototype.clearUsername = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required UserStatus Status = 5;
 * @return {!proto.msg.UserStatus}
 */
proto.msg.User.prototype.getStatus = function() {
  return /** @type {!proto.msg.UserStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.msg.UserStatus} value */
proto.msg.User.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.User.prototype.clearStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bool Restricted = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.User.prototype.getRestricted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.msg.User.prototype.setRestricted = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.User.prototype.clearRestricted = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.User.prototype.hasRestricted = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.ContactUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.ContactUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.ContactUser.displayName = 'proto.msg.ContactUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.ContactUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.ContactUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.ContactUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ContactUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    firstname: jspb.Message.getField(msg, 2),
    lastname: jspb.Message.getField(msg, 3),
    accesshash: jspb.Message.getField(msg, 4),
    phone: jspb.Message.getField(msg, 5),
    username: jspb.Message.getField(msg, 6),
    clientid: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.ContactUser}
 */
proto.msg.ContactUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.ContactUser;
  return proto.msg.ContactUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.ContactUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.ContactUser}
 */
proto.msg.ContactUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setClientid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.ContactUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.ContactUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.ContactUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.ContactUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFixed64String(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.ContactUser.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.ContactUser.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.ContactUser.prototype.clearLastname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required fixed64 AccessHash = 4;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.ContactUser.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string Phone = 5;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.ContactUser.prototype.clearPhone = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string Username = 6;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.ContactUser.prototype.clearUsername = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 ClientID = 7;
 * @return {string}
 */
proto.msg.ContactUser.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/** @param {string} value */
proto.msg.ContactUser.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.msg.ContactUser.prototype.clearClientid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.ContactUser.prototype.hasClientid = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UserMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UserMessage.repeatedFields_, null);
};
goog.inherits(proto.msg.UserMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.UserMessage.displayName = 'proto.msg.UserMessage';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UserMessage.repeatedFields_ = [18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UserMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UserMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UserMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    peerid: jspb.Message.getField(msg, 2),
    peertype: jspb.Message.getField(msg, 3),
    createdon: jspb.Message.getField(msg, 4),
    editedon: jspb.Message.getField(msg, 5),
    fwdsenderid: jspb.Message.getField(msg, 6),
    fwdchannelid: jspb.Message.getField(msg, 7),
    fwdchannelmessageid: jspb.Message.getField(msg, 8),
    flags: jspb.Message.getField(msg, 9),
    messagetype: jspb.Message.getField(msg, 10),
    body: jspb.Message.getField(msg, 11),
    senderid: jspb.Message.getField(msg, 12),
    contentread: jspb.Message.getField(msg, 13),
    inbox: jspb.Message.getField(msg, 14),
    replyto: jspb.Message.getField(msg, 15),
    messageaction: jspb.Message.getField(msg, 16),
    messageactiondata: msg.getMessageactiondata_asB64(),
    entitiesList: jspb.Message.toObjectList(msg.getEntitiesList(),
    proto.msg.MessageEntity.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UserMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UserMessage;
  return proto.msg.UserMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UserMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UserMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPeertype(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditedon(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdsenderid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdchannelid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFwdchannelmessageid(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessagetype(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBody(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSenderid(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContentread(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInbox(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReplyto(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessageaction(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageactiondata(value);
      break;
    case 18:
      var value = new proto.msg.MessageEntity;
      reader.readMessage(value,proto.msg.MessageEntity.deserializeBinaryFromReader);
      msg.addEntities(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UserMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UserMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UserMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt64String(
      12,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeBool(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getEntitiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      proto.msg.MessageEntity.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.UserMessage.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 PeerID = 2;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setPeerid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.UserMessage.prototype.clearPeerid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 PeerType = 3;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getPeertype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setPeertype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.UserMessage.prototype.clearPeertype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasPeertype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 CreatedOn = 4;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setCreatedon = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.UserMessage.prototype.clearCreatedon = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 EditedOn = 5;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getEditedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setEditedon = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.UserMessage.prototype.clearEditedon = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasEditedon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 FwdSenderID = 6;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdsenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setFwdsenderid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.UserMessage.prototype.clearFwdsenderid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasFwdsenderid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required int64 FwdChannelID = 7;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdchannelid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setFwdchannelid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.msg.UserMessage.prototype.clearFwdchannelid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasFwdchannelid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 FwdChannelMessageID = 8;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getFwdchannelmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setFwdchannelmessageid = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.msg.UserMessage.prototype.clearFwdchannelmessageid = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasFwdchannelmessageid = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required int32 Flags = 9;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setFlags = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.msg.UserMessage.prototype.clearFlags = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required int64 MessageType = 10;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setMessagetype = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.msg.UserMessage.prototype.clearMessagetype = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasMessagetype = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required string Body = 11;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getBody = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setBody = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.msg.UserMessage.prototype.clearBody = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasBody = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int64 SenderID = 12;
 * @return {string}
 */
proto.msg.UserMessage.prototype.getSenderid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "0"));
};


/** @param {string} value */
proto.msg.UserMessage.prototype.setSenderid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.msg.UserMessage.prototype.clearSenderid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasSenderid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required bool ContentRead = 13;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.getContentread = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 13, false));
};


/** @param {boolean} value */
proto.msg.UserMessage.prototype.setContentread = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.msg.UserMessage.prototype.clearContentread = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasContentread = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required bool Inbox = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.UserMessage.prototype.getInbox = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 14, false));
};


/** @param {boolean} value */
proto.msg.UserMessage.prototype.setInbox = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.msg.UserMessage.prototype.clearInbox = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasInbox = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * required int64 ReplyTo = 15;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getReplyto = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setReplyto = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.msg.UserMessage.prototype.clearReplyto = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasReplyto = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * required int32 MessageAction = 16;
 * @return {number}
 */
proto.msg.UserMessage.prototype.getMessageaction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.msg.UserMessage.prototype.setMessageaction = function(value) {
  jspb.Message.setField(this, 16, value);
};


proto.msg.UserMessage.prototype.clearMessageaction = function() {
  jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasMessageaction = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * required bytes MessageActionData = 17;
 * @return {!(string|Uint8Array)}
 */
proto.msg.UserMessage.prototype.getMessageactiondata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * required bytes MessageActionData = 17;
 * This is a type-conversion wrapper around `getMessageactiondata()`
 * @return {string}
 */
proto.msg.UserMessage.prototype.getMessageactiondata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageactiondata()));
};


/**
 * required bytes MessageActionData = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageactiondata()`
 * @return {!Uint8Array}
 */
proto.msg.UserMessage.prototype.getMessageactiondata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageactiondata()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.UserMessage.prototype.setMessageactiondata = function(value) {
  jspb.Message.setField(this, 17, value);
};


proto.msg.UserMessage.prototype.clearMessageactiondata = function() {
  jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.UserMessage.prototype.hasMessageactiondata = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * repeated MessageEntity Entities = 18;
 * @return {!Array.<!proto.msg.MessageEntity>}
 */
proto.msg.UserMessage.prototype.getEntitiesList = function() {
  return /** @type{!Array.<!proto.msg.MessageEntity>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.MessageEntity, 18));
};


/** @param {!Array.<!proto.msg.MessageEntity>} value */
proto.msg.UserMessage.prototype.setEntitiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.msg.MessageEntity=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.UserMessage.prototype.addEntities = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.msg.MessageEntity, opt_index);
};


proto.msg.UserMessage.prototype.clearEntitiesList = function() {
  this.setEntitiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.MessageEntity = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.MessageEntity, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.MessageEntity.displayName = 'proto.msg.MessageEntity';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.MessageEntity.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.MessageEntity.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.MessageEntity} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEntity.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    offset: jspb.Message.getField(msg, 2),
    length: jspb.Message.getField(msg, 3),
    userid: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.MessageEntity.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.MessageEntity;
  return proto.msg.MessageEntity.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.MessageEntity} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.MessageEntity}
 */
proto.msg.MessageEntity.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.MessageEntityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.MessageEntity.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.MessageEntity.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.MessageEntity} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.MessageEntity.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.MessageEntityType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required MessageEntityType Type = 1;
 * @return {!proto.msg.MessageEntityType}
 */
proto.msg.MessageEntity.prototype.getType = function() {
  return /** @type {!proto.msg.MessageEntityType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msg.MessageEntityType} value */
proto.msg.MessageEntity.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.MessageEntity.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessageEntity.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Offset = 2;
 * @return {number}
 */
proto.msg.MessageEntity.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.MessageEntity.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.MessageEntity.prototype.clearOffset = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessageEntity.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Length = 3;
 * @return {number}
 */
proto.msg.MessageEntity.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.MessageEntity.prototype.setLength = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.MessageEntity.prototype.clearLength = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessageEntity.prototype.hasLength = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 UserID = 4;
 * @return {number}
 */
proto.msg.MessageEntity.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.MessageEntity.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.MessageEntity.prototype.clearUserid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.MessageEntity.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.RSAPublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.RSAPublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.RSAPublicKey.displayName = 'proto.msg.RSAPublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.RSAPublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.RSAPublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.RSAPublicKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RSAPublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: jspb.Message.getField(msg, 1),
    n: jspb.Message.getField(msg, 2),
    e: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.RSAPublicKey}
 */
proto.msg.RSAPublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.RSAPublicKey;
  return proto.msg.RSAPublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.RSAPublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.RSAPublicKey}
 */
proto.msg.RSAPublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setN(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setE(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.RSAPublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.RSAPublicKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.RSAPublicKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.RSAPublicKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required int64 FingerPrint = 1;
 * @return {number}
 */
proto.msg.RSAPublicKey.prototype.getFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.RSAPublicKey.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.RSAPublicKey.prototype.clearFingerprint = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.RSAPublicKey.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string N = 2;
 * @return {string}
 */
proto.msg.RSAPublicKey.prototype.getN = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.RSAPublicKey.prototype.setN = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.RSAPublicKey.prototype.clearN = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.RSAPublicKey.prototype.hasN = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 E = 3;
 * @return {number}
 */
proto.msg.RSAPublicKey.prototype.getE = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.RSAPublicKey.prototype.setE = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.RSAPublicKey.prototype.clearE = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.RSAPublicKey.prototype.hasE = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.DHGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.DHGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.DHGroup.displayName = 'proto.msg.DHGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.DHGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.DHGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.DHGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DHGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    fingerprint: jspb.Message.getField(msg, 1),
    prime: jspb.Message.getField(msg, 2),
    gen: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.DHGroup}
 */
proto.msg.DHGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.DHGroup;
  return proto.msg.DHGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.DHGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.DHGroup}
 */
proto.msg.DHGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFingerprint(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGen(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.DHGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.DHGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.DHGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.DHGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int64 FingerPrint = 1;
 * @return {number}
 */
proto.msg.DHGroup.prototype.getFingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.DHGroup.prototype.setFingerprint = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.DHGroup.prototype.clearFingerprint = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.DHGroup.prototype.hasFingerprint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Prime = 2;
 * @return {string}
 */
proto.msg.DHGroup.prototype.getPrime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.DHGroup.prototype.setPrime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.DHGroup.prototype.clearPrime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.DHGroup.prototype.hasPrime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 Gen = 3;
 * @return {number}
 */
proto.msg.DHGroup.prototype.getGen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.DHGroup.prototype.setGen = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.DHGroup.prototype.clearGen = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.DHGroup.prototype.hasGen = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PhoneContact = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PhoneContact, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.PhoneContact.displayName = 'proto.msg.PhoneContact';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PhoneContact.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PhoneContact.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PhoneContact} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneContact.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getField(msg, 1),
    firstname: jspb.Message.getField(msg, 2),
    lastname: jspb.Message.getField(msg, 3),
    phone: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PhoneContact}
 */
proto.msg.PhoneContact.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PhoneContact;
  return proto.msg.PhoneContact.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PhoneContact} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PhoneContact}
 */
proto.msg.PhoneContact.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PhoneContact.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PhoneContact.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PhoneContact} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PhoneContact.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 ClientID = 1;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.PhoneContact.prototype.setClientid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.PhoneContact.prototype.clearClientid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PhoneContact.prototype.hasClientid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.PhoneContact.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.PhoneContact.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PhoneContact.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.PhoneContact.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.PhoneContact.prototype.clearLastname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PhoneContact.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string Phone = 4;
 * @return {string}
 */
proto.msg.PhoneContact.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.PhoneContact.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.PhoneContact.prototype.clearPhone = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PhoneContact.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.PeerNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.PeerNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.PeerNotifySettings.displayName = 'proto.msg.PeerNotifySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.PeerNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.PeerNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.PeerNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PeerNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    flags: jspb.Message.getField(msg, 1),
    muteuntil: jspb.Message.getField(msg, 2),
    sound: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.PeerNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.PeerNotifySettings;
  return proto.msg.PeerNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.PeerNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.PeerNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlags(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMuteuntil(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.PeerNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.PeerNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.PeerNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.PeerNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required int32 Flags = 1;
 * @return {number}
 */
proto.msg.PeerNotifySettings.prototype.getFlags = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.PeerNotifySettings.prototype.setFlags = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.PeerNotifySettings.prototype.clearFlags = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasFlags = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 MuteUntil = 2;
 * @return {number}
 */
proto.msg.PeerNotifySettings.prototype.getMuteuntil = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.PeerNotifySettings.prototype.setMuteuntil = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.PeerNotifySettings.prototype.clearMuteuntil = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasMuteuntil = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Sound = 3;
 * @return {string}
 */
proto.msg.PeerNotifySettings.prototype.getSound = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.PeerNotifySettings.prototype.setSound = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.PeerNotifySettings.prototype.clearSound = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.PeerNotifySettings.prototype.hasSound = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputFile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputFile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputFile.displayName = 'proto.msg.InputFile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputFile.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputFile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputFile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFile.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: jspb.Message.getField(msg, 1),
    totalparts: jspb.Message.getField(msg, 2),
    filename: jspb.Message.getField(msg, 3),
    md5checksum: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputFile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputFile;
  return proto.msg.InputFile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputFile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputFile}
 */
proto.msg.InputFile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalparts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMd5checksum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputFile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputFile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputFile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputFile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 FileID = 1;
 * @return {string}
 */
proto.msg.InputFile.prototype.getFileid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.InputFile.prototype.setFileid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputFile.prototype.clearFileid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputFile.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 TotalParts = 2;
 * @return {number}
 */
proto.msg.InputFile.prototype.getTotalparts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.InputFile.prototype.setTotalparts = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InputFile.prototype.clearTotalparts = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputFile.prototype.hasTotalparts = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string FileName = 3;
 * @return {string}
 */
proto.msg.InputFile.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.InputFile.prototype.setFilename = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InputFile.prototype.clearFilename = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputFile.prototype.hasFilename = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string MD5Checksum = 4;
 * @return {string}
 */
proto.msg.InputFile.prototype.getMd5checksum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.InputFile.prototype.setMd5checksum = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.InputFile.prototype.clearMd5checksum = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputFile.prototype.hasMd5checksum = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InputDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InputDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InputDocument.displayName = 'proto.msg.InputDocument';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InputDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InputDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InputDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    accesshash: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InputDocument;
  return proto.msg.InputDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InputDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InputDocument}
 */
proto.msg.InputDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InputDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InputDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InputDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InputDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64String(
      2,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.InputDocument.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.InputDocument.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InputDocument.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputDocument.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 AccessHash = 2;
 * @return {string}
 */
proto.msg.InputDocument.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.msg.InputDocument.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InputDocument.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InputDocument.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.Group.repeatedFields_, null);
};
goog.inherits(proto.msg.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.Group.displayName = 'proto.msg.Group';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.Group.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1),
    title: jspb.Message.getField(msg, 2),
    createdon: jspb.Message.getField(msg, 3),
    participants: jspb.Message.getField(msg, 4),
    editedon: jspb.Message.getField(msg, 5),
    flagsList: jspb.Message.getRepeatedField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.Group}
 */
proto.msg.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.Group;
  return proto.msg.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.Group}
 */
proto.msg.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatedon(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipants(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEditedon(value);
      break;
    case 6:
      var value = /** @type {!proto.msg.GroupFlags} */ (reader.readEnum());
      msg.addFlags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getFlagsList();
  if (f.length > 0) {
    writer.writeRepeatedEnum(
      6,
      f
    );
  }
};


/**
 * required int64 ID = 1;
 * @return {string}
 */
proto.msg.Group.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.Group.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.Group.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Group.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Title = 2;
 * @return {string}
 */
proto.msg.Group.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.Group.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.Group.prototype.clearTitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Group.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 CreatedOn = 3;
 * @return {number}
 */
proto.msg.Group.prototype.getCreatedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.Group.prototype.setCreatedon = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.Group.prototype.clearCreatedon = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Group.prototype.hasCreatedon = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 Participants = 4;
 * @return {number}
 */
proto.msg.Group.prototype.getParticipants = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.Group.prototype.setParticipants = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.Group.prototype.clearParticipants = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Group.prototype.hasParticipants = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 EditedOn = 5;
 * @return {number}
 */
proto.msg.Group.prototype.getEditedon = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.Group.prototype.setEditedon = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.Group.prototype.clearEditedon = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.Group.prototype.hasEditedon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated GroupFlags Flags = 6;
 * @return {!Array.<!proto.msg.GroupFlags>}
 */
proto.msg.Group.prototype.getFlagsList = function() {
  return /** @type {!Array.<!proto.msg.GroupFlags>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<!proto.msg.GroupFlags>} value */
proto.msg.Group.prototype.setFlagsList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!proto.msg.GroupFlags} value
 * @param {number=} opt_index
 */
proto.msg.Group.prototype.addFlags = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.msg.Group.prototype.clearFlagsList = function() {
  this.setFlagsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupFull = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.GroupFull.repeatedFields_, null);
};
goog.inherits(proto.msg.GroupFull, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupFull.displayName = 'proto.msg.GroupFull';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.GroupFull.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupFull.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupFull.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupFull} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupFull.toObject = function(includeInstance, msg) {
  var f, obj = {
    group: (f = msg.getGroup()) && proto.msg.Group.toObject(includeInstance, f),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.msg.User.toObject, includeInstance),
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.msg.GroupParticipant.toObject, includeInstance),
    notifysettings: (f = msg.getNotifysettings()) && proto.msg.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupFull}
 */
proto.msg.GroupFull.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupFull;
  return proto.msg.GroupFull.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupFull} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupFull}
 */
proto.msg.GroupFull.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.Group;
      reader.readMessage(value,proto.msg.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.msg.User;
      reader.readMessage(value,proto.msg.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 3:
      var value = new proto.msg.GroupParticipant;
      reader.readMessage(value,proto.msg.GroupParticipant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 4:
      var value = new proto.msg.PeerNotifySettings;
      reader.readMessage(value,proto.msg.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setNotifysettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupFull.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupFull.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupFull} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupFull.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.Group.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msg.User.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.msg.GroupParticipant.serializeBinaryToWriter
    );
  }
  f = message.getNotifysettings();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.msg.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * required Group Group = 1;
 * @return {!proto.msg.Group}
 */
proto.msg.GroupFull.prototype.getGroup = function() {
  return /** @type{!proto.msg.Group} */ (
    jspb.Message.getWrapperField(this, proto.msg.Group, 1, 1));
};


/** @param {!proto.msg.Group} value */
proto.msg.GroupFull.prototype.setGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.GroupFull.prototype.clearGroup = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupFull.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated User Users = 2;
 * @return {!Array.<!proto.msg.User>}
 */
proto.msg.GroupFull.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.User, 2));
};


/** @param {!Array.<!proto.msg.User>} value */
proto.msg.GroupFull.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.GroupFull.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.User, opt_index);
};


proto.msg.GroupFull.prototype.clearUsersList = function() {
  this.setUsersList([]);
};


/**
 * repeated GroupParticipant Participants = 3;
 * @return {!Array.<!proto.msg.GroupParticipant>}
 */
proto.msg.GroupFull.prototype.getParticipantsList = function() {
  return /** @type{!Array.<!proto.msg.GroupParticipant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.GroupParticipant, 3));
};


/** @param {!Array.<!proto.msg.GroupParticipant>} value */
proto.msg.GroupFull.prototype.setParticipantsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.GroupParticipant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupFull.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.GroupParticipant, opt_index);
};


proto.msg.GroupFull.prototype.clearParticipantsList = function() {
  this.setParticipantsList([]);
};


/**
 * required PeerNotifySettings NotifySettings = 4;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.GroupFull.prototype.getNotifysettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, proto.msg.PeerNotifySettings, 4, 1));
};


/** @param {!proto.msg.PeerNotifySettings} value */
proto.msg.GroupFull.prototype.setNotifysettings = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.msg.GroupFull.prototype.clearNotifysettings = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupFull.prototype.hasNotifysettings = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.GroupParticipant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.GroupParticipant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.GroupParticipant.displayName = 'proto.msg.GroupParticipant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.GroupParticipant.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.GroupParticipant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.GroupParticipant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupParticipant.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    firstname: jspb.Message.getField(msg, 2),
    lastname: jspb.Message.getField(msg, 3),
    type: jspb.Message.getField(msg, 4),
    accesshash: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupParticipant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.GroupParticipant;
  return proto.msg.GroupParticipant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.GroupParticipant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.GroupParticipant}
 */
proto.msg.GroupParticipant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 4:
      var value = /** @type {!proto.msg.ParticipantType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.GroupParticipant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.GroupParticipant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.GroupParticipant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.GroupParticipant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!proto.msg.ParticipantType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64String(
      5,
      f
    );
  }
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.msg.GroupParticipant.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.GroupParticipant.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupParticipant.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string FirstName = 2;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.GroupParticipant.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.GroupParticipant.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupParticipant.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string LastName = 3;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.GroupParticipant.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.GroupParticipant.prototype.clearLastname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupParticipant.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required ParticipantType Type = 4;
 * @return {!proto.msg.ParticipantType}
 */
proto.msg.GroupParticipant.prototype.getType = function() {
  return /** @type {!proto.msg.ParticipantType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.msg.ParticipantType} value */
proto.msg.GroupParticipant.prototype.setType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.GroupParticipant.prototype.clearType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupParticipant.prototype.hasType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 AccessHash = 5;
 * @return {string}
 */
proto.msg.GroupParticipant.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.msg.GroupParticipant.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.GroupParticipant.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.GroupParticipant.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * @enum {number}
 */
proto.msg.TypingAction = {
  TYPINGACTIONTYPING: 0,
  TYPINGACTIONRECORDINGVOICE: 1,
  TYPINGACTIONRECORDINGVIDEO: 2,
  TYPINGACTIONUPLOADING: 3,
  TYPINGACTIONCANCEL: 4
};

/**
 * @enum {number}
 */
proto.msg.PeerType = {
  PEERSELF: 0,
  PEERUSER: 1,
  PEERGROUP: 2,
  PEERSUPERGROUP: 3,
  PEERCHANNEL: 4
};

/**
 * @enum {number}
 */
proto.msg.UserStatus = {
  USERSTATUSOFFLINE: 0,
  USERSTATUSONLINE: 1,
  USERSTATUSRECENTLY: 2,
  USERSTATUSLASTWEEK: 3,
  USERSTATUSLASTMONTH: 4
};

/**
 * @enum {number}
 */
proto.msg.MessageEntityType = {
  MESSAGEENTITYTYPEBOLD: 0,
  MESSAGEENTITYTYPEITALIC: 1,
  MESSAGEENTITYTYPEMENTION: 2,
  MESSAGEENTITYTYPEURL: 3,
  MESSAGEENTITYTYPEEMAIL: 4,
  MESSAGEENTITYTYPEHASHTAG: 5
};

/**
 * @enum {number}
 */
proto.msg.DocumentType = {
  DOCUMENTTYPEUNKNOWN: 0,
  DOCUMENTTYPEPHOTO: 1
};

/**
 * @enum {number}
 */
proto.msg.GroupFlags = {
  GROUPFLAGSEMPTY: 0,
  GROUPFLAGSCREATOR: 1,
  GROUPFLAGSNONPARTICIPANT: 2,
  GROUPFLAGSADMIN: 3,
  GROUPFLAGSADMINSENABLED: 4,
  GROUPFLAGSDEACTIVATED: 5
};

/**
 * @enum {number}
 */
proto.msg.ParticipantType = {
  PARTICIPANTTYPEMEMBER: 0,
  PARTICIPANTTYPEADMIN: 1,
  PARTICIPANTTYPECREATOR: 2
};

goog.object.extend(exports, proto.msg);

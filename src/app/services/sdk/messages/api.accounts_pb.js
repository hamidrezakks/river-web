/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var core_types_pb = require('./core.types_pb.js');
goog.exportSymbol('proto.msg.AccountCheckUsername', null, global);
goog.exportSymbol('proto.msg.AccountGetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountRegisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountSetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountUnregisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountUpdateProfile', null, global);
goog.exportSymbol('proto.msg.AccountUpdateUsername', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountSetNotifySettings.displayName = 'proto.msg.AccountSetNotifySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && core_types_pb.InputPeer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetNotifySettings;
  return proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new core_types_pb.PeerNotifySettings;
      reader.readMessage(value,core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.AccountSetNotifySettings.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.AccountSetNotifySettings.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.AccountSetNotifySettings.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PeerNotifySettings Settings = 2;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.AccountSetNotifySettings.prototype.getSettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, core_types_pb.PeerNotifySettings, 2, 1));
};


/** @param {!proto.msg.PeerNotifySettings} value */
proto.msg.AccountSetNotifySettings.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.AccountSetNotifySettings.prototype.clearSettings = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountGetNotifySettings.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountGetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountGetNotifySettings.displayName = 'proto.msg.AccountGetNotifySettings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountGetNotifySettings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peerList: jspb.Message.toObjectList(msg.getPeerList(),
    core_types_pb.InputPeer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetNotifySettings;
  return proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new core_types_pb.InputPeer;
      reader.readMessage(value,core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.addPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InputPeer Peer = 1;
 * @return {!Array.<!proto.msg.InputPeer>}
 */
proto.msg.AccountGetNotifySettings.prototype.getPeerList = function() {
  return /** @type{!Array.<!proto.msg.InputPeer>} */ (
    jspb.Message.getRepeatedWrapperField(this, core_types_pb.InputPeer, 1));
};


/** @param {!Array.<!proto.msg.InputPeer>} value */
proto.msg.AccountGetNotifySettings.prototype.setPeerList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.InputPeer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.InputPeer}
 */
proto.msg.AccountGetNotifySettings.prototype.addPeer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.InputPeer, opt_index);
};


proto.msg.AccountGetNotifySettings.prototype.clearPeerList = function() {
  this.setPeerList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRegisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountRegisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountRegisterDevice.displayName = 'proto.msg.AccountRegisterDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRegisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRegisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRegisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokentype: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2),
    devicemodel: jspb.Message.getField(msg, 3),
    systemversion: jspb.Message.getField(msg, 4),
    appversion: jspb.Message.getField(msg, 5),
    langcode: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRegisterDevice;
  return proto.msg.AccountRegisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRegisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokentype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicemodel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppversion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRegisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRegisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRegisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required int32 TokenType = 1;
 * @return {number}
 */
proto.msg.AccountRegisterDevice.prototype.getTokentype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.AccountRegisterDevice.prototype.setTokentype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountRegisterDevice.prototype.clearTokentype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasTokentype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Token = 2;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountRegisterDevice.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string DeviceModel = 3;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getDevicemodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setDevicemodel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.AccountRegisterDevice.prototype.clearDevicemodel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasDevicemodel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string SystemVersion = 4;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getSystemversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setSystemversion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.AccountRegisterDevice.prototype.clearSystemversion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasSystemversion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string AppVersion = 5;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getAppversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.AccountRegisterDevice.prototype.clearAppversion = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasAppversion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string LangCode = 6;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getLangcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setLangcode = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.AccountRegisterDevice.prototype.clearLangcode = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasLangcode = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUnregisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUnregisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUnregisterDevice.displayName = 'proto.msg.AccountUnregisterDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUnregisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUnregisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUnregisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokentype: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUnregisterDevice;
  return proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUnregisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokentype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUnregisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUnregisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUnregisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 TokenType = 1;
 * @return {number}
 */
proto.msg.AccountUnregisterDevice.prototype.getTokentype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.AccountUnregisterDevice.prototype.setTokentype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUnregisterDevice.prototype.clearTokentype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUnregisterDevice.prototype.hasTokentype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Token = 2;
 * @return {string}
 */
proto.msg.AccountUnregisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountUnregisterDevice.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountUnregisterDevice.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUnregisterDevice.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUpdateProfile.displayName = 'proto.msg.AccountUpdateProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstname: jspb.Message.getField(msg, 1),
    lastname: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateProfile;
  return proto.msg.AccountUpdateProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string FirstName = 1;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateProfile.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUpdateProfile.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateProfile.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string LastName = 2;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateProfile.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountUpdateProfile.prototype.clearLastname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateProfile.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountCheckUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountCheckUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountCheckUsername.displayName = 'proto.msg.AccountCheckUsername';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountCheckUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountCheckUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountCheckUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountCheckUsername;
  return proto.msg.AccountCheckUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountCheckUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountCheckUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountCheckUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountCheckUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string Username = 1;
 * @return {string}
 */
proto.msg.AccountCheckUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountCheckUsername.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountCheckUsername.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountCheckUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUpdateUsername.displayName = 'proto.msg.AccountUpdateUsername';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateUsername;
  return proto.msg.AccountUpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string Username = 1;
 * @return {string}
 */
proto.msg.AccountUpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateUsername.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUpdateUsername.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.msg);

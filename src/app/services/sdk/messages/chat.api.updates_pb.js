/* eslint-disable */
// source: chat.api.updates.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chat_core_types_pb = require('./chat.core.types_pb.js');
goog.object.extend(proto, chat_core_types_pb);
goog.exportSymbol('proto.msg.UpdateAccountPrivacy', null, global);
goog.exportSymbol('proto.msg.UpdateAuthorizationReset', null, global);
goog.exportSymbol('proto.msg.UpdateDialogPinned', null, global);
goog.exportSymbol('proto.msg.UpdateDialogPinnedReorder', null, global);
goog.exportSymbol('proto.msg.UpdateDifference', null, global);
goog.exportSymbol('proto.msg.UpdateDraftMessage', null, global);
goog.exportSymbol('proto.msg.UpdateDraftMessageCleared', null, global);
goog.exportSymbol('proto.msg.UpdateGetDifference', null, global);
goog.exportSymbol('proto.msg.UpdateGetState', null, global);
goog.exportSymbol('proto.msg.UpdateGroupAdmins', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantAdd', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantAdmin', null, global);
goog.exportSymbol('proto.msg.UpdateGroupParticipantDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateGroupPhoto', null, global);
goog.exportSymbol('proto.msg.UpdateLabelDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateLabelItemsAdded', null, global);
goog.exportSymbol('proto.msg.UpdateLabelItemsRemoved', null, global);
goog.exportSymbol('proto.msg.UpdateLabelSet', null, global);
goog.exportSymbol('proto.msg.UpdateMessageEdited', null, global);
goog.exportSymbol('proto.msg.UpdateMessageID', null, global);
goog.exportSymbol('proto.msg.UpdateMessagesDeleted', null, global);
goog.exportSymbol('proto.msg.UpdateNewMessage', null, global);
goog.exportSymbol('proto.msg.UpdateNotifySettings', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryInbox', null, global);
goog.exportSymbol('proto.msg.UpdateReadHistoryOutbox', null, global);
goog.exportSymbol('proto.msg.UpdateReadMessagesContents', null, global);
goog.exportSymbol('proto.msg.UpdateState', null, global);
goog.exportSymbol('proto.msg.UpdateTooLong', null, global);
goog.exportSymbol('proto.msg.UpdateUserPhoto', null, global);
goog.exportSymbol('proto.msg.UpdateUserStatus', null, global);
goog.exportSymbol('proto.msg.UpdateUserTyping', null, global);
goog.exportSymbol('proto.msg.UpdateUsername', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGetState.displayName = 'proto.msg.UpdateGetState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGetDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGetDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGetDifference.displayName = 'proto.msg.UpdateGetDifference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDifference = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateDifference.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateDifference, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDifference.displayName = 'proto.msg.UpdateDifference';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateTooLong = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateTooLong, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateTooLong.displayName = 'proto.msg.UpdateTooLong';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateState.displayName = 'proto.msg.UpdateState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessageID.displayName = 'proto.msg.UpdateMessageID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNewMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNewMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateNewMessage.displayName = 'proto.msg.UpdateNewMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessageEdited = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateMessageEdited, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessageEdited.displayName = 'proto.msg.UpdateMessageEdited';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateMessagesDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateMessagesDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateMessagesDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateMessagesDeleted.displayName = 'proto.msg.UpdateMessagesDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryInbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryInbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadHistoryInbox.displayName = 'proto.msg.UpdateReadHistoryInbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadHistoryOutbox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateReadHistoryOutbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadHistoryOutbox.displayName = 'proto.msg.UpdateReadHistoryOutbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserTyping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserTyping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserTyping.displayName = 'proto.msg.UpdateUserTyping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserStatus.displayName = 'proto.msg.UpdateUserStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUsername.displayName = 'proto.msg.UpdateUsername';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateUserPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateUserPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateUserPhoto.displayName = 'proto.msg.UpdateUserPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateNotifySettings.displayName = 'proto.msg.UpdateNotifySettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantAdd = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantAdd, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantAdd.displayName = 'proto.msg.UpdateGroupParticipantAdd';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantDeleted.displayName = 'proto.msg.UpdateGroupParticipantDeleted';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupParticipantAdmin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupParticipantAdmin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupParticipantAdmin.displayName = 'proto.msg.UpdateGroupParticipantAdmin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupAdmins = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupAdmins, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupAdmins.displayName = 'proto.msg.UpdateGroupAdmins';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateGroupPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateGroupPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateGroupPhoto.displayName = 'proto.msg.UpdateGroupPhoto';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateReadMessagesContents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateReadMessagesContents.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateReadMessagesContents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateReadMessagesContents.displayName = 'proto.msg.UpdateReadMessagesContents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateAuthorizationReset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateAuthorizationReset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateAuthorizationReset.displayName = 'proto.msg.UpdateAuthorizationReset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDraftMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDraftMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDraftMessage.displayName = 'proto.msg.UpdateDraftMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDraftMessageCleared = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDraftMessageCleared, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDraftMessageCleared.displayName = 'proto.msg.UpdateDraftMessageCleared';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDialogPinned = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.UpdateDialogPinned, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDialogPinned.displayName = 'proto.msg.UpdateDialogPinned';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateDialogPinnedReorder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateDialogPinnedReorder.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateDialogPinnedReorder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateDialogPinnedReorder.displayName = 'proto.msg.UpdateDialogPinnedReorder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateAccountPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateAccountPrivacy.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateAccountPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateAccountPrivacy.displayName = 'proto.msg.UpdateAccountPrivacy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelItemsAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelItemsAdded.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelItemsAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelItemsAdded.displayName = 'proto.msg.UpdateLabelItemsAdded';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelItemsRemoved = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelItemsRemoved.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelItemsRemoved, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelItemsRemoved.displayName = 'proto.msg.UpdateLabelItemsRemoved';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelSet.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelSet.displayName = 'proto.msg.UpdateLabelSet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.UpdateLabelDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.UpdateLabelDeleted.repeatedFields_, null);
};
goog.inherits(proto.msg.UpdateLabelDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.msg.UpdateLabelDeleted.displayName = 'proto.msg.UpdateLabelDeleted';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetState;
  return proto.msg.UpdateGetState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetState}
 */
proto.msg.UpdateGetState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGetDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGetDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGetDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    limit: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGetDifference;
  return proto.msg.UpdateGetDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGetDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGetDifference}
 */
proto.msg.UpdateGetDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGetDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGetDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGetDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGetDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int64 From = 1;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getFrom = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.setFrom = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.clearFrom = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGetDifference.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Limit = 2;
 * @return {number}
 */
proto.msg.UpdateGetDifference.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.setLimit = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGetDifference} returns this
 */
proto.msg.UpdateGetDifference.prototype.clearLimit = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGetDifference.prototype.hasLimit = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateDifference.repeatedFields_ = [4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDifference.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDifference.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDifference} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.toObject = function(includeInstance, msg) {
  var f, obj = {
    more: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    maxupdateid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    minupdateid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    updatesList: jspb.Message.toObjectList(msg.getUpdatesList(),
    chat_core_types_pb.UpdateEnvelope.toObject, includeInstance),
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    chat_core_types_pb.User.toObject, includeInstance),
    groupsList: jspb.Message.toObjectList(msg.getGroupsList(),
    chat_core_types_pb.Group.toObject, includeInstance),
    currentupdateid: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDifference;
  return proto.msg.UpdateDifference.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDifference} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDifference}
 */
proto.msg.UpdateDifference.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMore(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupdateid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMinupdateid(value);
      break;
    case 4:
      var value = new chat_core_types_pb.UpdateEnvelope;
      reader.readMessage(value,chat_core_types_pb.UpdateEnvelope.deserializeBinaryFromReader);
      msg.addUpdates(value);
      break;
    case 5:
      var value = new chat_core_types_pb.User;
      reader.readMessage(value,chat_core_types_pb.User.deserializeBinaryFromReader);
      msg.addUsers(value);
      break;
    case 6:
      var value = new chat_core_types_pb.Group;
      reader.readMessage(value,chat_core_types_pb.Group.deserializeBinaryFromReader);
      msg.addGroups(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentupdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDifference.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDifference.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDifference} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDifference.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getUpdatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      chat_core_types_pb.UpdateEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      chat_core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = message.getGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      chat_core_types_pb.Group.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * required bool More = 1;
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.getMore = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMore = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearMore = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.hasMore = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxUpdateID = 2;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMaxupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMaxupdateid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearMaxupdateid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.hasMaxupdateid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 MinUpdateID = 3;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getMinupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setMinupdateid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearMinupdateid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.hasMinupdateid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated UpdateEnvelope Updates = 4;
 * @return {!Array<!proto.msg.UpdateEnvelope>}
 */
proto.msg.UpdateDifference.prototype.getUpdatesList = function() {
  return /** @type{!Array<!proto.msg.UpdateEnvelope>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.UpdateEnvelope, 4));
};


/**
 * @param {!Array<!proto.msg.UpdateEnvelope>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setUpdatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.UpdateEnvelope=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateEnvelope}
 */
proto.msg.UpdateDifference.prototype.addUpdates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.UpdateEnvelope, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearUpdatesList = function() {
  return this.setUpdatesList([]);
};


/**
 * repeated User Users = 5;
 * @return {!Array<!proto.msg.User>}
 */
proto.msg.UpdateDifference.prototype.getUsersList = function() {
  return /** @type{!Array<!proto.msg.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.User, 5));
};


/**
 * @param {!Array<!proto.msg.User>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setUsersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.User=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.User}
 */
proto.msg.UpdateDifference.prototype.addUsers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.User, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearUsersList = function() {
  return this.setUsersList([]);
};


/**
 * repeated Group Groups = 6;
 * @return {!Array<!proto.msg.Group>}
 */
proto.msg.UpdateDifference.prototype.getGroupsList = function() {
  return /** @type{!Array<!proto.msg.Group>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.Group, 6));
};


/**
 * @param {!Array<!proto.msg.Group>} value
 * @return {!proto.msg.UpdateDifference} returns this
*/
proto.msg.UpdateDifference.prototype.setGroupsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.Group=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Group}
 */
proto.msg.UpdateDifference.prototype.addGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.Group, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearGroupsList = function() {
  return this.setGroupsList([]);
};


/**
 * optional int64 CurrentUpdateID = 7;
 * @return {number}
 */
proto.msg.UpdateDifference.prototype.getCurrentupdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.setCurrentupdateid = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDifference} returns this
 */
proto.msg.UpdateDifference.prototype.clearCurrentupdateid = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDifference.prototype.hasCurrentupdateid = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateTooLong.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateTooLong.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateTooLong} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTooLong.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateTooLong}
 */
proto.msg.UpdateTooLong.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateTooLong;
  return proto.msg.UpdateTooLong.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateTooLong} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateTooLong}
 */
proto.msg.UpdateTooLong.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateTooLong.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateTooLong.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateTooLong} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateTooLong.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateState.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.toObject = function(includeInstance, msg) {
  var f, obj = {
    updateid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateState;
  return proto.msg.UpdateState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateState}
 */
proto.msg.UpdateState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * required int64 UpdateID = 1;
 * @return {number}
 */
proto.msg.UpdateState.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateState} returns this
 */
proto.msg.UpdateState.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateState} returns this
 */
proto.msg.UpdateState.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateState.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageID.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    messageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    randomid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageID;
  return proto.msg.UpdateMessageID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageID}
 */
proto.msg.UpdateMessageID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRandomid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageID.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 MessageID = 1;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageID.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 RandomID = 2;
 * @return {number}
 */
proto.msg.UpdateMessageID.prototype.getRandomid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.setRandomid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageID} returns this
 */
proto.msg.UpdateMessageID.prototype.clearRandomid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageID.prototype.hasRandomid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNewMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNewMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNewMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    message: (f = msg.getMessage()) && chat_core_types_pb.UserMessage.toObject(includeInstance, f),
    sender: (f = msg.getSender()) && chat_core_types_pb.User.toObject(includeInstance, f),
    accesshash: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNewMessage;
  return proto.msg.UpdateNewMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNewMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNewMessage}
 */
proto.msg.UpdateNewMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.UserMessage;
      reader.readMessage(value,chat_core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    case 2:
      var value = new chat_core_types_pb.User;
      reader.readMessage(value,chat_core_types_pb.User.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readFixed64String());
      msg.setAccesshash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNewMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNewMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNewMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNewMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.User.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNewMessage.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required UserMessage Message = 1;
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UpdateNewMessage.prototype.getMessage = function() {
  return /** @type{!proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.UserMessage, 1, 1));
};


/**
 * @param {!proto.msg.UserMessage} value
 * @return {!proto.msg.UpdateNewMessage} returns this
*/
proto.msg.UpdateNewMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required User Sender = 2;
 * @return {!proto.msg.User}
 */
proto.msg.UpdateNewMessage.prototype.getSender = function() {
  return /** @type{!proto.msg.User} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.User, 2, 1));
};


/**
 * @param {!proto.msg.User} value
 * @return {!proto.msg.UpdateNewMessage} returns this
*/
proto.msg.UpdateNewMessage.prototype.setSender = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearSender = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasSender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional fixed64 AccessHash = 3;
 * @return {string}
 */
proto.msg.UpdateNewMessage.prototype.getAccesshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.setAccesshash = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNewMessage} returns this
 */
proto.msg.UpdateNewMessage.prototype.clearAccesshash = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNewMessage.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessageEdited.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessageEdited.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessageEdited} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    message: (f = msg.getMessage()) && chat_core_types_pb.UserMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessageEdited;
  return proto.msg.UpdateMessageEdited.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessageEdited} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessageEdited}
 */
proto.msg.UpdateMessageEdited.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.UserMessage;
      reader.readMessage(value,chat_core_types_pb.UserMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessageEdited.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessageEdited.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessageEdited} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessageEdited.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.UserMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessageEdited.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required UserMessage Message = 1;
 * @return {!proto.msg.UserMessage}
 */
proto.msg.UpdateMessageEdited.prototype.getMessage = function() {
  return /** @type{!proto.msg.UserMessage} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.UserMessage, 1, 1));
};


/**
 * @param {!proto.msg.UserMessage} value
 * @return {!proto.msg.UpdateMessageEdited} returns this
*/
proto.msg.UpdateMessageEdited.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessageEdited} returns this
 */
proto.msg.UpdateMessageEdited.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessageEdited.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateMessagesDeleted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateMessagesDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateMessagesDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateMessagesDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateMessagesDeleted;
  return proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateMessagesDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateMessagesDeleted}
 */
proto.msg.UpdateMessagesDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    case 2:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateMessagesDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateMessagesDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateMessagesDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateMessagesDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated int64 MessageIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateMessagesDeleted.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * optional Peer Peer = 2;
 * @return {?proto.msg.Peer}
 */
proto.msg.UpdateMessagesDeleted.prototype.getPeer = function() {
  return /** @type{?proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 2));
};


/**
 * @param {?proto.msg.Peer|undefined} value
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
*/
proto.msg.UpdateMessagesDeleted.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateMessagesDeleted} returns this
 */
proto.msg.UpdateMessagesDeleted.prototype.clearPeer = function() {
  return this.setPeer(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateMessagesDeleted.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryInbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryInbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    maxid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryInbox;
  return proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryInbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryInbox}
 */
proto.msg.UpdateReadHistoryInbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryInbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryInbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryInbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
*/
proto.msg.UpdateReadHistoryInbox.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryInbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.setMaxid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryInbox} returns this
 */
proto.msg.UpdateReadHistoryInbox.prototype.clearMaxid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryInbox.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadHistoryOutbox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    maxid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadHistoryOutbox;
  return proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadHistoryOutbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadHistoryOutbox}
 */
proto.msg.UpdateReadHistoryOutbox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadHistoryOutbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadHistoryOutbox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
*/
proto.msg.UpdateReadHistoryOutbox.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 MaxID = 2;
 * @return {number}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.getMaxid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.setMaxid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadHistoryOutbox} returns this
 */
proto.msg.UpdateReadHistoryOutbox.prototype.clearMaxid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadHistoryOutbox.prototype.hasMaxid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserTyping.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserTyping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserTyping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    action: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    peerid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserTyping;
  return proto.msg.UpdateUserTyping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserTyping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserTyping}
 */
proto.msg.UpdateUserTyping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {!proto.msg.TypingAction} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPeerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserTyping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserTyping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserTyping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserTyping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {!proto.msg.TypingAction} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserTyping.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TypingAction Action = 2;
 * @return {!proto.msg.TypingAction}
 */
proto.msg.UpdateUserTyping.prototype.getAction = function() {
  return /** @type {!proto.msg.TypingAction} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.msg.TypingAction} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setAction = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.clearAction = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasAction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 PeerID = 3;
 * @return {string}
 */
proto.msg.UpdateUserTyping.prototype.getPeerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.setPeerid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserTyping} returns this
 */
proto.msg.UpdateUserTyping.prototype.clearPeerid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserTyping.prototype.hasPeerid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserStatus;
  return proto.msg.UpdateUserStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserStatus}
 */
proto.msg.UpdateUserStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserStatus.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 Status = 2;
 * @return {number}
 */
proto.msg.UpdateUserStatus.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserStatus} returns this
 */
proto.msg.UpdateUserStatus.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserStatus.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    firstname: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    lastname: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    bio: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUsername;
  return proto.msg.UpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUsername}
 */
proto.msg.UpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUsername.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Username = 2;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string FirstName = 3;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setFirstname = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearFirstname = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string LastName = 4;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setLastname = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearLastname = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string Bio = 5;
 * @return {string}
 */
proto.msg.UpdateUsername.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.setBio = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUsername} returns this
 */
proto.msg.UpdateUsername.prototype.clearBio = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUsername.prototype.hasBio = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateUserPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateUserPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateUserPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && chat_core_types_pb.UserPhoto.toObject(includeInstance, f),
    photoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateUserPhoto}
 */
proto.msg.UpdateUserPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateUserPhoto;
  return proto.msg.UpdateUserPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateUserPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateUserPhoto}
 */
proto.msg.UpdateUserPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = new chat_core_types_pb.UserPhoto;
      reader.readMessage(value,chat_core_types_pb.UserPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateUserPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateUserPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateUserPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateUserPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.UserPhoto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateUserPhoto.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateUserPhoto.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateUserPhoto.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserPhoto Photo = 2;
 * @return {?proto.msg.UserPhoto}
 */
proto.msg.UpdateUserPhoto.prototype.getPhoto = function() {
  return /** @type{?proto.msg.UserPhoto} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.UserPhoto, 2));
};


/**
 * @param {?proto.msg.UserPhoto|undefined} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
*/
proto.msg.UpdateUserPhoto.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.UpdateUserPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateUserPhoto} returns this
 */
proto.msg.UpdateUserPhoto.prototype.clearPhotoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateUserPhoto.prototype.hasPhotoid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    notifypeer: (f = msg.getNotifypeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && chat_core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateNotifySettings;
  return proto.msg.UpdateNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateNotifySettings}
 */
proto.msg.UpdateNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 2:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setNotifypeer(value);
      break;
    case 3:
      var value = new chat_core_types_pb.PeerNotifySettings;
      reader.readMessage(value,chat_core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNotifypeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      chat_core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateNotifySettings.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 UserID = 1;
 * @return {string}
 */
proto.msg.UpdateNotifySettings.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Peer NotifyPeer = 2;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateNotifySettings.prototype.getNotifypeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 2, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
*/
proto.msg.UpdateNotifySettings.prototype.setNotifypeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearNotifypeer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasNotifypeer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required PeerNotifySettings Settings = 3;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.UpdateNotifySettings.prototype.getSettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.PeerNotifySettings, 3, 1));
};


/**
 * @param {!proto.msg.PeerNotifySettings} value
 * @return {!proto.msg.UpdateNotifySettings} returns this
*/
proto.msg.UpdateNotifySettings.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateNotifySettings} returns this
 */
proto.msg.UpdateNotifySettings.prototype.clearSettings = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantAdd.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantAdd} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdd.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    groupid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    inviterid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    date: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantAdd}
 */
proto.msg.UpdateGroupParticipantAdd.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantAdd;
  return proto.msg.UpdateGroupParticipantAdd.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantAdd} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantAdd}
 */
proto.msg.UpdateGroupParticipantAdd.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setInviterid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantAdd.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantAdd} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdd.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setGroupid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearGroupid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 InviterID = 3;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getInviterid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setInviterid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearInviterid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasInviterid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int64 Date = 4;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.getDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.setDate = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdd} returns this
 */
proto.msg.UpdateGroupParticipantAdd.prototype.clearDate = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdd.prototype.hasDate = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    groupid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantDeleted}
 */
proto.msg.UpdateGroupParticipantDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantDeleted;
  return proto.msg.UpdateGroupParticipantDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantDeleted}
 */
proto.msg.UpdateGroupParticipantDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setGroupid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.clearGroupid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantDeleted} returns this
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantDeleted.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupParticipantAdmin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupParticipantAdmin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdmin.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    groupid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    isadmin: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupParticipantAdmin}
 */
proto.msg.UpdateGroupParticipantAdmin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupParticipantAdmin;
  return proto.msg.UpdateGroupParticipantAdmin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupParticipantAdmin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupParticipantAdmin}
 */
proto.msg.UpdateGroupParticipantAdmin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsadmin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupParticipantAdmin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupParticipantAdmin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupParticipantAdmin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setGroupid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.clearGroupid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 UserID = 2;
 * @return {string}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bool IsAdmin = 3;
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.getIsadmin = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.setIsadmin = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupParticipantAdmin} returns this
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.clearIsadmin = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupParticipantAdmin.prototype.hasIsadmin = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupAdmins.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupAdmins.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupAdmins} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdmins.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    groupid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    adminenabled: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupAdmins}
 */
proto.msg.UpdateGroupAdmins.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupAdmins;
  return proto.msg.UpdateGroupAdmins.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupAdmins} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupAdmins}
 */
proto.msg.UpdateGroupAdmins.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdminenabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupAdmins.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupAdmins.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupAdmins} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupAdmins.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupAdmins.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupAdmins.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupAdmins.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setGroupid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.clearGroupid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool AdminEnabled = 2;
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.getAdminenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.setAdminenabled = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupAdmins} returns this
 */
proto.msg.UpdateGroupAdmins.prototype.clearAdminenabled = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupAdmins.prototype.hasAdminenabled = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateGroupPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateGroupPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateGroupPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    groupid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    photo: (f = msg.getPhoto()) && chat_core_types_pb.GroupPhoto.toObject(includeInstance, f),
    photoid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateGroupPhoto}
 */
proto.msg.UpdateGroupPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateGroupPhoto;
  return proto.msg.UpdateGroupPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateGroupPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateGroupPhoto}
 */
proto.msg.UpdateGroupPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGroupid(value);
      break;
    case 2:
      var value = new chat_core_types_pb.GroupPhoto;
      reader.readMessage(value,chat_core_types_pb.GroupPhoto.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPhotoid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateGroupPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateGroupPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateGroupPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateGroupPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.GroupPhoto.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64String(
      3,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateGroupPhoto.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateGroupPhoto.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required int64 GroupID = 1;
 * @return {string}
 */
proto.msg.UpdateGroupPhoto.prototype.getGroupid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setGroupid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearGroupid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasGroupid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GroupPhoto Photo = 2;
 * @return {?proto.msg.GroupPhoto}
 */
proto.msg.UpdateGroupPhoto.prototype.getPhoto = function() {
  return /** @type{?proto.msg.GroupPhoto} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.GroupPhoto, 2));
};


/**
 * @param {?proto.msg.GroupPhoto|undefined} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
*/
proto.msg.UpdateGroupPhoto.prototype.setPhoto = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearPhoto = function() {
  return this.setPhoto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 PhotoID = 3;
 * @return {string}
 */
proto.msg.UpdateGroupPhoto.prototype.getPhotoid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.setPhotoid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateGroupPhoto} returns this
 */
proto.msg.UpdateGroupPhoto.prototype.clearPhotoid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateGroupPhoto.prototype.hasPhotoid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateReadMessagesContents.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateReadMessagesContents.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateReadMessagesContents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateReadMessagesContents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadMessagesContents.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateReadMessagesContents}
 */
proto.msg.UpdateReadMessagesContents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateReadMessagesContents;
  return proto.msg.UpdateReadMessagesContents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateReadMessagesContents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateReadMessagesContents}
 */
proto.msg.UpdateReadMessagesContents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    case 2:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateReadMessagesContents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateReadMessagesContents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateReadMessagesContents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateReadMessagesContents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      1,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateReadMessagesContents.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadMessagesContents.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateReadMessagesContents.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadMessagesContents.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated int64 MessageIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateReadMessagesContents.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * required Peer Peer = 2;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateReadMessagesContents.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 2, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
*/
proto.msg.UpdateReadMessagesContents.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateReadMessagesContents} returns this
 */
proto.msg.UpdateReadMessagesContents.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateReadMessagesContents.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateAuthorizationReset.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateAuthorizationReset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateAuthorizationReset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAuthorizationReset.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateAuthorizationReset}
 */
proto.msg.UpdateAuthorizationReset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateAuthorizationReset;
  return proto.msg.UpdateAuthorizationReset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateAuthorizationReset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateAuthorizationReset}
 */
proto.msg.UpdateAuthorizationReset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateAuthorizationReset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateAuthorizationReset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateAuthorizationReset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAuthorizationReset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateAuthorizationReset.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateAuthorizationReset.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateAuthorizationReset.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateAuthorizationReset} returns this
 */
proto.msg.UpdateAuthorizationReset.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateAuthorizationReset.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDraftMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDraftMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDraftMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    message: (f = msg.getMessage()) && chat_core_types_pb.DraftMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDraftMessage}
 */
proto.msg.UpdateDraftMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDraftMessage;
  return proto.msg.UpdateDraftMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDraftMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDraftMessage}
 */
proto.msg.UpdateDraftMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.DraftMessage;
      reader.readMessage(value,chat_core_types_pb.DraftMessage.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDraftMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDraftMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDraftMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.DraftMessage.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDraftMessage.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessage.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDraftMessage.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessage.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required DraftMessage Message = 1;
 * @return {!proto.msg.DraftMessage}
 */
proto.msg.UpdateDraftMessage.prototype.getMessage = function() {
  return /** @type{!proto.msg.DraftMessage} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.DraftMessage, 1, 1));
};


/**
 * @param {!proto.msg.DraftMessage} value
 * @return {!proto.msg.UpdateDraftMessage} returns this
*/
proto.msg.UpdateDraftMessage.prototype.setMessage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessage} returns this
 */
proto.msg.UpdateDraftMessage.prototype.clearMessage = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessage.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDraftMessageCleared.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDraftMessageCleared.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDraftMessageCleared} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessageCleared.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDraftMessageCleared}
 */
proto.msg.UpdateDraftMessageCleared.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDraftMessageCleared;
  return proto.msg.UpdateDraftMessageCleared.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDraftMessageCleared} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDraftMessageCleared}
 */
proto.msg.UpdateDraftMessageCleared.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDraftMessageCleared.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDraftMessageCleared.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDraftMessageCleared} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDraftMessageCleared.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessageCleared.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * optional int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessageCleared.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateDraftMessageCleared.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
*/
proto.msg.UpdateDraftMessageCleared.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDraftMessageCleared} returns this
 */
proto.msg.UpdateDraftMessageCleared.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDraftMessageCleared.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDialogPinned.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDialogPinned.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDialogPinned} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinned.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    pinned: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDialogPinned}
 */
proto.msg.UpdateDialogPinned.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDialogPinned;
  return proto.msg.UpdateDialogPinned.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDialogPinned} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDialogPinned}
 */
proto.msg.UpdateDialogPinned.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDialogPinned.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDialogPinned.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDialogPinned} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinned.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDialogPinned.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDialogPinned.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateDialogPinned.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
*/
proto.msg.UpdateDialogPinned.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool Pinned = 2;
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.setPinned = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinned} returns this
 */
proto.msg.UpdateDialogPinned.prototype.clearPinned = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinned.prototype.hasPinned = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateDialogPinnedReorder.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateDialogPinnedReorder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateDialogPinnedReorder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinnedReorder.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peerList: jspb.Message.toObjectList(msg.getPeerList(),
    chat_core_types_pb.Peer.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateDialogPinnedReorder}
 */
proto.msg.UpdateDialogPinnedReorder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateDialogPinnedReorder;
  return proto.msg.UpdateDialogPinnedReorder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateDialogPinnedReorder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateDialogPinnedReorder}
 */
proto.msg.UpdateDialogPinnedReorder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.addPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateDialogPinnedReorder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateDialogPinnedReorder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateDialogPinnedReorder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeerList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated Peer Peer = 1;
 * @return {!Array<!proto.msg.Peer>}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.getPeerList = function() {
  return /** @type{!Array<!proto.msg.Peer>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.Peer, 1));
};


/**
 * @param {!Array<!proto.msg.Peer>} value
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
*/
proto.msg.UpdateDialogPinnedReorder.prototype.setPeerList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Peer=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateDialogPinnedReorder.prototype.addPeer = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Peer, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateDialogPinnedReorder} returns this
 */
proto.msg.UpdateDialogPinnedReorder.prototype.clearPeerList = function() {
  return this.setPeerList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateAccountPrivacy.repeatedFields_ = [1,2,3,4,5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateAccountPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateAccountPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateAccountPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAccountPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    chatinviteList: jspb.Message.toObjectList(msg.getChatinviteList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance),
    lastseenList: jspb.Message.toObjectList(msg.getLastseenList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance),
    phonenumberList: jspb.Message.toObjectList(msg.getPhonenumberList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance),
    profilephotoList: jspb.Message.toObjectList(msg.getProfilephotoList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance),
    forwardedmessageList: jspb.Message.toObjectList(msg.getForwardedmessageList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance),
    callList: jspb.Message.toObjectList(msg.getCallList(),
    chat_core_types_pb.PrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateAccountPrivacy}
 */
proto.msg.UpdateAccountPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateAccountPrivacy;
  return proto.msg.UpdateAccountPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateAccountPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateAccountPrivacy}
 */
proto.msg.UpdateAccountPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addChatinvite(value);
      break;
    case 2:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addLastseen(value);
      break;
    case 3:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addPhonenumber(value);
      break;
    case 4:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addProfilephoto(value);
      break;
    case 5:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addForwardedmessage(value);
      break;
    case 6:
      var value = new chat_core_types_pb.PrivacyRule;
      reader.readMessage(value,chat_core_types_pb.PrivacyRule.deserializeBinaryFromReader);
      msg.addCall(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateAccountPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateAccountPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateAccountPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateAccountPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getChatinviteList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getLastseenList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getPhonenumberList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getProfilephotoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getForwardedmessageList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
  f = message.getCallList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      chat_core_types_pb.PrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateAccountPrivacy.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateAccountPrivacy.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateAccountPrivacy.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateAccountPrivacy.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated PrivacyRule ChatInvite = 1;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getChatinviteList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 1));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setChatinviteList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addChatinvite = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearChatinviteList = function() {
  return this.setChatinviteList([]);
};


/**
 * repeated PrivacyRule LastSeen = 2;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getLastseenList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 2));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setLastseenList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addLastseen = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearLastseenList = function() {
  return this.setLastseenList([]);
};


/**
 * repeated PrivacyRule PhoneNumber = 3;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getPhonenumberList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 3));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setPhonenumberList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addPhonenumber = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearPhonenumberList = function() {
  return this.setPhonenumberList([]);
};


/**
 * repeated PrivacyRule ProfilePhoto = 4;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getProfilephotoList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 4));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setProfilephotoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addProfilephoto = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearProfilephotoList = function() {
  return this.setProfilephotoList([]);
};


/**
 * repeated PrivacyRule ForwardedMessage = 5;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getForwardedmessageList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 5));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setForwardedmessageList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addForwardedmessage = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearForwardedmessageList = function() {
  return this.setForwardedmessageList([]);
};


/**
 * repeated PrivacyRule Call = 6;
 * @return {!Array<!proto.msg.PrivacyRule>}
 */
proto.msg.UpdateAccountPrivacy.prototype.getCallList = function() {
  return /** @type{!Array<!proto.msg.PrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.PrivacyRule, 6));
};


/**
 * @param {!Array<!proto.msg.PrivacyRule>} value
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
*/
proto.msg.UpdateAccountPrivacy.prototype.setCallList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.msg.PrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.PrivacyRule}
 */
proto.msg.UpdateAccountPrivacy.prototype.addCall = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.msg.PrivacyRule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateAccountPrivacy} returns this
 */
proto.msg.UpdateAccountPrivacy.prototype.clearCallList = function() {
  return this.setCallList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelItemsAdded.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelItemsAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelItemsAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelItemsAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    chat_core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelItemsAdded}
 */
proto.msg.UpdateLabelItemsAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelItemsAdded;
  return proto.msg.UpdateLabelItemsAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelItemsAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelItemsAdded}
 */
proto.msg.UpdateLabelItemsAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    case 5:
      var value = new chat_core_types_pb.Label;
      reader.readMessage(value,chat_core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelItemsAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelItemsAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelItemsAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      3,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      chat_core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsAdded.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsAdded.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
*/
proto.msg.UpdateLabelItemsAdded.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsAdded.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 MessageIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * repeated int32 LabelIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated Label Labels = 5;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelItemsAdded.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.Label, 5));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
*/
proto.msg.UpdateLabelItemsAdded.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelItemsAdded.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsAdded} returns this
 */
proto.msg.UpdateLabelItemsAdded.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelItemsRemoved.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelItemsRemoved.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelItemsRemoved} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsRemoved.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    peer: (f = msg.getPeer()) && chat_core_types_pb.Peer.toObject(includeInstance, f),
    messageidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    chat_core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelItemsRemoved}
 */
proto.msg.UpdateLabelItemsRemoved.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelItemsRemoved;
  return proto.msg.UpdateLabelItemsRemoved.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelItemsRemoved} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelItemsRemoved}
 */
proto.msg.UpdateLabelItemsRemoved.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Peer;
      reader.readMessage(value,chat_core_types_pb.Peer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.addMessageids(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    case 5:
      var value = new chat_core_types_pb.Label;
      reader.readMessage(value,chat_core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelItemsRemoved.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelItemsRemoved} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelItemsRemoved.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.Peer.serializeBinaryToWriter
    );
  }
  f = message.getMessageidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      3,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      4,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      chat_core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * required Peer Peer = 1;
 * @return {!proto.msg.Peer}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getPeer = function() {
  return /** @type{!proto.msg.Peer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.Peer, 1, 1));
};


/**
 * @param {!proto.msg.Peer} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
*/
proto.msg.UpdateLabelItemsRemoved.prototype.setPeer = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearPeer = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int64 MessageIDs = 3;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getMessageidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setMessageidsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addMessageids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearMessageidsList = function() {
  return this.setMessageidsList([]);
};


/**
 * repeated int32 LabelIDs = 4;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


/**
 * repeated Label Labels = 5;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.Label, 5));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
*/
proto.msg.UpdateLabelItemsRemoved.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelItemsRemoved.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelItemsRemoved} returns this
 */
proto.msg.UpdateLabelItemsRemoved.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelSet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelSet.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    labelsList: jspb.Message.toObjectList(msg.getLabelsList(),
    chat_core_types_pb.Label.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelSet}
 */
proto.msg.UpdateLabelSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelSet;
  return proto.msg.UpdateLabelSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelSet}
 */
proto.msg.UpdateLabelSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = new chat_core_types_pb.Label;
      reader.readMessage(value,chat_core_types_pb.Label.deserializeBinaryFromReader);
      msg.addLabels(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chat_core_types_pb.Label.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelSet.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelSet.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelSet.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelSet.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated Label Labels = 1;
 * @return {!Array<!proto.msg.Label>}
 */
proto.msg.UpdateLabelSet.prototype.getLabelsList = function() {
  return /** @type{!Array<!proto.msg.Label>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.Label, 1));
};


/**
 * @param {!Array<!proto.msg.Label>} value
 * @return {!proto.msg.UpdateLabelSet} returns this
*/
proto.msg.UpdateLabelSet.prototype.setLabelsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.Label=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.Label}
 */
proto.msg.UpdateLabelSet.prototype.addLabels = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.Label, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelSet} returns this
 */
proto.msg.UpdateLabelSet.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.UpdateLabelDeleted.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.UpdateLabelDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.UpdateLabelDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.UpdateLabelDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    ucount: (f = jspb.Message.getField(msg, 100)) == null ? undefined : f,
    updateid: (f = jspb.Message.getField(msg, 101)) == null ? undefined : f,
    labelidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.UpdateLabelDeleted}
 */
proto.msg.UpdateLabelDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.UpdateLabelDeleted;
  return proto.msg.UpdateLabelDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.UpdateLabelDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.UpdateLabelDeleted}
 */
proto.msg.UpdateLabelDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 100:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUcount(value);
      break;
    case 101:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUpdateid(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addLabelids(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.UpdateLabelDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.UpdateLabelDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.UpdateLabelDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.UpdateLabelDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 100));
  if (f != null) {
    writer.writeInt32(
      100,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 101));
  if (f != null) {
    writer.writeInt64(
      101,
      f
    );
  }
  f = message.getLabelidsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * required int32 UCount = 100;
 * @return {number}
 */
proto.msg.UpdateLabelDeleted.prototype.getUcount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 100, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setUcount = function(value) {
  return jspb.Message.setField(this, 100, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.clearUcount = function() {
  return jspb.Message.setField(this, 100, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelDeleted.prototype.hasUcount = function() {
  return jspb.Message.getField(this, 100) != null;
};


/**
 * required int64 UpdateID = 101;
 * @return {number}
 */
proto.msg.UpdateLabelDeleted.prototype.getUpdateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 101, 0));
};


/**
 * @param {number} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setUpdateid = function(value) {
  return jspb.Message.setField(this, 101, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.clearUpdateid = function() {
  return jspb.Message.setField(this, 101, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.msg.UpdateLabelDeleted.prototype.hasUpdateid = function() {
  return jspb.Message.getField(this, 101) != null;
};


/**
 * repeated int32 LabelIDs = 1;
 * @return {!Array<number>}
 */
proto.msg.UpdateLabelDeleted.prototype.getLabelidsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.setLabelidsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.addLabelids = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.msg.UpdateLabelDeleted} returns this
 */
proto.msg.UpdateLabelDeleted.prototype.clearLabelidsList = function() {
  return this.setLabelidsList([]);
};


goog.object.extend(exports, proto.msg);

/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var chat_core_types_pb = require('./chat.core.types_pb.js');
goog.exportSymbol('proto.msg.AccountChangePhone', null, global);
goog.exportSymbol('proto.msg.AccountCheckUsername', null, global);
goog.exportSymbol('proto.msg.AccountGetActiveSessions', null, global);
goog.exportSymbol('proto.msg.AccountGetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountGetPrivacy', null, global);
goog.exportSymbol('proto.msg.AccountPrivacyKey', null, global);
goog.exportSymbol('proto.msg.AccountPrivacyRule', null, global);
goog.exportSymbol('proto.msg.AccountPrivacyRules', null, global);
goog.exportSymbol('proto.msg.AccountPrivacyType', null, global);
goog.exportSymbol('proto.msg.AccountRegisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountRemovePhoto', null, global);
goog.exportSymbol('proto.msg.AccountSessions', null, global);
goog.exportSymbol('proto.msg.AccountSetNotifySettings', null, global);
goog.exportSymbol('proto.msg.AccountSetPrivacy', null, global);
goog.exportSymbol('proto.msg.AccountUnregisterDevice', null, global);
goog.exportSymbol('proto.msg.AccountUpdatePhoto', null, global);
goog.exportSymbol('proto.msg.AccountUpdateProfile', null, global);
goog.exportSymbol('proto.msg.AccountUpdateUsername', null, global);
goog.exportSymbol('proto.msg.AccountUploadPhoto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountSetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountSetNotifySettings.displayName = 'proto.msg.AccountSetNotifySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputPeer.toObject(includeInstance, f),
    settings: (f = msg.getSettings()) && chat_core_types_pb.PeerNotifySettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetNotifySettings;
  return proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetNotifySettings}
 */
proto.msg.AccountSetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputPeer;
      reader.readMessage(value,chat_core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    case 2:
      var value = new chat_core_types_pb.PeerNotifySettings;
      reader.readMessage(value,chat_core_types_pb.PeerNotifySettings.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      chat_core_types_pb.PeerNotifySettings.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.AccountSetNotifySettings.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.AccountSetNotifySettings.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.AccountSetNotifySettings.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required PeerNotifySettings Settings = 2;
 * @return {!proto.msg.PeerNotifySettings}
 */
proto.msg.AccountSetNotifySettings.prototype.getSettings = function() {
  return /** @type{!proto.msg.PeerNotifySettings} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.PeerNotifySettings, 2, 1));
};


/** @param {!proto.msg.PeerNotifySettings} value */
proto.msg.AccountSetNotifySettings.prototype.setSettings = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.msg.AccountSetNotifySettings.prototype.clearSettings = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSetNotifySettings.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetNotifySettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetNotifySettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountGetNotifySettings.displayName = 'proto.msg.AccountGetNotifySettings';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetNotifySettings.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetNotifySettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetNotifySettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    peer: (f = msg.getPeer()) && chat_core_types_pb.InputPeer.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetNotifySettings;
  return proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetNotifySettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetNotifySettings}
 */
proto.msg.AccountGetNotifySettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputPeer;
      reader.readMessage(value,chat_core_types_pb.InputPeer.deserializeBinaryFromReader);
      msg.setPeer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetNotifySettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetNotifySettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetNotifySettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetNotifySettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputPeer.serializeBinaryToWriter
    );
  }
};


/**
 * required InputPeer Peer = 1;
 * @return {!proto.msg.InputPeer}
 */
proto.msg.AccountGetNotifySettings.prototype.getPeer = function() {
  return /** @type{!proto.msg.InputPeer} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputPeer, 1, 1));
};


/** @param {!proto.msg.InputPeer} value */
proto.msg.AccountGetNotifySettings.prototype.setPeer = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.AccountGetNotifySettings.prototype.clearPeer = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountGetNotifySettings.prototype.hasPeer = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRegisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountRegisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountRegisterDevice.displayName = 'proto.msg.AccountRegisterDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRegisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRegisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRegisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokentype: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2),
    devicemodel: jspb.Message.getField(msg, 3),
    systemversion: jspb.Message.getField(msg, 4),
    appversion: jspb.Message.getField(msg, 5),
    langcode: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRegisterDevice;
  return proto.msg.AccountRegisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRegisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRegisterDevice}
 */
proto.msg.AccountRegisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokentype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicemodel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemversion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppversion(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLangcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRegisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRegisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRegisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRegisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required int32 TokenType = 1;
 * @return {number}
 */
proto.msg.AccountRegisterDevice.prototype.getTokentype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.AccountRegisterDevice.prototype.setTokentype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountRegisterDevice.prototype.clearTokentype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasTokentype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Token = 2;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountRegisterDevice.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string DeviceModel = 3;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getDevicemodel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setDevicemodel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.AccountRegisterDevice.prototype.clearDevicemodel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasDevicemodel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string SystemVersion = 4;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getSystemversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setSystemversion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.AccountRegisterDevice.prototype.clearSystemversion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasSystemversion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string AppVersion = 5;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getAppversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setAppversion = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.AccountRegisterDevice.prototype.clearAppversion = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasAppversion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string LangCode = 6;
 * @return {string}
 */
proto.msg.AccountRegisterDevice.prototype.getLangcode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.msg.AccountRegisterDevice.prototype.setLangcode = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.AccountRegisterDevice.prototype.clearLangcode = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountRegisterDevice.prototype.hasLangcode = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUnregisterDevice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUnregisterDevice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUnregisterDevice.displayName = 'proto.msg.AccountUnregisterDevice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUnregisterDevice.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUnregisterDevice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUnregisterDevice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokentype: jspb.Message.getField(msg, 1),
    token: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUnregisterDevice;
  return proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUnregisterDevice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUnregisterDevice}
 */
proto.msg.AccountUnregisterDevice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTokentype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUnregisterDevice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUnregisterDevice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUnregisterDevice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUnregisterDevice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 TokenType = 1;
 * @return {number}
 */
proto.msg.AccountUnregisterDevice.prototype.getTokentype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.AccountUnregisterDevice.prototype.setTokentype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUnregisterDevice.prototype.clearTokentype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUnregisterDevice.prototype.hasTokentype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Token = 2;
 * @return {string}
 */
proto.msg.AccountUnregisterDevice.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountUnregisterDevice.prototype.setToken = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountUnregisterDevice.prototype.clearToken = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUnregisterDevice.prototype.hasToken = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUpdateProfile.displayName = 'proto.msg.AccountUpdateProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstname: jspb.Message.getField(msg, 1),
    lastname: jspb.Message.getField(msg, 2),
    bio: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateProfile;
  return proto.msg.AccountUpdateProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateProfile}
 */
proto.msg.AccountUpdateProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBio(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string FirstName = 1;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateProfile.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUpdateProfile.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateProfile.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string LastName = 2;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateProfile.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountUpdateProfile.prototype.clearLastname = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateProfile.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string Bio = 3;
 * @return {string}
 */
proto.msg.AccountUpdateProfile.prototype.getBio = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateProfile.prototype.setBio = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.AccountUpdateProfile.prototype.clearBio = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateProfile.prototype.hasBio = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountCheckUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountCheckUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountCheckUsername.displayName = 'proto.msg.AccountCheckUsername';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountCheckUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountCheckUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountCheckUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountCheckUsername;
  return proto.msg.AccountCheckUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountCheckUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountCheckUsername}
 */
proto.msg.AccountCheckUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountCheckUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountCheckUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountCheckUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountCheckUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string Username = 1;
 * @return {string}
 */
proto.msg.AccountCheckUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountCheckUsername.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountCheckUsername.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountCheckUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdateUsername = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdateUsername, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUpdateUsername.displayName = 'proto.msg.AccountUpdateUsername';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdateUsername.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdateUsername.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdateUsername} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdateUsername;
  return proto.msg.AccountUpdateUsername.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdateUsername} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdateUsername}
 */
proto.msg.AccountUpdateUsername.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdateUsername.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdateUsername.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdateUsername} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdateUsername.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string Username = 1;
 * @return {string}
 */
proto.msg.AccountUpdateUsername.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountUpdateUsername.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountUpdateUsername.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdateUsername.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUploadPhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUploadPhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUploadPhoto.displayName = 'proto.msg.AccountUploadPhoto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUploadPhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUploadPhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUploadPhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUploadPhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    file: (f = msg.getFile()) && chat_core_types_pb.InputFile.toObject(includeInstance, f),
    returnobject: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUploadPhoto}
 */
proto.msg.AccountUploadPhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUploadPhoto;
  return proto.msg.AccountUploadPhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUploadPhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUploadPhoto}
 */
proto.msg.AccountUploadPhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputFile;
      reader.readMessage(value,chat_core_types_pb.InputFile.deserializeBinaryFromReader);
      msg.setFile(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReturnobject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUploadPhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUploadPhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUploadPhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUploadPhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFile();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputFile.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required InputFile File = 1;
 * @return {!proto.msg.InputFile}
 */
proto.msg.AccountUploadPhoto.prototype.getFile = function() {
  return /** @type{!proto.msg.InputFile} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputFile, 1, 1));
};


/** @param {!proto.msg.InputFile} value */
proto.msg.AccountUploadPhoto.prototype.setFile = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.AccountUploadPhoto.prototype.clearFile = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUploadPhoto.prototype.hasFile = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool ReturnObject = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.msg.AccountUploadPhoto.prototype.getReturnobject = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.msg.AccountUploadPhoto.prototype.setReturnobject = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountUploadPhoto.prototype.clearReturnobject = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUploadPhoto.prototype.hasReturnobject = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountUpdatePhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountUpdatePhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountUpdatePhoto.displayName = 'proto.msg.AccountUpdatePhoto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountUpdatePhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountUpdatePhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountUpdatePhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePhoto.toObject = function(includeInstance, msg) {
  var f, obj = {
    photo: (f = msg.getPhoto()) && chat_core_types_pb.InputDocument.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountUpdatePhoto}
 */
proto.msg.AccountUpdatePhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountUpdatePhoto;
  return proto.msg.AccountUpdatePhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountUpdatePhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountUpdatePhoto}
 */
proto.msg.AccountUpdatePhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.InputDocument;
      reader.readMessage(value,chat_core_types_pb.InputDocument.deserializeBinaryFromReader);
      msg.setPhoto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountUpdatePhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountUpdatePhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountUpdatePhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountUpdatePhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoto();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      chat_core_types_pb.InputDocument.serializeBinaryToWriter
    );
  }
};


/**
 * required InputDocument Photo = 1;
 * @return {!proto.msg.InputDocument}
 */
proto.msg.AccountUpdatePhoto.prototype.getPhoto = function() {
  return /** @type{!proto.msg.InputDocument} */ (
    jspb.Message.getWrapperField(this, chat_core_types_pb.InputDocument, 1, 1));
};


/** @param {!proto.msg.InputDocument} value */
proto.msg.AccountUpdatePhoto.prototype.setPhoto = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.AccountUpdatePhoto.prototype.clearPhoto = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountUpdatePhoto.prototype.hasPhoto = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountRemovePhoto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountRemovePhoto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountRemovePhoto.displayName = 'proto.msg.AccountRemovePhoto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountRemovePhoto.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountRemovePhoto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountRemovePhoto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRemovePhoto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountRemovePhoto}
 */
proto.msg.AccountRemovePhoto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountRemovePhoto;
  return proto.msg.AccountRemovePhoto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountRemovePhoto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountRemovePhoto}
 */
proto.msg.AccountRemovePhoto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountRemovePhoto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountRemovePhoto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountRemovePhoto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountRemovePhoto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountChangePhone = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountChangePhone, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountChangePhone.displayName = 'proto.msg.AccountChangePhone';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountChangePhone.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountChangePhone.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountChangePhone} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountChangePhone.toObject = function(includeInstance, msg) {
  var f, obj = {
    phone: jspb.Message.getField(msg, 1),
    phonecodehash: jspb.Message.getField(msg, 2),
    phonecode: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountChangePhone}
 */
proto.msg.AccountChangePhone.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountChangePhone;
  return proto.msg.AccountChangePhone.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountChangePhone} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountChangePhone}
 */
proto.msg.AccountChangePhone.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecodehash(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonecode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountChangePhone.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountChangePhone.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountChangePhone} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountChangePhone.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required string Phone = 1;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.AccountChangePhone.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountChangePhone.prototype.clearPhone = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountChangePhone.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string PhoneCodeHash = 2;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhonecodehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.AccountChangePhone.prototype.setPhonecodehash = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountChangePhone.prototype.clearPhonecodehash = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountChangePhone.prototype.hasPhonecodehash = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string PhoneCode = 3;
 * @return {string}
 */
proto.msg.AccountChangePhone.prototype.getPhonecode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.AccountChangePhone.prototype.setPhonecode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.AccountChangePhone.prototype.clearPhonecode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountChangePhone.prototype.hasPhonecode = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSetPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountSetPrivacy.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountSetPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountSetPrivacy.displayName = 'proto.msg.AccountSetPrivacy';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountSetPrivacy.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSetPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSetPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSetPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.msg.AccountPrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSetPrivacy}
 */
proto.msg.AccountSetPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSetPrivacy;
  return proto.msg.AccountSetPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSetPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSetPrivacy}
 */
proto.msg.AccountSetPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.AccountPrivacyKey} */ (reader.readEnum());
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.msg.AccountPrivacyRule;
      reader.readMessage(value,proto.msg.AccountPrivacyRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSetPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSetPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSetPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSetPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.AccountPrivacyKey} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.msg.AccountPrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * required AccountPrivacyKey Key = 1;
 * @return {!proto.msg.AccountPrivacyKey}
 */
proto.msg.AccountSetPrivacy.prototype.getKey = function() {
  return /** @type {!proto.msg.AccountPrivacyKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msg.AccountPrivacyKey} value */
proto.msg.AccountSetPrivacy.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountSetPrivacy.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSetPrivacy.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AccountPrivacyRule Rules = 2;
 * @return {!Array.<!proto.msg.AccountPrivacyRule>}
 */
proto.msg.AccountSetPrivacy.prototype.getRulesList = function() {
  return /** @type{!Array.<!proto.msg.AccountPrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.AccountPrivacyRule, 2));
};


/** @param {!Array.<!proto.msg.AccountPrivacyRule>} value */
proto.msg.AccountSetPrivacy.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.msg.AccountPrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.AccountPrivacyRule}
 */
proto.msg.AccountSetPrivacy.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.msg.AccountPrivacyRule, opt_index);
};


proto.msg.AccountSetPrivacy.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetPrivacy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetPrivacy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountGetPrivacy.displayName = 'proto.msg.AccountGetPrivacy';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetPrivacy.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetPrivacy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetPrivacy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPrivacy.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetPrivacy}
 */
proto.msg.AccountGetPrivacy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetPrivacy;
  return proto.msg.AccountGetPrivacy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetPrivacy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetPrivacy}
 */
proto.msg.AccountGetPrivacy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.AccountPrivacyKey} */ (reader.readEnum());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetPrivacy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetPrivacy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetPrivacy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetPrivacy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.AccountPrivacyKey} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * required AccountPrivacyKey Key = 1;
 * @return {!proto.msg.AccountPrivacyKey}
 */
proto.msg.AccountGetPrivacy.prototype.getKey = function() {
  return /** @type {!proto.msg.AccountPrivacyKey} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msg.AccountPrivacyKey} value */
proto.msg.AccountGetPrivacy.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountGetPrivacy.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountGetPrivacy.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountGetActiveSessions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountGetActiveSessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountGetActiveSessions.displayName = 'proto.msg.AccountGetActiveSessions';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountGetActiveSessions.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountGetActiveSessions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountGetActiveSessions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetActiveSessions.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountGetActiveSessions}
 */
proto.msg.AccountGetActiveSessions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountGetActiveSessions;
  return proto.msg.AccountGetActiveSessions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountGetActiveSessions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountGetActiveSessions}
 */
proto.msg.AccountGetActiveSessions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountGetActiveSessions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountGetActiveSessions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountGetActiveSessions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountGetActiveSessions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountSessions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountSessions.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountSessions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountSessions.displayName = 'proto.msg.AccountSessions';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountSessions.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountSessions.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountSessions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountSessions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSessions.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionsList: jspb.Message.toObjectList(msg.getSessionsList(),
    chat_core_types_pb.ActiveSession.toObject, includeInstance),
    activeauthid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountSessions}
 */
proto.msg.AccountSessions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountSessions;
  return proto.msg.AccountSessions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountSessions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountSessions}
 */
proto.msg.AccountSessions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new chat_core_types_pb.ActiveSession;
      reader.readMessage(value,chat_core_types_pb.ActiveSession.deserializeBinaryFromReader);
      msg.addSessions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setActiveauthid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountSessions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountSessions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountSessions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountSessions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSessionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      chat_core_types_pb.ActiveSession.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated ActiveSession Sessions = 1;
 * @return {!Array.<!proto.msg.ActiveSession>}
 */
proto.msg.AccountSessions.prototype.getSessionsList = function() {
  return /** @type{!Array.<!proto.msg.ActiveSession>} */ (
    jspb.Message.getRepeatedWrapperField(this, chat_core_types_pb.ActiveSession, 1));
};


/** @param {!Array.<!proto.msg.ActiveSession>} value */
proto.msg.AccountSessions.prototype.setSessionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.ActiveSession=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.ActiveSession}
 */
proto.msg.AccountSessions.prototype.addSessions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.ActiveSession, opt_index);
};


proto.msg.AccountSessions.prototype.clearSessionsList = function() {
  this.setSessionsList([]);
};


/**
 * required int64 ActiveAuthID = 2;
 * @return {number}
 */
proto.msg.AccountSessions.prototype.getActiveauthid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.AccountSessions.prototype.setActiveauthid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountSessions.prototype.clearActiveauthid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountSessions.prototype.hasActiveauthid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountPrivacyRules = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.msg.AccountPrivacyRules.repeatedFields_, null);
};
goog.inherits(proto.msg.AccountPrivacyRules, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountPrivacyRules.displayName = 'proto.msg.AccountPrivacyRules';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.msg.AccountPrivacyRules.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountPrivacyRules.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountPrivacyRules.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountPrivacyRules} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRules.toObject = function(includeInstance, msg) {
  var f, obj = {
    rulesList: jspb.Message.toObjectList(msg.getRulesList(),
    proto.msg.AccountPrivacyRule.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountPrivacyRules}
 */
proto.msg.AccountPrivacyRules.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountPrivacyRules;
  return proto.msg.AccountPrivacyRules.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountPrivacyRules} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountPrivacyRules}
 */
proto.msg.AccountPrivacyRules.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.AccountPrivacyRule;
      reader.readMessage(value,proto.msg.AccountPrivacyRule.deserializeBinaryFromReader);
      msg.addRules(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountPrivacyRules.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountPrivacyRules.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountPrivacyRules} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRules.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRulesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.msg.AccountPrivacyRule.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountPrivacyRule Rules = 1;
 * @return {!Array.<!proto.msg.AccountPrivacyRule>}
 */
proto.msg.AccountPrivacyRules.prototype.getRulesList = function() {
  return /** @type{!Array.<!proto.msg.AccountPrivacyRule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.msg.AccountPrivacyRule, 1));
};


/** @param {!Array.<!proto.msg.AccountPrivacyRule>} value */
proto.msg.AccountPrivacyRules.prototype.setRulesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.msg.AccountPrivacyRule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.msg.AccountPrivacyRule}
 */
proto.msg.AccountPrivacyRules.prototype.addRules = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.msg.AccountPrivacyRule, opt_index);
};


proto.msg.AccountPrivacyRules.prototype.clearRulesList = function() {
  this.setRulesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.AccountPrivacyRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.AccountPrivacyRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.AccountPrivacyRule.displayName = 'proto.msg.AccountPrivacyRule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.AccountPrivacyRule.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.AccountPrivacyRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.AccountPrivacyRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    privacytype: jspb.Message.getField(msg, 1),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.AccountPrivacyRule}
 */
proto.msg.AccountPrivacyRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.AccountPrivacyRule;
  return proto.msg.AccountPrivacyRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.AccountPrivacyRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.AccountPrivacyRule}
 */
proto.msg.AccountPrivacyRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.AccountPrivacyType} */ (reader.readEnum());
      msg.setPrivacytype(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.AccountPrivacyRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.AccountPrivacyRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.AccountPrivacyRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.AccountPrivacyRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.AccountPrivacyType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required AccountPrivacyType PrivacyType = 1;
 * @return {!proto.msg.AccountPrivacyType}
 */
proto.msg.AccountPrivacyRule.prototype.getPrivacytype = function() {
  return /** @type {!proto.msg.AccountPrivacyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msg.AccountPrivacyType} value */
proto.msg.AccountPrivacyRule.prototype.setPrivacytype = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.AccountPrivacyRule.prototype.clearPrivacytype = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountPrivacyRule.prototype.hasPrivacytype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes Data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.AccountPrivacyRule.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes Data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.msg.AccountPrivacyRule.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * required bytes Data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.msg.AccountPrivacyRule.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.AccountPrivacyRule.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.AccountPrivacyRule.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.AccountPrivacyRule.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.msg.AccountPrivacyKey = {
  ACCOUNTPRIVACYKEYNONE: 0,
  ACCOUNTPRIVACYKEYCHATINVITE: 1,
  ACCOUNTPRIVACYKEYSTATUSTIMESTAMP: 2,
  ACCOUNTPRIVACYKEYPHONECALL: 3
};

/**
 * @enum {number}
 */
proto.msg.AccountPrivacyType = {
  ACCOUNTPRIVACYTYPEALLOWALL: 0,
  ACCOUNTPRIVACYTYPEALLOWCONTACTS: 1,
  ACCOUNTPRIVACYTYPEALLOWUSERS: 2,
  ACCOUNTPRIVACYTYPEDISALLOWALL: 3,
  ACCOUNTPRIVACYTYPEDISALLOWCONTACTS: 4,
  ACCOUNTPRIVACYTYPEDISALLOWUSERS: 5
};

goog.object.extend(exports, proto.msg);

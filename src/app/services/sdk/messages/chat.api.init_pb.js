/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msg.InitAuthCompleted', null, global);
goog.exportSymbol('proto.msg.InitAuthCompleted.Statuses', null, global);
goog.exportSymbol('proto.msg.InitBindUser', null, global);
goog.exportSymbol('proto.msg.InitCompleteAuth', null, global);
goog.exportSymbol('proto.msg.InitCompleteAuthInternal', null, global);
goog.exportSymbol('proto.msg.InitConnect', null, global);
goog.exportSymbol('proto.msg.InitConnectTest', null, global);
goog.exportSymbol('proto.msg.InitResponse', null, global);
goog.exportSymbol('proto.msg.InitTestAuth', null, global);
goog.exportSymbol('proto.msg.InitUserBound', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitConnect = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitConnect, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitConnect.displayName = 'proto.msg.InitConnect';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitConnect.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitConnect.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitConnect} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitConnect.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientnonce: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitConnect}
 */
proto.msg.InitConnect.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitConnect;
  return proto.msg.InitConnect.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitConnect} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitConnect}
 */
proto.msg.InitConnect.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setClientnonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitConnect.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitConnect.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitConnect} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitConnect.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
};


/**
 * required fixed64 ClientNonce = 1;
 * @return {number}
 */
proto.msg.InitConnect.prototype.getClientnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitConnect.prototype.setClientnonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitConnect.prototype.clearClientnonce = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitConnect.prototype.hasClientnonce = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitCompleteAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitCompleteAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitCompleteAuth.displayName = 'proto.msg.InitCompleteAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitCompleteAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitCompleteAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitCompleteAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitCompleteAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientnonce: jspb.Message.getField(msg, 1),
    servernonce: jspb.Message.getField(msg, 2),
    clientdhpubkey: msg.getClientdhpubkey_asB64(),
    p: jspb.Message.getField(msg, 6),
    q: jspb.Message.getField(msg, 7),
    encryptedpayload: msg.getEncryptedpayload_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitCompleteAuth}
 */
proto.msg.InitCompleteAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitCompleteAuth;
  return proto.msg.InitCompleteAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitCompleteAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitCompleteAuth}
 */
proto.msg.InitCompleteAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setClientnonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setServernonce(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setClientdhpubkey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setP(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setQ(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEncryptedpayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitCompleteAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitCompleteAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitCompleteAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitCompleteAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFixed64(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFixed64(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * required fixed64 ClientNonce = 1;
 * @return {number}
 */
proto.msg.InitCompleteAuth.prototype.getClientnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitCompleteAuth.prototype.setClientnonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitCompleteAuth.prototype.clearClientnonce = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasClientnonce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 ServerNonce = 2;
 * @return {number}
 */
proto.msg.InitCompleteAuth.prototype.getServernonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.InitCompleteAuth.prototype.setServernonce = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InitCompleteAuth.prototype.clearServernonce = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasServernonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes ClientDHPubKey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InitCompleteAuth.prototype.getClientdhpubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes ClientDHPubKey = 5;
 * This is a type-conversion wrapper around `getClientdhpubkey()`
 * @return {string}
 */
proto.msg.InitCompleteAuth.prototype.getClientdhpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getClientdhpubkey()));
};


/**
 * required bytes ClientDHPubKey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getClientdhpubkey()`
 * @return {!Uint8Array}
 */
proto.msg.InitCompleteAuth.prototype.getClientdhpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getClientdhpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.InitCompleteAuth.prototype.setClientdhpubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.InitCompleteAuth.prototype.clearClientdhpubkey = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasClientdhpubkey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required fixed64 P = 6;
 * @return {number}
 */
proto.msg.InitCompleteAuth.prototype.getP = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.msg.InitCompleteAuth.prototype.setP = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.InitCompleteAuth.prototype.clearP = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasP = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required fixed64 Q = 7;
 * @return {number}
 */
proto.msg.InitCompleteAuth.prototype.getQ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.msg.InitCompleteAuth.prototype.setQ = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.msg.InitCompleteAuth.prototype.clearQ = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasQ = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required bytes EncryptedPayload = 8;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InitCompleteAuth.prototype.getEncryptedpayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * required bytes EncryptedPayload = 8;
 * This is a type-conversion wrapper around `getEncryptedpayload()`
 * @return {string}
 */
proto.msg.InitCompleteAuth.prototype.getEncryptedpayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEncryptedpayload()));
};


/**
 * required bytes EncryptedPayload = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEncryptedpayload()`
 * @return {!Uint8Array}
 */
proto.msg.InitCompleteAuth.prototype.getEncryptedpayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEncryptedpayload()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.InitCompleteAuth.prototype.setEncryptedpayload = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.msg.InitCompleteAuth.prototype.clearEncryptedpayload = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuth.prototype.hasEncryptedpayload = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitConnectTest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitConnectTest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitConnectTest.displayName = 'proto.msg.InitConnectTest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitConnectTest.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitConnectTest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitConnectTest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitConnectTest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitConnectTest}
 */
proto.msg.InitConnectTest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitConnectTest;
  return proto.msg.InitConnectTest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitConnectTest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitConnectTest}
 */
proto.msg.InitConnectTest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitConnectTest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitConnectTest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitConnectTest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitConnectTest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitTestAuth = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitTestAuth, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitTestAuth.displayName = 'proto.msg.InitTestAuth';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitTestAuth.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitTestAuth.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitTestAuth} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitTestAuth.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: jspb.Message.getField(msg, 1),
    authkey: msg.getAuthkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitTestAuth}
 */
proto.msg.InitTestAuth.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitTestAuth;
  return proto.msg.InitTestAuth.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitTestAuth} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitTestAuth}
 */
proto.msg.InitTestAuth.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuthid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAuthkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitTestAuth.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitTestAuth.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitTestAuth} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitTestAuth.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * required int64 AuthID = 1;
 * @return {number}
 */
proto.msg.InitTestAuth.prototype.getAuthid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitTestAuth.prototype.setAuthid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitTestAuth.prototype.clearAuthid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitTestAuth.prototype.hasAuthid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bytes AuthKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InitTestAuth.prototype.getAuthkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * required bytes AuthKey = 2;
 * This is a type-conversion wrapper around `getAuthkey()`
 * @return {string}
 */
proto.msg.InitTestAuth.prototype.getAuthkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAuthkey()));
};


/**
 * required bytes AuthKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAuthkey()`
 * @return {!Uint8Array}
 */
proto.msg.InitTestAuth.prototype.getAuthkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAuthkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.InitTestAuth.prototype.setAuthkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InitTestAuth.prototype.clearAuthkey = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitTestAuth.prototype.hasAuthkey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitResponse.displayName = 'proto.msg.InitResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientnonce: jspb.Message.getField(msg, 1),
    servernonce: jspb.Message.getField(msg, 2),
    rsapubkeyfingerprint: jspb.Message.getField(msg, 3),
    dhgroupfingerprint: jspb.Message.getField(msg, 4),
    pq: jspb.Message.getField(msg, 5),
    servertimestamp: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitResponse}
 */
proto.msg.InitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitResponse;
  return proto.msg.InitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitResponse}
 */
proto.msg.InitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setClientnonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setServernonce(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setRsapubkeyfingerprint(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setDhgroupfingerprint(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setPq(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServertimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeFixed64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFixed64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
};


/**
 * required fixed64 ClientNonce = 1;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getClientnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setClientnonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitResponse.prototype.clearClientnonce = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasClientnonce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 ServerNonce = 2;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getServernonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setServernonce = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InitResponse.prototype.clearServernonce = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasServernonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required fixed64 RSAPubKeyFingerPrint = 3;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getRsapubkeyfingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setRsapubkeyfingerprint = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InitResponse.prototype.clearRsapubkeyfingerprint = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasRsapubkeyfingerprint = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required fixed64 DHGroupFingerPrint = 4;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getDhgroupfingerprint = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setDhgroupfingerprint = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.InitResponse.prototype.clearDhgroupfingerprint = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasDhgroupfingerprint = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required fixed64 PQ = 5;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getPq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setPq = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.InitResponse.prototype.clearPq = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasPq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int64 ServerTimestamp = 6;
 * @return {number}
 */
proto.msg.InitResponse.prototype.getServertimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.msg.InitResponse.prototype.setServertimestamp = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.msg.InitResponse.prototype.clearServertimestamp = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitResponse.prototype.hasServertimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitCompleteAuthInternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitCompleteAuthInternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitCompleteAuthInternal.displayName = 'proto.msg.InitCompleteAuthInternal';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitCompleteAuthInternal.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitCompleteAuthInternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitCompleteAuthInternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitCompleteAuthInternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    secretnonce: msg.getSecretnonce_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitCompleteAuthInternal}
 */
proto.msg.InitCompleteAuthInternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitCompleteAuthInternal;
  return proto.msg.InitCompleteAuthInternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitCompleteAuthInternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitCompleteAuthInternal}
 */
proto.msg.InitCompleteAuthInternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSecretnonce(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitCompleteAuthInternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitCompleteAuthInternal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitCompleteAuthInternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitCompleteAuthInternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * required bytes SecretNonce = 1;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InitCompleteAuthInternal.prototype.getSecretnonce = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * required bytes SecretNonce = 1;
 * This is a type-conversion wrapper around `getSecretnonce()`
 * @return {string}
 */
proto.msg.InitCompleteAuthInternal.prototype.getSecretnonce_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSecretnonce()));
};


/**
 * required bytes SecretNonce = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecretnonce()`
 * @return {!Uint8Array}
 */
proto.msg.InitCompleteAuthInternal.prototype.getSecretnonce_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSecretnonce()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.InitCompleteAuthInternal.prototype.setSecretnonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitCompleteAuthInternal.prototype.clearSecretnonce = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitCompleteAuthInternal.prototype.hasSecretnonce = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitAuthCompleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitAuthCompleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitAuthCompleted.displayName = 'proto.msg.InitAuthCompleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitAuthCompleted.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitAuthCompleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitAuthCompleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitAuthCompleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientnonce: jspb.Message.getField(msg, 1),
    servernonce: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    secrethash: jspb.Message.getField(msg, 4),
    serverdhpubkey: msg.getServerdhpubkey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitAuthCompleted}
 */
proto.msg.InitAuthCompleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitAuthCompleted;
  return proto.msg.InitAuthCompleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitAuthCompleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitAuthCompleted}
 */
proto.msg.InitAuthCompleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setClientnonce(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setServernonce(value);
      break;
    case 3:
      var value = /** @type {!proto.msg.InitAuthCompleted.Statuses} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setSecrethash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setServerdhpubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitAuthCompleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitAuthCompleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitAuthCompleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitAuthCompleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFixed64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFixed64(
      2,
      f
    );
  }
  f = /** @type {!proto.msg.InitAuthCompleted.Statuses} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFixed64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.msg.InitAuthCompleted.Statuses = {
  OK: 0,
  FAIL: 1,
  RETRY: 2
};

/**
 * required fixed64 ClientNonce = 1;
 * @return {number}
 */
proto.msg.InitAuthCompleted.prototype.getClientnonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitAuthCompleted.prototype.setClientnonce = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitAuthCompleted.prototype.clearClientnonce = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitAuthCompleted.prototype.hasClientnonce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required fixed64 ServerNonce = 2;
 * @return {number}
 */
proto.msg.InitAuthCompleted.prototype.getServernonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.InitAuthCompleted.prototype.setServernonce = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InitAuthCompleted.prototype.clearServernonce = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitAuthCompleted.prototype.hasServernonce = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Statuses Status = 3;
 * @return {!proto.msg.InitAuthCompleted.Statuses}
 */
proto.msg.InitAuthCompleted.prototype.getStatus = function() {
  return /** @type {!proto.msg.InitAuthCompleted.Statuses} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.msg.InitAuthCompleted.Statuses} value */
proto.msg.InitAuthCompleted.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InitAuthCompleted.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitAuthCompleted.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required fixed64 SecretHash = 4;
 * @return {number}
 */
proto.msg.InitAuthCompleted.prototype.getSecrethash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.InitAuthCompleted.prototype.setSecrethash = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.InitAuthCompleted.prototype.clearSecrethash = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitAuthCompleted.prototype.hasSecrethash = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes ServerDHPubKey = 5;
 * @return {!(string|Uint8Array)}
 */
proto.msg.InitAuthCompleted.prototype.getServerdhpubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes ServerDHPubKey = 5;
 * This is a type-conversion wrapper around `getServerdhpubkey()`
 * @return {string}
 */
proto.msg.InitAuthCompleted.prototype.getServerdhpubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getServerdhpubkey()));
};


/**
 * required bytes ServerDHPubKey = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getServerdhpubkey()`
 * @return {!Uint8Array}
 */
proto.msg.InitAuthCompleted.prototype.getServerdhpubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getServerdhpubkey()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.InitAuthCompleted.prototype.setServerdhpubkey = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.InitAuthCompleted.prototype.clearServerdhpubkey = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitAuthCompleted.prototype.hasServerdhpubkey = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitBindUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitBindUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitBindUser.displayName = 'proto.msg.InitBindUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitBindUser.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitBindUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitBindUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitBindUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    authkey: jspb.Message.getField(msg, 1),
    username: jspb.Message.getField(msg, 2),
    phone: jspb.Message.getField(msg, 3),
    firstname: jspb.Message.getField(msg, 4),
    lastname: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitBindUser}
 */
proto.msg.InitBindUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitBindUser;
  return proto.msg.InitBindUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitBindUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitBindUser}
 */
proto.msg.InitBindUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAuthkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitBindUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitBindUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitBindUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitBindUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required string AuthKey = 1;
 * @return {string}
 */
proto.msg.InitBindUser.prototype.getAuthkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.msg.InitBindUser.prototype.setAuthkey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitBindUser.prototype.clearAuthkey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitBindUser.prototype.hasAuthkey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string Username = 2;
 * @return {string}
 */
proto.msg.InitBindUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.msg.InitBindUser.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.InitBindUser.prototype.clearUsername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitBindUser.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string Phone = 3;
 * @return {string}
 */
proto.msg.InitBindUser.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.msg.InitBindUser.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.InitBindUser.prototype.clearPhone = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitBindUser.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string FirstName = 4;
 * @return {string}
 */
proto.msg.InitBindUser.prototype.getFirstname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.msg.InitBindUser.prototype.setFirstname = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.InitBindUser.prototype.clearFirstname = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitBindUser.prototype.hasFirstname = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string LastName = 5;
 * @return {string}
 */
proto.msg.InitBindUser.prototype.getLastname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.msg.InitBindUser.prototype.setLastname = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.msg.InitBindUser.prototype.clearLastname = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitBindUser.prototype.hasLastname = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.InitUserBound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.InitUserBound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.InitUserBound.displayName = 'proto.msg.InitUserBound';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.InitUserBound.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.InitUserBound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.InitUserBound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitUserBound.toObject = function(includeInstance, msg) {
  var f, obj = {
    authid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.InitUserBound}
 */
proto.msg.InitUserBound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.InitUserBound;
  return proto.msg.InitUserBound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.InitUserBound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.InitUserBound}
 */
proto.msg.InitUserBound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAuthid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.InitUserBound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.InitUserBound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.InitUserBound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.InitUserBound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * required int64 AuthID = 1;
 * @return {number}
 */
proto.msg.InitUserBound.prototype.getAuthid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.InitUserBound.prototype.setAuthid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.InitUserBound.prototype.clearAuthid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.InitUserBound.prototype.hasAuthid = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.msg);

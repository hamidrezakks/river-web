/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.msg.FileGetPart', null, global);
goog.exportSymbol('proto.msg.FileLocation', null, global);
goog.exportSymbol('proto.msg.FilePart', null, global);
goog.exportSymbol('proto.msg.FileSavePart', null, global);
goog.exportSymbol('proto.msg.FileType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.FileSavePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.FileSavePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.FileSavePart.displayName = 'proto.msg.FileSavePart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.FileSavePart.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.FileSavePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.FileSavePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileSavePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    fileid: jspb.Message.getField(msg, 1),
    partid: jspb.Message.getField(msg, 2),
    totalparts: jspb.Message.getField(msg, 3),
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.FileSavePart}
 */
proto.msg.FileSavePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.FileSavePart;
  return proto.msg.FileSavePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.FileSavePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.FileSavePart}
 */
proto.msg.FileSavePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalparts(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.FileSavePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.FileSavePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.FileSavePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileSavePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required int64 FileID = 1;
 * @return {number}
 */
proto.msg.FileSavePart.prototype.getFileid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.FileSavePart.prototype.setFileid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.FileSavePart.prototype.clearFileid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileSavePart.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 PartID = 2;
 * @return {number}
 */
proto.msg.FileSavePart.prototype.getPartid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.FileSavePart.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.FileSavePart.prototype.clearPartid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileSavePart.prototype.hasPartid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 TotalParts = 3;
 * @return {number}
 */
proto.msg.FileSavePart.prototype.getTotalparts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.FileSavePart.prototype.setTotalparts = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.FileSavePart.prototype.clearTotalparts = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileSavePart.prototype.hasTotalparts = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bytes Bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.FileSavePart.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * required bytes Bytes = 4;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.msg.FileSavePart.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * required bytes Bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.msg.FileSavePart.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.FileSavePart.prototype.setBytes = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.FileSavePart.prototype.clearBytes = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileSavePart.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.FileGetPart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.FileGetPart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.FileGetPart.displayName = 'proto.msg.FileGetPart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.FileGetPart.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.FileGetPart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.FileGetPart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileGetPart.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && proto.msg.FileLocation.toObject(includeInstance, f),
    partid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.FileGetPart}
 */
proto.msg.FileGetPart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.FileGetPart;
  return proto.msg.FileGetPart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.FileGetPart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.FileGetPart}
 */
proto.msg.FileGetPart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.msg.FileLocation;
      reader.readMessage(value,proto.msg.FileLocation.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.FileGetPart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.FileGetPart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.FileGetPart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileGetPart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.msg.FileLocation.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required FileLocation Location = 1;
 * @return {!proto.msg.FileLocation}
 */
proto.msg.FileGetPart.prototype.getLocation = function() {
  return /** @type{!proto.msg.FileLocation} */ (
    jspb.Message.getWrapperField(this, proto.msg.FileLocation, 1, 1));
};


/** @param {!proto.msg.FileLocation} value */
proto.msg.FileGetPart.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.msg.FileGetPart.prototype.clearLocation = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileGetPart.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 PartID = 2;
 * @return {number}
 */
proto.msg.FileGetPart.prototype.getPartid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.FileGetPart.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.FileGetPart.prototype.clearPartid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileGetPart.prototype.hasPartid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.FileLocation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.FileLocation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.FileLocation.displayName = 'proto.msg.FileLocation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.FileLocation.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.FileLocation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.FileLocation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileLocation.toObject = function(includeInstance, msg) {
  var f, obj = {
    partitionid: jspb.Message.getField(msg, 1),
    fileid: jspb.Message.getField(msg, 2),
    accesshash: jspb.Message.getField(msg, 3),
    totalparts: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.FileLocation}
 */
proto.msg.FileLocation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.FileLocation;
  return proto.msg.FileLocation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.FileLocation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.FileLocation}
 */
proto.msg.FileLocation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPartitionid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFileid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccesshash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTotalparts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.FileLocation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.FileLocation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.FileLocation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FileLocation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * required int64 PartitionID = 1;
 * @return {number}
 */
proto.msg.FileLocation.prototype.getPartitionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.msg.FileLocation.prototype.setPartitionid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.FileLocation.prototype.clearPartitionid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileLocation.prototype.hasPartitionid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 FileID = 2;
 * @return {number}
 */
proto.msg.FileLocation.prototype.getFileid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.FileLocation.prototype.setFileid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.FileLocation.prototype.clearFileid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileLocation.prototype.hasFileid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 AccessHash = 3;
 * @return {number}
 */
proto.msg.FileLocation.prototype.getAccesshash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.FileLocation.prototype.setAccesshash = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.FileLocation.prototype.clearAccesshash = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileLocation.prototype.hasAccesshash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 TotalParts = 4;
 * @return {number}
 */
proto.msg.FileLocation.prototype.getTotalparts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.msg.FileLocation.prototype.setTotalparts = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.FileLocation.prototype.clearTotalparts = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FileLocation.prototype.hasTotalparts = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.msg.FilePart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.msg.FilePart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.msg.FilePart.displayName = 'proto.msg.FilePart';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.msg.FilePart.prototype.toObject = function(opt_includeInstance) {
  return proto.msg.FilePart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.msg.FilePart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FilePart.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    modifiedtime: jspb.Message.getField(msg, 2),
    partid: jspb.Message.getField(msg, 3),
    bytes: msg.getBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.msg.FilePart}
 */
proto.msg.FilePart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.msg.FilePart;
  return proto.msg.FilePart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.msg.FilePart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.msg.FilePart}
 */
proto.msg.FilePart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.msg.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModifiedtime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPartid(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.msg.FilePart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.msg.FilePart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.msg.FilePart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.msg.FilePart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.msg.FileType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * required FileType Type = 1;
 * @return {!proto.msg.FileType}
 */
proto.msg.FilePart.prototype.getType = function() {
  return /** @type {!proto.msg.FileType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.msg.FileType} value */
proto.msg.FilePart.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.msg.FilePart.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FilePart.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 ModifiedTime = 2;
 * @return {number}
 */
proto.msg.FilePart.prototype.getModifiedtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.msg.FilePart.prototype.setModifiedtime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.msg.FilePart.prototype.clearModifiedtime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FilePart.prototype.hasModifiedtime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 PartID = 3;
 * @return {number}
 */
proto.msg.FilePart.prototype.getPartid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.msg.FilePart.prototype.setPartid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.msg.FilePart.prototype.clearPartid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FilePart.prototype.hasPartid = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bytes Bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.msg.FilePart.prototype.getBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * required bytes Bytes = 4;
 * This is a type-conversion wrapper around `getBytes()`
 * @return {string}
 */
proto.msg.FilePart.prototype.getBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytes()));
};


/**
 * required bytes Bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytes()`
 * @return {!Uint8Array}
 */
proto.msg.FilePart.prototype.getBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.msg.FilePart.prototype.setBytes = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.msg.FilePart.prototype.clearBytes = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.msg.FilePart.prototype.hasBytes = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.msg.FileType = {
  UNKNOWN: 0,
  PARTIAL: 1,
  JPEG: 2,
  GIF: 3,
  PNG: 4,
  WEBP: 5,
  MP3: 6,
  MP4: 7,
  MOV: 8
};

goog.object.extend(exports, proto.msg);

/*
    Creation Time: 2018 - Sep - 25
    Created by:  (hamidrezakk)
    Maintainers:
       1.  HamidrezaKK (hamidrezakks@gmail.com)
    Auditor: HamidrezaKK
    Copyright Ronak Software Group 2018
*/

import {C_ERR, C_ERR_ITEM, C_MSG, C_MSG_NAME} from '../const';
import Presenter from '../presenters';
import UpdateManager from './updateManager';
import {MessageContainer, MessageEnvelope} from '../messages/chat.core.types_pb';
import {throttle} from 'lodash';
import Socket from './socket';
import {base64ToU8a} from '../fileManager/http/utils';

const C_IDLE_TIME = 300;

export interface IServerRequest {
    constructor: number;
    data: Uint8Array;
    reqId: number;
    timeout: any;
}

export let serverKeys = `{"PublicKeys":[{"N":"23080363433417153128522818793517096825655219067328353558183786837615244541868193498673243604042032821924329169481657041763675203700693983847643143959187304658415635201891709948677582964090407161922475461651549685489923809135093021206809705594106798979703658911744946923274479838440895308485359525029723358401256652818507116367330822348389487866612782715203241348367376032182221118210257913937138782371907318171401149410240280813046444608842839188112066303482248553826378661262789523300886181108518356551442384149671325841720411906804646613892451880048589940167625795480617962040707466590793844594002741791942137412349","FingerPrint":7993257615976973678,"E":65537},{"N":"28516334114713293490143000387027758831856623367230844835637260231737810352750960939774754056316265915202280738103424874017081665237212562677020795093468202871152474193485912877401219899843580614755919878638101024392910847915313383089082483786804888667136745917962017397281625744019193830306931021209890931082629652322316555652043508104991347624678939209968245916952529563315998945267280475113064517312658123326369574234694368337279218704047637074428981270323735275140689916855562011023289690926176313208703304603217361354111857094988774307940832354442342693443502088084287844276883843502219851507907328129502370299807","FingerPrint":3133690666160229962,"E":65537},{"N":"24059010281817139805307026430547649838794465619418736666912258397696071226355249889657971685888857258032610020322355804927066868326403157481126154392323322315118956544523391592478274975960007579982889666337991995075934378604229791804693403495754073063719424758238381668487118884410043029780802011527077822522301563737887696594091775962519836724254907557813232212907489043463988780716343860313288269747235424716237339156963136044419657785739180040039882871724553798432807492324044912041460814290332036996600658895012625069228022666317234041212940318929660459601180827164160442398314435842220054362420692936061461177023","FingerPrint":-5192386287674808484,"E":65537},{"N":"22508879665746346713407012159444884669083521388474024751264321857388841164687901056222974498080370479275046092822987894547025303453060241026102311066496937031685611396243132007112192622375186847107389721988547270929529837420928351708209843945818674352792047899656765960522183051039671232705416836230032726634151822153954303786268638845981587429878070523445037771489130724049478112798958095463284774156816954315179503830312952889824453205402994762701830626465598081546535424239886948692601102886262210690416173067102390280481221695439187499227102975145872443553138455172022688536691985851239655576603261806840452409597","FingerPrint":7385174828382858859,"E":65537},{"N":"25417645246923047234546786223514315182116238912785446983042380561357777960259047875772932109820767084765949529127833083181963849826594672649770342240625435784666597957869544699490662435239874535668494641975315312962540631949888208043111677521196339650331270819156719539623745993893204118102795922188995623195824771790487934872588890788425646249254726631882099405809507707041892352498083478835282979625422792198910782992857263144291883253852021619227422847162611060851623587127593408496369739867824736377051094983520877856123736680314350943503731916554307888479898927512425938646913410906205691354116879282547191726761","FingerPrint":-4681254258793361149,"E":65537},{"N":"21049953324425684113613489612823630552290106175529574758886692030419616578743916334775553115325943285939555069319074890321756192105384801655145290709486056474359148449040025855065458810592433791557446061134852668509161246946092002818716661225204032397837762684411048652197386468456512463840260595133424884694628146990454410056089380791897315362904388712872189951137907796715075176977615339250321056533204873932040327607560055072903401122816732034601160853705236512405840310998878661148556662993420846443801256403738452657233124852314477843847587812661001037553293494907542798586628174403879925943104713054314728101327","FingerPrint":230723973840173964,"E":65537},{"N":"30180508993586720113583465264806664466523413278949893172462203165459426480409337089871279015888114545839239891427600153517511405100505555335382485608349996017090930130491688329095763245175413140065743596290612343177995548048994528293467561644320862029698661151607523142118122618859561395010979975385142658605560228654653211835788675092271878818165482002014056723699939036581851745752900771089622414177405280305986313841614217064994416297030840904669836455519097305251179567720820484597794164169701622049555300747909003508608984228717749529663578525086740747554188402521223472831032267222961116658852666464982140114283","FingerPrint":3327168002878861449,"E":65537},{"N":"23332245683448301222283097111667364892611878409163007844891301463504909265004666427213647927369605973171199343155357231030586459863004530090647421869902704953580039132277458640999121428806260576083781811239654265622519522954861088439084201602094724787001152539524888496647499276467909984320944004191093573753478230321357230590233494839966564088241863269079667997383925567712114775518607642329810510835788822441982469083809092265731863717396852904076808791884388383811008472033860847134860591477431074935721895883973612071648316319479530871605706913948745693299992393570594794360500283836149459644147939064304122929083","FingerPrint":6569358493786025607,"E":65537},{"N":"26356478792181450720987365245643439412916630510178712148599973981645786646643027154197724443756004604139727071187153215793131759568918734135330238529138471674129260810134915192623419911219024373179522469385664893630239363268389036941916753153639237980130928427007217749255354886925119214851083028375207781143516852235276614091626351566295773800181539875190785524180544229582739834438397566312224703102299768845458993698266014615815222151377553846873813120605773902838633246446230846589369511282044931415297495011605094410779737288515176953970741735298911256909919262858068648634142269287897913921401876939768740300201","FingerPrint":1814918137692742966,"E":65537},{"N":"24517473801453591783177024147910747430853118575246885045213104319398526713441293132024172194181211610589033453080460417096088300241929330795173567292378400519667851128762475127129827588681300804923143652970205359282104143187431088295384406285601055892640213314240258140368596815474321490481709513743370627601682508869718448521146830602009627688853203954746682064914668424042730366769287394512114905269028750271999898988383348903438263003657747199583432045559408460116872326078867440568138609832628579649355723902198991047568833108063979767485479857243428414450287159506292598745780266269646902084825751860822028968177","FingerPrint":-9040612286805837880,"E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":-4978776997167059722}]}`;
if ((localStorage.getItem('river.workspace_url') || '').indexOf('ronaksoftware.com') > -1) {
    serverKeys = `{"PublicKeys":[{"N":"25118848897932282177245700919139384404750150099443051286420483958680932318999616785468117358656906868745535067114368253583642867447644069742034871690887327807641806393154362866814670869067082838910855582042571344627633847312858985989376011283293406446259224113424892885526467096873630090982411366060309228545939134187830467758087915442541333526473506224183662758369346162982899850891065845576237266688752908504452157782224543297742005937283247646798191769066825742717116948044645985042083938549757785369721749659525202291409273477753359658898944013607000873216784148319330165950486883420334054833644032847855482032509","FingerPrint":7394918641852592645,"E":65537},{"N":"21249707023259589828882625203572225674272580290693121144039064585772886999841963721536409526022282440843688128262657540061767032187088787519653928724034793475849047994789250487935742236267848935158291781289935130264092548463720489626032599455872076196089874292697176233901232972584747422218633150431148606115133786415925258966498648297190127103542990365765167875712382655400672904401808039905581013143219877381673335013417196709050371628383130063205039714231505438906188340348457944648916217683298881611185125570182541993037806056563338841286324689864878852103314733737724967696722326127563991449350826172408373703811","FingerPrint":2363776248257911173,"E":65537},{"N":"19863054550604193823488041727574907794553354963467193076917818924664132721754826665850220231906962083775008201369133561957397980133889912558248851951970519776044765817502621009587064784777693096628382835779877029866758294196797090656332977683146622524047322377443516436601239695252843413905686699399020467544689455363457822624449365145949732364643029028423685551893583641819962002723393831006146669077949073237542941080523176298527840258778842205532339989739100238320204236098210328490552190436163372996242056017356783361778247846127669138796572298996264305675423638602261670710374605191817283295227384113688431647741","FingerPrint":-5099141843327820626,"E":65537},{"N":"29760428901343664001028833309809794343544015677516397170674878601215588275791808212890742556162155895595827561470784507818927441382831252170628521332528557087987520295267196790927612592611029658149082172703008759671157419031039827342837361544291472718895472521013019716259483209354020921442127452371575891423820946699295605756004551833001279075974074080563224444666224932026454045362404382286378528513546737731664019469325785485757138817241905803574388304564238374420073230240484847573015947946433863321363117973803262320677243592635383550602155520291663476434998507275737426553598472331105536846460631682739989661219","FingerPrint":2195174703119182464,"E":65537},{"N":"18386064557489952286420347590296751434578282707405869816885958713299461000323959947566645042552856526031409640177153580413557456444169596581870998341797298680104080669684015732452983077686038078494582573312218274626467111808818429778886097765709133950743171507322894959330274463277504523606073120382446662040167960142274463155227517163276212205755835422067514615854827329645266346012533996475215453580382748104598835874268054865686479895544554797198146708876762174829892817477539609356506735917106650744544665071969880523400678780093929701726905569602897801522055926413967804403930759100613510462652269603976775523991","FingerPrint":4479840379683382772,"E":65537},{"N":"26856167804545448049290579564011023468588993763008293592188466181493624152203964999095367371420795128612430412472216110838073483063451607435345678606377899388181953712712568128395316210032734586003021350117744410467197964162932002685114458972873577239300798020981277258362899408637644884906090479440297628771615765991411446325782942661223836610577955450204097820932873841360326076035286707297809053813347011465715499268402698830927150083994456520884686861897089801285632944182913126283200633552976218386749841394603856739318115312415688232906365260846416122082293147230082963151578228644118548380817922335519702098503","FingerPrint":8569728225196202638,"E":65537},{"N":"25761140930539439978494783846660734379198950078321693758033663237052334640619530471139381746103855925800702484276297098648531198741474154475735948656994497481651905678934562912991440112672560383261093402078501161430697511324735371368031617819168590943786234823019615023005756998056375397284879696822974650961011580206091499395498399390492214337547240343451565823803753121080531070054153784629505452057439601601659807136850041526794231441222954424268629610149685990628010782230767695141965499949849652822543965784952473307155505095483489743547945382166911358040409429285318638614625039958145755691598575103601662635873","FingerPrint":-3518366518126294391,"E":65537},{"N":"21878729227264443273397917465852122220894317740032779776997968051790123215989999965841007199864479838712294015929085122553441217024812487754107081810828692874014089314153826066240729740923792526876590678500745479627405100598576824756706391682294987326965673261452172826182988573765370466024746236316548372296498943339682423467178382713458130758590318962795115037395346029561258543522802194745122834923204527595669724518557927046350328890508977160087250218063301295330767720877139867168393712617902052319906711468238632536228153728846644967777470083076472892276635992022186751494397742523839928248454129614564991083729","FingerPrint":2842355922125748985,"E":65537},{"N":"21657921575259117082437287735038824160972581974539609548491823065113660182941223450746616405735767608349485813933217527787805175774080112057626391016872155067405926907423276805486934732269185402251726464897721288759735238594916980944505711016119900765546002533418456991149932694983775618316688113269913087592812309102853747522924306054009231759094013878121201675566877636823973567095580198874586722886709122615656758634448002677386356379713382005231679191964292977504291853536019601586206944266621069762821758456214432463931452218289861680478993171959176435089862340125449068198909635604459895897355597575325195619933","FingerPrint":-3702519902476465341,"E":65537},{"N":"26560773297321496796638749735111859220513359531489936481661136779884784205625113812180402394116732738755028273755313585352103067809685809119858624584482833675871489309402205980675382020337358851404166618802304410342906475560595604118840081050808937188565007332779418031411195462315469094720417421137008865029869517973582341668257878628972653824064257107524501253937531889165608386214524613639093523758099418212998287757704077924182163275085135477703526566976609275979665583622386423029286172254415496073164236409043934726212766525195423766504808027467773836621258239588220853730478580185244315599773665364850566951753","FingerPrint":-2599890069662518803,"E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":-4978776997167059722}]}`;
}

export default class Server {
    public static getInstance() {
        if (!this.instance) {
            this.instance = new Server();
        }

        return this.instance;
    }

    private static instance: Server;

    private socket: Socket;
    private reqId: number;
    private messageListeners: object = {};
    private sentQueue: number[] = [];
    private updateQueue: any[] = [];
    private updateManager: UpdateManager;
    private isConnected: boolean = false;
    private requestQueue: MessageEnvelope[] = [];
    private readonly executeSendThrottledRequestThrottle: any;
    private lastActivityTime: number = 0;

    public constructor() {
        this.socket = Socket.getInstance();
        this.reqId = 0;
        this.lastActivityTime = this.getTime();
        this.startIdleCheck();
        const version = this.shouldMigrate(localStorage.getItem('river.version'));
        if (version !== false) {
            this.migrate(version);
            return;
        } else {
            this.socket.setCallback((data: any) => {
                this.response(data);
            });

            this.socket.setUpdate((data: any) => {
                this.update(data);
            });

            this.socket.setError((data: any) => {
                this.error(data);
            });

            window.addEventListener('wsOpen', () => {
                this.isConnected = true;
                this.flushSentQueue();
                this.executeSendThrottledRequestThrottle();
            });

            window.addEventListener('wsClose', () => {
                this.isConnected = false;
            });

            this.updateThrottler();
            this.updateManager = UpdateManager.getInstance();
            let throttleInterval = 128;
            const tils = localStorage.getItem('river.debug.throttle_interval');
            if (tils) {
                throttleInterval = parseInt(tils, 10);
            }
            this.executeSendThrottledRequestThrottle = throttle(this.executeSendThrottledRequest, throttleInterval);
        }
    }

    /* Send a request to WASM worker over CustomEvent in window object */
    public send(constructor: number, data: Uint8Array, instant?: boolean): Promise<any> {
        let internalResolve = null;
        let internalReject = null;

        const reqId = ++this.reqId;
        const request: IServerRequest = {
            constructor,
            data,
            reqId,
            timeout: null,
        };

        const promise = new Promise((res, rej) => {
            internalResolve = res;
            internalReject = rej;
            if (this.isConnected) {
                if (instant) {
                    this.sendRequest(request);
                } else {
                    this.sendThrottledRequest(request);
                }
            }
        });

        /* Add request to the queue manager */
        this.messageListeners[reqId] = {
            reject: internalReject,
            request,
            resolve: internalResolve,
            state: 0,
        };

        this.sentQueue.push(reqId);

        return promise;
    }

    public startNetwork() {
        this.socket.start();
    }

    public stopNetwork() {
        this.socket.stop();
    }

    public isStarted() {
        return this.socket.isStarted();
    }

    /* Generate string from request and send to the api */
    private sendRequest(request: IServerRequest) {
        window.console.debug(`%c${C_MSG_NAME[request.constructor]} ${request.reqId}`, 'color: #f9d71c');
        request.timeout = setTimeout(() => {
            this.dispatchTimeout(request.reqId);
        }, 20000);
        this.socket.send(request);
    }

    private sendThrottledRequest(request: IServerRequest) {
        window.console.debug(`%c${C_MSG_NAME[request.constructor]} ${request.reqId}`, 'color: #f9d71c');
        request.timeout = setTimeout(() => {
            this.dispatchTimeout(request.reqId);
        }, 20000);
        const data = new MessageEnvelope();
        data.setConstructor(request.constructor);
        data.setMessage(request.data);
        data.setRequestid(request.reqId);
        this.requestQueue.push(data);
        this.executeSendThrottledRequestThrottle();
    }

    private executeSendThrottledRequest = () => {
        if (!this.isConnected) {
            return;
        }
        const execute = (envs: MessageEnvelope[]) => {
            if (envs.length === 0) {
                return;
            }
            const reqId = ++this.reqId;
            const data = new MessageContainer();
            data.setEnvelopesList(envs);
            data.setLength(envs.length);

            this.socket.send({
                constructor: C_MSG.MessageContainer,
                data: data.serializeBinary(),
                reqId,
                timeout: null,
            });
        };
        let envelopes: MessageEnvelope[] = [];
        while (this.requestQueue.length > 0) {
            const envelope = this.requestQueue.shift();
            if (envelope) {
                envelopes.push(envelope);
            }
            if (envelopes.length >= 50) {
                execute(envelopes);
                envelopes = [];
            }
        }
        execute(envelopes);
    }

    private response({reqId, constructor, data}: any) {
        if (constructor !== C_MSG.Error) {
            window.console.debug(`%c${C_MSG_NAME[constructor]} ${reqId}`, 'color: #f9d71c');
        }
        if (!this.messageListeners[reqId]) {
            return;
        }
        const res = Presenter.getMessage(constructor, base64ToU8a(data));
        if (constructor === C_MSG.Error) {
            window.console.error(C_MSG_NAME[constructor], reqId, res.toObject());
        }
        if (res) {
            if (constructor === C_MSG.Error) {
                if (this.messageListeners[reqId].reject) {
                    const resData = res.toObject();
                    if (resData.code === C_ERR.ERR_CODE_INTERNAL && resData.items === C_ERR_ITEM.ERR_ITEM_USER_ID) {
                        this.updateManager.forceLogOut();
                    } else {
                        this.messageListeners[reqId].reject(resData);
                    }
                }
            } else if (constructor === C_MSG.UpdateDifference) {
                if (this.messageListeners[reqId].resolve) {
                    this.messageListeners[reqId].resolve(res);
                }
            } else {
                if (this.messageListeners[reqId].resolve) {
                    this.messageListeners[reqId].resolve(res.toObject());
                }
            }
            clearTimeout(this.messageListeners[reqId].request.timeout);
            this.cleanQueue(reqId);
        }
    }

    private error({reqId, constructor, data}: any) {
        window.console.debug(`%c${C_MSG_NAME[constructor]} ${reqId}`, 'color: #f9d71c');
        const res = Presenter.getMessage(constructor, base64ToU8a(data));
        if (res) {
            if (constructor === C_MSG.Error) {
                const resp = res.toObject();
                if (resp.code === 'E01' && resp.items === 'AUTH') {
                    const authErrorEvent = new CustomEvent('authErrorEvent', {});
                    window.dispatchEvent(authErrorEvent);
                }
            }
        }
    }

    private flushSentQueue() {
        this.sentQueue.forEach((reqId) => {
            this.sendRequest(this.messageListeners[reqId].request);
        });
    }

    private dispatchTimeout(reqId: number) {
        const item = this.messageListeners[reqId];
        if (!item) {
            return;
        }
        if (item.reject) {
            const name = C_MSG_NAME[item.request.constructor];
            item.reject({
                constructor: name,
                err: 'timeout',
                reqId,
            });
        }
        this.cleanQueue(reqId);
    }

    private cleanQueue(reqId: number) {
        delete this.messageListeners[reqId];
        const index = this.sentQueue.indexOf(reqId);
        if (index > -1) {
            this.sentQueue.splice(index, 1);
        }
    }

    private update(bytes: any) {
        this.updateQueue.push(bytes);
    }

    private updateThrottler() {
        this.dispatchUpdate();
        setInterval(() => {
            this.dispatchUpdate();
        }, 10);
    }

    private dispatchUpdate() {
        if (this.updateQueue.length > 0) {
            this.updateManager.parseUpdate(this.updateQueue.shift());
        }
    }

    private shouldMigrate(v: string | null) {
        if (v === null) {
            return 0;
        }
        const pv = JSON.parse(v);
        switch (pv.v) {
            default:
            case 0:
                return pv.v;
            case 1:
                return false;
        }
    }

    private migrate(v: number | null) {
        switch (v) {
            default:
            case 0:
                this.migrate1();
                return;
        }
    }

    private migrate1() {
        // @ts-ignore
        for (const key in localStorage) {
            if (key.indexOf('_pouch_') === 0) {
                indexedDB.deleteDatabase(key);
                localStorage.removeItem(key);
            }
        }
        localStorage.setItem('river.last_update_id', JSON.stringify({
            lastId: 0,
        }));
        localStorage.setItem('river.version', JSON.stringify({
            v: 1,
        }));
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }

    private getTime() {
        return Math.floor(Date.now() / 1000);
    }

    private startIdleCheck() {
        setInterval(() => {
            if (!this.socket.isOnline()) {
                return;
            }
            const now = this.getTime();
            if (now - this.lastActivityTime > C_IDLE_TIME) {
                this.lastActivityTime = now;
                this.updateManager.idleHandler();
            }
        }, 10000);
    }
}

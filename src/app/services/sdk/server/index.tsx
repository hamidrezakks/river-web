/*
    Creation Time: 2018 - Sep - 25
    Created by:  (hamidrezakk)
    Maintainers:
       1.  HamidrezaKK (hamidrezakks@gmail.com)
    Auditor: HamidrezaKK
    Copyright Ronak Software Group 2018
*/

import {C_ERR, C_ERR_ITEM, C_MSG, C_MSG_NAME} from '../const';
import Presenter from '../presenters';
import UpdateManager from './updateManager';
import {MessageContainer, MessageEnvelope} from '../messages/chat.core.types_pb';
import {throttle} from 'lodash';
import Socket from './socket';
import {base64ToU8a} from '../fileManager/http/utils';

const C_IDLE_TIME = 300;

export interface IServerRequest {
    constructor: number;
    data: Uint8Array;
    reqId: number;
    timeout: any;
}

export let serverKeys = `{"PublicKeys":[{"N":"24797797624084274368132976348380765497077858979875025765313317992303980382271168295873508522626050734395380807072800621544084465252414464130485986167240445826795195533982291211743327138832089533454533380327426271045053505822162211591186099976117662486267998393976992173645066706874053203527587893010835783380121155114336632607715248925933928221565228473808192217219383810797202259681789364736334555466537443210340846949219132998794771745308652782969215482891322398425398919955179552974397044709441089593341326372983028126625719224091998817241339092285646530447418499885788072843197706257747581443653839001946773836419","FingerPrint":2792071143180408560,"E":65537},{"N":"24629280832055905654091793051007936611939103320715386094448818850282922665926531480269724070584882775339696160143898261935973473110730187542318573016795567451173431024513605792727304643714480779519806211474848649548071068631971937125604250692671699295087882905768935142234125434848435395700479377865446336021984598365749157915185213796810926444470554075184257781888563213019649120011166767170860837661900922472922318187534119919452347512013210618600227635193011514620841866593982208649696706355023257866564407455322281464775340767026434225391436998144621106527787604911952185471609040717081484206355942892555734803157","FingerPrint":-933795696483685958,"E":65537},{"N":"24972546309172987784546527329277579406699388703117749888596619205159530741376823311761220811989771582067866310278747371088268634198771080164082646561628586362800097406602275359120167994936674223621415478660811201704883592024901671372769596457858941382760932870625329307649024840501953410821479185877814456370790943754721231746091255361546173101752127043420224315334623102734236129917314661020179576879095138763708917043122033002720792283455848365468456678333834706604053200755436157950996472216211134105448988296585710691834027393085906859593901155332154165547377163729803972571167146061923741320959657380547609496519","FingerPrint":7722376291796778178,"E":65537},{"N":"20968323564076597187978352434022500146071745486165062512480084630573479756282353585204372249282580360014223120779054022463469253270876252863056167149621578543551062697277533061118195390531432033905607949554228240445260766865619061432745124879883830251432113936284317001702798064776347704759419777306412813190001215344426112140672771752411171267346007817914544261592390069966122793891866374199524523547287080538378078419826814994232975946705876299667647756516649868354495043912462656613705265397308306451597946900090432714201861643115788868403841979600149275321921291984854686589597231987173764219017554349062313215933","FingerPrint":7025591081908045840,"E":65537},{"N":"26589206747766051840981758509321487566790143866244315398755134110265671701320570207623157773993136889699544999256715620361877011280113102824864604866229436490388341988570851189422583296506458381908783860581432634660407613565358510630164080923685218301475630264327598132972834598784139210126286815101907188476776548296716915827920732351391513273995461756732861587921008292884987654975064969927837479024098194684838628162645969828517549978000136007124369834780052004360640134660579312773999428039630757297850287151218091454253991915248527783771423095661628143330797467007631895823231697696001102586335805713616963629207","FingerPrint":-1996508357888564509,"E":65537},{"N":"24296842889095203997140328742856843668119408313239929477036694386930811751281166645846221691164706531141269201453291471041443400798936864795714106413685282654999987841984334268174594062483789887956718445473587610303448336765247493342056535915854466296031399381598589620548713086366941506892948999105106801475496113435247937407745828354978375184675208702161084114436422725494750029389869403792020396214913878100421832073466200986852732941469382456628318899859505742701714553452450194039383714767284476936688946753686731659631594466493129939950425248557523672001372892285634659989603764371098280186506533216988055759351","FingerPrint":-4700820674116740891,"E":65537},{"N":"28300779595016931914383825408353281619030822108726277984873750277478608824992951606264224638736684066433607448176069158805205535483630736175837855746456661302846334770812905461407969421804724463844005033382897003831274751307228764567572625891074590275366778093344906043894212326858985776008975288629498570979779787757908788586287020257579544145721596224771570360380093632483766331228754530246400924472345395550753349485961697219624078026742627404924197685429282400681278729099658849596295032941196952210495465951153088503286927048747118575884412376458137450225306121487191136326948621736633635278283754024135914484381","FingerPrint":3843664132132554358,"E":65537},{"N":"22644630002948138339108895475011258213793290942935277221577782449975914953466807779285949401814308349831732060622636056592438809083686396125111830867055867402693565689741361858223802415605353989664711472609010622975778195467998680694842533843569591550431079614992926766497978021649237496915712545525066098102538238215722936642102882324110634949778112880425140166214317580179194484218134696854033895112622049813513385070843945199267561728035935608568549823370825679468758447926479520041149860323830524975639474444926952150905869768084415154658645431249192536896610001338680957893744517765586689556929198699566081047879","FingerPrint":459604956508908073,"E":65537},{"N":"25844845399973874516396425973218372157500510176054301816678064213534554080384005855025042516177618629356682343454963058769573309566527794118695930728634815827159811664171879537430027810380882202489018184490596726864968182097592471615033572079320214065011367228825566887702089518509249933274304693391148160158185322239951107315680617447938008611202655658664922919511086086796433969677738478440499259348347623015091387948404266645248137489022492676938473801138026464454297979722342781769355618794921947449781825415789457952669660176210842063212492031676556439144422789274330371953864574031116653747687243529500230198637","FingerPrint":1130251198319022565,"E":65537},{"N":"30554424045013543466649657891150516051016701963044883228215018063597900825158616343413947836854205336445937227226068800348667523320585173832196996337135708455913032015145724898051468656201884107650509908204375647983434335040314818961309571004539452766221603742827301508558058808846340063969094337760405838915006750939505637797452426403033431200386789077625278354101534437493123416779333045839073216860836620234440325405637785255767251587214376255638404639066342813123932217823727541131915180805353272702062871937195400656265730826955381231381809364378413188296174213025144701962835200655464260658743729690878844231671","FingerPrint":-7836525641729239606,"E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":-4978776997167059722}]}`;
if ((localStorage.getItem('river.workspace_url') || '').indexOf('ronaksoftware.com') > -1) {
    serverKeys = `{"PublicKeys":[{"N":"25118848897932282177245700919139384404750150099443051286420483958680932318999616785468117358656906868745535067114368253583642867447644069742034871690887327807641806393154362866814670869067082838910855582042571344627633847312858985989376011283293406446259224113424892885526467096873630090982411366060309228545939134187830467758087915442541333526473506224183662758369346162982899850891065845576237266688752908504452157782224543297742005937283247646798191769066825742717116948044645985042083938549757785369721749659525202291409273477753359658898944013607000873216784148319330165950486883420334054833644032847855482032509","FingerPrint":7394918641852592645,"E":65537},{"N":"21249707023259589828882625203572225674272580290693121144039064585772886999841963721536409526022282440843688128262657540061767032187088787519653928724034793475849047994789250487935742236267848935158291781289935130264092548463720489626032599455872076196089874292697176233901232972584747422218633150431148606115133786415925258966498648297190127103542990365765167875712382655400672904401808039905581013143219877381673335013417196709050371628383130063205039714231505438906188340348457944648916217683298881611185125570182541993037806056563338841286324689864878852103314733737724967696722326127563991449350826172408373703811","FingerPrint":2363776248257911173,"E":65537},{"N":"19863054550604193823488041727574907794553354963467193076917818924664132721754826665850220231906962083775008201369133561957397980133889912558248851951970519776044765817502621009587064784777693096628382835779877029866758294196797090656332977683146622524047322377443516436601239695252843413905686699399020467544689455363457822624449365145949732364643029028423685551893583641819962002723393831006146669077949073237542941080523176298527840258778842205532339989739100238320204236098210328490552190436163372996242056017356783361778247846127669138796572298996264305675423638602261670710374605191817283295227384113688431647741","FingerPrint":-5099141843327820626,"E":65537},{"N":"29760428901343664001028833309809794343544015677516397170674878601215588275791808212890742556162155895595827561470784507818927441382831252170628521332528557087987520295267196790927612592611029658149082172703008759671157419031039827342837361544291472718895472521013019716259483209354020921442127452371575891423820946699295605756004551833001279075974074080563224444666224932026454045362404382286378528513546737731664019469325785485757138817241905803574388304564238374420073230240484847573015947946433863321363117973803262320677243592635383550602155520291663476434998507275737426553598472331105536846460631682739989661219","FingerPrint":2195174703119182464,"E":65537},{"N":"18386064557489952286420347590296751434578282707405869816885958713299461000323959947566645042552856526031409640177153580413557456444169596581870998341797298680104080669684015732452983077686038078494582573312218274626467111808818429778886097765709133950743171507322894959330274463277504523606073120382446662040167960142274463155227517163276212205755835422067514615854827329645266346012533996475215453580382748104598835874268054865686479895544554797198146708876762174829892817477539609356506735917106650744544665071969880523400678780093929701726905569602897801522055926413967804403930759100613510462652269603976775523991","FingerPrint":4479840379683382772,"E":65537},{"N":"26856167804545448049290579564011023468588993763008293592188466181493624152203964999095367371420795128612430412472216110838073483063451607435345678606377899388181953712712568128395316210032734586003021350117744410467197964162932002685114458972873577239300798020981277258362899408637644884906090479440297628771615765991411446325782942661223836610577955450204097820932873841360326076035286707297809053813347011465715499268402698830927150083994456520884686861897089801285632944182913126283200633552976218386749841394603856739318115312415688232906365260846416122082293147230082963151578228644118548380817922335519702098503","FingerPrint":8569728225196202638,"E":65537},{"N":"25761140930539439978494783846660734379198950078321693758033663237052334640619530471139381746103855925800702484276297098648531198741474154475735948656994497481651905678934562912991440112672560383261093402078501161430697511324735371368031617819168590943786234823019615023005756998056375397284879696822974650961011580206091499395498399390492214337547240343451565823803753121080531070054153784629505452057439601601659807136850041526794231441222954424268629610149685990628010782230767695141965499949849652822543965784952473307155505095483489743547945382166911358040409429285318638614625039958145755691598575103601662635873","FingerPrint":-3518366518126294391,"E":65537},{"N":"21878729227264443273397917465852122220894317740032779776997968051790123215989999965841007199864479838712294015929085122553441217024812487754107081810828692874014089314153826066240729740923792526876590678500745479627405100598576824756706391682294987326965673261452172826182988573765370466024746236316548372296498943339682423467178382713458130758590318962795115037395346029561258543522802194745122834923204527595669724518557927046350328890508977160087250218063301295330767720877139867168393712617902052319906711468238632536228153728846644967777470083076472892276635992022186751494397742523839928248454129614564991083729","FingerPrint":2842355922125748985,"E":65537},{"N":"21657921575259117082437287735038824160972581974539609548491823065113660182941223450746616405735767608349485813933217527787805175774080112057626391016872155067405926907423276805486934732269185402251726464897721288759735238594916980944505711016119900765546002533418456991149932694983775618316688113269913087592812309102853747522924306054009231759094013878121201675566877636823973567095580198874586722886709122615656758634448002677386356379713382005231679191964292977504291853536019601586206944266621069762821758456214432463931452218289861680478993171959176435089862340125449068198909635604459895897355597575325195619933","FingerPrint":-3702519902476465341,"E":65537},{"N":"26560773297321496796638749735111859220513359531489936481661136779884784205625113812180402394116732738755028273755313585352103067809685809119858624584482833675871489309402205980675382020337358851404166618802304410342906475560595604118840081050808937188565007332779418031411195462315469094720417421137008865029869517973582341668257878628972653824064257107524501253937531889165608386214524613639093523758099418212998287757704077924182163275085135477703526566976609275979665583622386423029286172254415496073164236409043934726212766525195423766504808027467773836621258239588220853730478580185244315599773665364850566951753","FingerPrint":-2599890069662518803,"E":65537}],"DHGroups":[{"Prime":"FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF","Gen":2,"FingerPrint":-4978776997167059722}]}`;
}

export default class Server {
    public static getInstance() {
        if (!this.instance) {
            this.instance = new Server();
        }

        return this.instance;
    }

    private static instance: Server;

    private socket: Socket;
    private reqId: number;
    private messageListeners: object = {};
    private sentQueue: number[] = [];
    private updateQueue: any[] = [];
    private updateManager: UpdateManager;
    private isConnected: boolean = false;
    private requestQueue: MessageEnvelope[] = [];
    private readonly executeSendThrottledRequestThrottle: any;
    private lastActivityTime: number = 0;

    public constructor() {
        this.socket = Socket.getInstance();
        this.reqId = 0;
        this.lastActivityTime = this.getTime();
        this.startIdleCheck();
        const version = this.shouldMigrate(localStorage.getItem('river.version'));
        if (version !== false) {
            this.migrate(version);
            return;
        } else {
            this.socket.setCallback((data: any) => {
                this.response(data);
            });

            this.socket.setUpdate((data: any) => {
                this.update(data);
            });

            this.socket.setError((data: any) => {
                this.error(data);
            });

            window.addEventListener('wsOpen', () => {
                this.isConnected = true;
                this.flushSentQueue();
                this.executeSendThrottledRequestThrottle();
            });

            window.addEventListener('wsClose', () => {
                this.isConnected = false;
            });

            this.updateThrottler();
            this.updateManager = UpdateManager.getInstance();
            let throttleInterval = 128;
            const tils = localStorage.getItem('river.debug.throttle_interval');
            if (tils) {
                throttleInterval = parseInt(tils, 10);
            }
            this.executeSendThrottledRequestThrottle = throttle(this.executeSendThrottledRequest, throttleInterval);
        }
    }

    /* Send a request to WASM worker over CustomEvent in window object */
    public send(constructor: number, data: Uint8Array, instant?: boolean): Promise<any> {
        let internalResolve = null;
        let internalReject = null;

        const reqId = ++this.reqId;
        const request: IServerRequest = {
            constructor,
            data,
            reqId,
            timeout: null,
        };

        const promise = new Promise((res, rej) => {
            internalResolve = res;
            internalReject = rej;
            if (this.isConnected) {
                if (instant) {
                    this.sendRequest(request);
                } else {
                    this.sendThrottledRequest(request);
                }
            }
        });

        /* Add request to the queue manager */
        this.messageListeners[reqId] = {
            reject: internalReject,
            request,
            resolve: internalResolve,
            state: 0,
        };

        this.sentQueue.push(reqId);

        return promise;
    }

    public startNetwork() {
        this.socket.start();
    }

    public stopNetwork() {
        this.socket.stop();
    }

    public isStarted() {
        return this.socket.isStarted();
    }

    /* Generate string from request and send to the api */
    private sendRequest(request: IServerRequest) {
        window.console.debug(`%c${C_MSG_NAME[request.constructor]} ${request.reqId}`, 'color: #f9d71c');
        request.timeout = setTimeout(() => {
            this.dispatchTimeout(request.reqId);
        }, 20000);
        this.socket.send(request);
    }

    private sendThrottledRequest(request: IServerRequest) {
        window.console.debug(`%c${C_MSG_NAME[request.constructor]} ${request.reqId}`, 'color: #f9d71c');
        request.timeout = setTimeout(() => {
            this.dispatchTimeout(request.reqId);
        }, 20000);
        const data = new MessageEnvelope();
        data.setConstructor(request.constructor);
        data.setMessage(request.data);
        data.setRequestid(request.reqId);
        this.requestQueue.push(data);
        this.executeSendThrottledRequestThrottle();
    }

    private executeSendThrottledRequest = () => {
        if (!this.isConnected) {
            return;
        }
        const execute = (envs: MessageEnvelope[]) => {
            if (envs.length === 0) {
                return;
            }
            const reqId = ++this.reqId;
            const data = new MessageContainer();
            data.setEnvelopesList(envs);
            data.setLength(envs.length);

            this.socket.send({
                constructor: C_MSG.MessageContainer,
                data: data.serializeBinary(),
                reqId,
                timeout: null,
            });
        };
        let envelopes: MessageEnvelope[] = [];
        while (this.requestQueue.length > 0) {
            const envelope = this.requestQueue.shift();
            if (envelope) {
                envelopes.push(envelope);
            }
            if (envelopes.length >= 50) {
                execute(envelopes);
                envelopes = [];
            }
        }
        execute(envelopes);
    }

    private response({reqId, constructor, data}: any) {
        if (constructor !== C_MSG.Error) {
            window.console.debug(`%c${C_MSG_NAME[constructor]} ${reqId}`, 'color: #f9d71c');
        }
        if (!this.messageListeners[reqId]) {
            return;
        }
        const res = Presenter.getMessage(constructor, base64ToU8a(data));
        if (constructor === C_MSG.Error) {
            window.console.error(C_MSG_NAME[constructor], reqId, res.toObject());
        }
        if (res) {
            if (constructor === C_MSG.Error) {
                if (this.messageListeners[reqId].reject) {
                    const resData = res.toObject();
                    if (resData.code === C_ERR.ERR_CODE_INTERNAL && resData.items === C_ERR_ITEM.ERR_ITEM_USER_ID) {
                        this.updateManager.forceLogOut();
                    } else {
                        this.messageListeners[reqId].reject(resData);
                    }
                }
            } else if (constructor === C_MSG.UpdateDifference) {
                if (this.messageListeners[reqId].resolve) {
                    this.messageListeners[reqId].resolve(res);
                }
            } else {
                if (this.messageListeners[reqId].resolve) {
                    this.messageListeners[reqId].resolve(res.toObject());
                }
            }
            clearTimeout(this.messageListeners[reqId].request.timeout);
            this.cleanQueue(reqId);
        }
    }

    private error({reqId, constructor, data}: any) {
        window.console.debug(`%c${C_MSG_NAME[constructor]} ${reqId}`, 'color: #f9d71c');
        const res = Presenter.getMessage(constructor, base64ToU8a(data));
        if (res) {
            if (constructor === C_MSG.Error) {
                const resp = res.toObject();
                if (resp.code === 'E01' && resp.items === 'AUTH') {
                    const authErrorEvent = new CustomEvent('authErrorEvent', {});
                    window.dispatchEvent(authErrorEvent);
                }
            }
        }
    }

    private flushSentQueue() {
        this.sentQueue.forEach((reqId) => {
            this.sendRequest(this.messageListeners[reqId].request);
        });
    }

    private dispatchTimeout(reqId: number) {
        const item = this.messageListeners[reqId];
        if (!item) {
            return;
        }
        if (item.reject) {
            const name = C_MSG_NAME[item.request.constructor];
            item.reject({
                constructor: name,
                err: 'timeout',
                reqId,
            });
        }
        this.cleanQueue(reqId);
    }

    private cleanQueue(reqId: number) {
        delete this.messageListeners[reqId];
        const index = this.sentQueue.indexOf(reqId);
        if (index > -1) {
            this.sentQueue.splice(index, 1);
        }
    }

    private update(bytes: any) {
        this.updateQueue.push(bytes);
    }

    private updateThrottler() {
        this.dispatchUpdate();
        setInterval(() => {
            this.dispatchUpdate();
        }, 10);
    }

    private dispatchUpdate() {
        if (this.updateQueue.length > 0) {
            this.updateManager.parseUpdate(this.updateQueue.shift());
        }
    }

    private shouldMigrate(v: string | null) {
        if (v === null) {
            return 0;
        }
        const pv = JSON.parse(v);
        switch (pv.v) {
            default:
            case 0:
                return pv.v;
            case 1:
                return false;
        }
    }

    private migrate(v: number | null) {
        switch (v) {
            default:
            case 0:
                this.migrate1();
                return;
        }
    }

    private migrate1() {
        // @ts-ignore
        for (const key in localStorage) {
            if (key.indexOf('_pouch_') === 0) {
                indexedDB.deleteDatabase(key);
                localStorage.removeItem(key);
            }
        }
        localStorage.setItem('river.last_update_id', JSON.stringify({
            lastId: 0,
        }));
        localStorage.setItem('river.version', JSON.stringify({
            v: 1,
        }));
        setTimeout(() => {
            window.location.reload();
        }, 1000);
    }

    private getTime() {
        return Math.floor(Date.now() / 1000);
    }

    private startIdleCheck() {
        setInterval(() => {
            if (!this.socket.isOnline()) {
                return;
            }
            const now = this.getTime();
            if (now - this.lastActivityTime > C_IDLE_TIME) {
                this.lastActivityTime = now;
                this.updateManager.idleHandler();
            }
        }, 10000);
    }
}
